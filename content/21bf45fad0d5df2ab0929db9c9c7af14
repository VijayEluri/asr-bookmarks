<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">










<html>
  <head>
    <title>Acegi Security - Acegi Security System for Spring</title>
    <style type="text/css" media="all">
      @import url("./css/maven-base.css");
      @import url("./css/maven-theme.css");
      @import url("./css/site.css");
    </style>
    <link rel="stylesheet" href="./css/print.css" type="text/css" media="print" />
        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
      </head>
  <body class="composite">
    <div id="banner">
                  <a href="http://sourceforge.net/projects/acegisecurity" id="bannerLeft">
    
                                    <img src="http://sourceforge.net/sflogo.php?group_id=104215&type=5" alt="" />
    
            </a>
                        <a href="" id="bannerRight">
    
                                            <img src="images/logo.gif" alt="" />
    
            </a>
            <div class="clear">
        <hr/>
      </div>
    </div>
    <div id="breadcrumbs">
          
  

  
    
  
  
            <div class="xleft">
        Last Published: 04/15/2008
                      </div>
            <div class="xright">      <a href="http://sourceforge.net/projects/acegisecurity">Acegi Security on Sourceforge</a>
          
  

  
    
  
  
  </div>
      <div class="clear">
        <hr/>
      </div>
    </div>
    <div id="leftColumn">
      <div id="navcolumn">
           
  

  
    
  
  
                   <h5>Overview</h5>
        <ul>
              
    <li class="none">
              <a href="building.html">Building with Maven</a>
        </li>
              
    <li class="none">
              <a href="downloads.html">Downloads</a>
        </li>
          </ul>
          <h5>Documentation</h5>
        <ul>
              
    <li class="none">
              <a href="suggested.html">Suggested Steps</a>
        </li>
              
    <li class="none">
              <a href="reference.html">Reference Guide</a>
        </li>
              
    <li class="none">
              <a href="dbinit.txt">Sample SQL Schema</a>
        </li>
              
    <li class="none">
              <a href="faq.html">FAQ</a>
        </li>
              
    <li class="none">
              <a href="petclinic-tutorial.html">Petclinic Tutorial</a>
        </li>
              
    <li class="none">
              <a href="articles.html">External Web Articles</a>
        </li>
              
    <li class="none">
              <a href="powering.html">Products using Acegi</a>
        </li>
              
    <li class="none">
              <a href="standalone.html">Use without Spring</a>
        </li>
              
    <li class="none">
              <a href="upgrade/upgrade-090-100.html">Upgrading to 1.0.0</a>
        </li>
              
    <li class="none">
              <a href="upgrade/upgrade-080-090.html">Upgrading to 0.9.0</a>
        </li>
              
    <li class="none">
              <a href="upgrade/upgrade-070-080.html">Upgrading to 0.8.0</a>
        </li>
              
    <li class="none">
              <a href="acegi-security/apidocs/index.html">Core JavaDocs</a>
        </li>
              
    <li class="none">
              <a href="acegi-security-samples/acegi-security-samples-contacts/sslhowto.txt">Contacts HTTPS</a>
        </li>
              
    <li class="none">
              <a href="policies.html">Project Policies</a>
        </li>
              
    <li class="none">
              <a href="http://opensource.atlassian.com/projects/spring/secure/BrowseProject.jspa?id=10040">Acegi Security JIRA</a>
        </li>
              
    <li class="none">
              <a href="http://forum.springframework.org/forumdisplay.php?f=33">Community Forum</a>
        </li>
              
    <li class="none">
              <a href="acegi-security/project-reports.html">Core Reports</a>
        </li>
          </ul>
          <h5>Links</h5>
        <ul>
              
    <li class="none">
              <a href="http://www.springframework.org/">Spring Framework</a>
        </li>
              
    <li class="none">
              <a href="http://www.interface21.com/">Interface21</a>
        </li>
          </ul>
                                       <a href="http://maven.apache.org/" title="Built by Maven" id="poweredBy">
            <img alt="Built by Maven" src="./images/logos/maven-feather.png"></img>
          </a>
                       
  

  
    
  
  
        </div>
    </div>
    <div id="bodyColumn">
      <div id="contentBox">
        <div class="section"><h2>Spring Security 2.0.0 Released</h2><p>Acegi Security is now <a href="http://www.springframework.org/projects/">Spring Security</a>, the official security project of the <a href="http://www.springframework.org/projects/">Spring Portfolio</a>. If you are planning a new project, we'd recommend you consider using Spring Security. Acegi Security 1.0.7 will be the last non-critical release of the 1.0.x series.</p><p>Spring Security 2.0.0 builds on Acegi Security's solid foundations, adding many new features:</p><ul><li>Simplified namespace-based configuration syntax. Old configurations could require hundreds of lines of XML but our new convention over configuration approach ensures that many deployments will now require less than 10 lines.</li><li>OpenID integration, which is the web's emerging single sign on standard (supported by Google, IBM, Sun, Yahoo and others)</li><li>Windows NTLM support, providing easy enterprise-wide single sign on against Windows corporate networks</li><li>Support for JSR 250 (&quot;EJB 3&quot;) security annotations, delivering a standards-based model for authorization metadata</li><li>AspectJ pointcut expression language support, allowing developers to apply cross-cutting security logic across their Spring managed objects</li><li>Substantial improvements to the high-performance domain object instance security (&quot;ACL&quot;) capabilities</li><li>Comprehensive support for RESTful web request authorization, which works well with Spring 2.5's @MVC model for building RESTful systems</li><li>Long-requested support for groups, hierarchical roles and a user management API, which all combine to reduce development time and significantly improve system administration</li><li>An improved, database-backed &quot;remember me&quot; implementation</li><li>Support for portlet authentication out-of-the-box</li><li>Support for additional languages</li><li>Numerous other general improvements, documentation and new samples</li><li>New support for web state and flow transition authorization through the Spring Web Flow 2.0 release</li><li>New support for visualizing secured methods, plus configuration auto-completion support in Spring IDE</li><li>Enhanced WSS (formerly WS-Security) support through the Spring Web Services 1.5 release<p>Please visit <a href="http://www.springframework.org/download">http://www.springframework.org/download</a> to download the latest release and access the change log.</p></li></ul></div><div class="section"><h2>Acegi Security - Key Features</h2><ul><li><b>Stable and mature:</b> Acegi Security 1.0.0 was released in May 2006 after more than two and a half years of use in large production software projects, 70,000+ downloads and hundreds of community contributions. In terms of release numbering, we also use the <a href="http://apr.apache.org/versioning.html">Apache APR Project Versioning Guidelines</a> so that you can easily identify release compatibility.</li><li><b>Well documented:</b> All APIs are fully documented using <a href="http://acegisecurity.org/multiproject/acegi-security/apidocs/index.html">JavaDoc</a>, with almost 100 pages of <a href="./reference.html">Reference Guide</a> documentation providing an easy-to-follow introduction. Even more documentation is provided on this web site, as shown in the left hand navigation sidebar.</li><li><b>Fast results:</b> View our <a href="./suggested.html">suggested steps</a> for the fastest way to develop complex, security-compliant applications.</li><li><b>Enterprise-wide single sign on:</b> Using JA-SIG's open source <a href="http://www.ja-sig.org/products/cas/">Central Authentication Service</a> (CAS), the Acegi Security can participate in an enterprise-wide single sign on environment. You no longer need every web application to have its own authentication database. Nor are you restricted to single sign on across a single web container. Advanced single sign on features like proxy support and forced refresh of logins are supported by both CAS and Acegi Security.</li><li><b>Reuses your Spring expertise:</b> We use Spring application contexts for all configuration, which should help Spring developers get up-to-speed nice and quickly.</li><li><b>Domain object instance security:</b> In many applications it's desirable to define Access Control Lists (ACLs) for individual domain object instances. We provide a comprehensive ACL package with features including integer bit masking, permission inheritence (including blocking), a JDBC-backed ACL repository, caching and a pluggable, interface-driven design.</li><li><b>Non-intrusive setup:</b> The entire security system can operate within a single web application using the provided filters. There is no need to make special changes or deploy libraries to your Servlet or EJB container.</li><li><b>Full (but optional) container integration:</b> The credential collection and authorization capabilities of your Servlet or EJB container can be fully utilised via included &quot;container adapters&quot;. We currently support Catalina (Tomcat), Jetty, JBoss and Resin, with additional containers easily added.</li><li><b>Keeps your objects free of security code:</b> Many applications need to secure data at the bean level based on any combination of parameters (user, time of day, authorities held, method being invoked, parameter on method being invoked....). This package gives you this flexibility without adding security code to your Spring business objects.</li><li><b>After invocation security:</b> Acegi Security can not only protect methods from being invoked in the first place, but it can also deal with the objects returned from the methods. Included implementations of after invocation security can throw an exception or mutate the returned object based on ACLs.</li><li><b>Secures your HTTP requests as well:</b> In addition to securing your beans, the project also secures your HTTP requests. No longer is it necessary to rely on web.xml security constraints. Best of all, your HTTP requests can now be secured by your choice of regular expressions or Apache Ant paths, along with pluggable authentication, authorization and run-as replacement managers.</li><li><b>Channel security:</b> Acegi Security can automatically redirect requests across an appropriate transport channel. Whilst flexible enough to support any of your &quot;channel&quot; requirements (eg the remote user is a human, not a robot), a common channel security feature is to ensure your secure pages will only be available over HTTPS, and your public pages only over HTTP. Acegi Security also supports unusual port combinations (including if accessed via an intermediate server like Apache) and pluggable transport decision managers.</li><li><b>Supports HTTP BASIC authentication:</b> Perfect for remoting protocols or those web applications that prefer a simple browser pop-up (rather than a form login), Acegi Security can directly process HTTP BASIC authentication requests as per RFC 1945.</li><li><b>Supports HTTP Digest authentication:</b> For greater security than offered by BASIC authentcation, Acegi Security also supports Digest Authentication (which never sends the user's password across the wire). Digest Authentication is widely supported by modern browsers. Acegi Security's implementation complies with both RFC 2617 and RFC 2069.</li><li><b>Computer Associates Siteminder support:</b> Authentication can be delegated through to CA's Siteminder solution, which is common in large corporate environments.</li><li><b>X509 (Certificate) support:</b> Acegi Security can easily read client-side X509 certificates for authenticating users.</li><li><b>LDAP Support:</b> Do you have an LDAP directory? Acegi Security can happily authenticate against it.</li><li><b>Tag library support:</b> Your JSP files can use our taglib to ensure that protected content like links and messages are only displayed to users holding the appropriate granted authorities. The taglib also fully integrates with Acegi Security's ACL services, and obtaining extra information about the logged-in principal.</li><li><b>Configuration via IoC XML, Commons Attributes, or JDK 5 Annotations:</b> You select the method used to configure your security environment. The project supports configuration via Spring application contexts, as well as Jakarta Commons Attributes and Java 5's annotations feature. Some users (such as those building content management systems) pull configuration data from a database, which exemplifies Acegi Security's flexible configuration metadata system.</li><li><b>Various authentication backends:</b> We include the ability to retrieve your user and granted authority definitions from an XML file, JDBC datasource or Properties file. Alternatively, you can implement the single-method UserDetailsService interface and obtain authentication details from anywhere you like.</li><li><b>Event support:</b> Building upon Spring's <tt>ApplicationEvent</tt> services, you can write your own listeners for authentication-related events, along with authorisation-related events. This enables you to implement account lockout and audit log systems, with complete decoupling from Acegi Security code.</li><li><b>Easy integration with existing databases:</b> Our implementations have been designed to make it very easy to use your existing authentication schema and data (without modification). Of course, you can also provide your own Data Access Object if you wish.</li><li><b>Caching:</b> Acegi Security integrates with Spring's <a href="http://ehcache.sourceforge.net">EHCACHE</a> factory. This flexibility means your database (or other authentication repository) is not repeatedly queried for authentication information.</li><li><b>Pluggable architecture:</b> Every critical aspect of the package has been modelled using high cohesion, loose coupling, interface-driven design principles. You can easily replace, customise or extend parts of the package.</li><li><b>Startup-time validation:</b> Every critical object dependency and configuration parameter is validated at application context startup time. Security configuration errors are therefore detected early and corrected quickly.</li><li><b>Remoting support:</b> Does your project use a rich client? Not a problem. Acegi Security integrates with standard Spring remoting protocols, because it automatically processes the HTTP BASIC authentication headers they present. Add our BASIC authentication filter to your web.xml and you're done. You can also easily use RMI or Digest authentication for your rich clients with a simple configuration statement.</li><li><b>Advanced password encoding:</b> Of course, passwords in your authentication repository need not be in plain text. We support both SHA and MD5 encoding, and also pluggable &quot;salt&quot; providers to maximise password security. Acegi Security doesn't even need to see the password if your backend can use a bind-based strategy for authentication (such as an LDAP directory, or a database login).</li><li><b>Run-as replacement:</b> The system fully supports temporarily replacing the authenticated principal for the duration of the web request or bean invocation. This enables you to build public-facing object tiers with different security configurations than your backend objects.</li><li><b>Transparent security propagation:</b> Acegi Security can automatically transfer its core authentication information from one machine to another, using a variety of protocols including RMI and Spring's HttpInvoker.</li><li><b>Compatible with HttpServletRequest's security methods:</b> Even though Acegi Security can deliver authentication using a range of pluggable mechanisms (most of which require no web container configuration), we allow you to access the resulting Authentication object via the getRemoteUser() and other security methods on HttpServletRequest.</li><li><b>Unit tests:</b> A must-have of any quality security project, unit tests are included. Our unit test coverage is very high, as shown in the <a href="acegi-security/cobertura/index.html">coverage report</a>.</li><li><b>Built by Maven:</b> This assists you in effectively reusing the Acegi Security artifacts in your own Maven-based projects.</li><li><b>Supports your own unit tests:</b> We provide a number of classes that assist with your own unit testing of secured business objects. For example, you can change the authentication identity and its associated granted authorities directly within your test methods.</li><li><b>Peer reviewed:</b> Whilst nothing is ever completely secure, using an open source security package leverages the continuous design and code quality improvements that emerge from peer review.</li><li><b>Community:</b> Well-known for its supportive community, Acegi Security has an active group of developers and users. Visit our project resources (below) to access these services.</li><li><b>Apache license.</b> You can confidently use Acegi Security in your project.</li></ul></div>
      </div>
    </div>
    <div class="clear">
      <hr/>
    </div>
    <div id="footer">
      <div class="xright">&#169;  
          2004-2008
    
          Interface21, Inc
          
  

  
    
  
  
  </div>
      <div class="clear">
        <hr/>
      </div>
    </div>
  </body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>del.icio.us direc.tor: Delivering A High-Performance AJAX Web Service Broker :: Johnvey</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<link rel="stylesheet" title="Stylesheet of the gods" href="/etc/global.css" />
<script language="JavaScript" src="/etc/global.js"></script>
<script language="JavaScript">
var sexy = new jvScrambler("sexy", "scram", "DEL.ICIO.US DIREC.TOR");
</script>
<style type="text/css">
#frBotInCol img	{ border: 1px solid #ccc; padding: 5px; background: #fff; }
</style>
</head>

<body>
<div id="container">
<div id="frTopLeft"><a href="/"><img src="/images/header-logo.gif" width="217" height="53" alt="Johnvey.com" title="Johnvey.com" border="0" class="headerLogo" /></a></div>
<div id="frTopRight">
<ul id="nav">
<li><a href="/" title="Blog" onmouseover="sexy.go('PURVEYOR OF FINE WORDS')" onmouseout="sexy.reset()">BLOG</a></li>
<li><a href="/photos/" title="Photos" onmouseover="sexy.go('PHOTOGRAPHIC HALL OF RECORDS')" onmouseout="sexy.reset()">PHOTOS</a></li>
<li><a href="/features/" title="Features" onmouseover="sexy.go('SUPER-EXTENDED LP EDITION')" onmouseout="sexy.reset()">FEATURES</a></li>
<li><a href="/work/" title="Work" onmouseover="sexy.go('MONEY MAKES THE WORLD GO \'ROUND')" onmouseout="sexy.reset()">WORK</a></li>
<li><a href="/about/" title="About" onmouseover="sexy.go('PERSON IN A GLASS HOUSE')" onmouseout="sexy.reset()">ABOUT</a></li>
</ul>
</div>
<h1 id="logo"><span id="scram">DEL.ICIO.US DIREC.TOR</span></h1>

<div id="frBotSingle">

	<script language="JavaScript">
		function nogo() { alert("Please sir! Bookmark me - don't click me!"); return false; }
	</script>
	<style type="text/css">
		code	{ font-size: 1.2em; color: #007;}
		.code 	{ background: #eef2ff; border: 1px solid #ddd; padding: 10px; white-space: nowrap; }
		.code .comment	{ color: green; }
		.ss		{ float: right; padding: 5px; border: 1px solid #ccc; margin-bottom: 10px; }
		.bm		{ padding: 5px; background: #fff; border: 1px solid #aaa; width: 10em; text-align: center; }
		.fnote	{ font-size: .7em; color: #333; border-top: 1px solid #ccc; padding-top: 10px; margin-top: 10px; }
	</style>



	<h2>del.icio.us direc.tor: Delivering A High-Performance <a href="/blog/2005/06/call-it-anything-but-ajax">AJAX</a> Web Service Broker</h2>
	<p><em>June 20, 2005</em></p>
	
	<h3>What is it?</h3>
	<p><img src="/images/features/delicious-ss1.gif" width="450" height="311" alt="Delicious Director screenshot" class="ss" />
	<p>del.icio.us direc.tor is a prototype for an alternative web-based rich UI for <a href="http://del.icio.us">del.icio.us</a>. It leverages the XML and XSL services of modern browsers to deliver a responsive interface for managing user accounts with a large number of records.</p>
	<p>The main features are:</p>
	<ul>
		<li>In-browser handling of del.icio.us bookmarks (tested up to 12,000 records)</li>
		<li>Find-as-you-type searching of all your bookmarks, with basic search operators</li>
		<li>Sort by description, tags, or timestamp</li>
		<li>Ad-hoc tag browser</li>
	</ul>
	
	<h3>How do I use it?</h3>
	<p>Because of the restrictions on the browser, you'll need to load this using a Javascript bookmarklet. Follow these four steps to get started:</p>
	<ol>
		<li>Create a bookmarklet by <strong>bookmarking</strong> the following link:
			<div class="bm"><a href="javascript:void((function() {var%20element=document.createElement('script'); element.setAttribute('src', 'http://johnvey.com/features/deliciousdirector/dboot.js'); document.body.appendChild(element)})())" onclick="return(nogo())">del.icio.us direc.tor</a></div>
		</li>
		<li>Go to <a href="https://api.del.icio.us/">api.del.icio.us</a></li>
		<li>Launch the bookmark you just created <strong>while</strong> you are still on the del.icio.us page</li>
		<li>Login to del.icio.us, if prompted<br />(<a href="demo.html">Try the static demo</a> if you don't have a del.icio.us account.)</li>
		<li>Type in a search term or click a tag in the browser; click the column headings to sort</li>
	</ol>
	<p>NOTE: This <strong>only works</strong> on Firefox and Internet Explorer.  Safari won't work because it <a href="http://developer.apple.com/internet/safari/faq.html#anchor21">doesn't support XSLT via Javascript</a>.</p>
	<h4>Supported operators</h4>
	<p>direc.tor supports the following operators:</p>
	<table class="listing">
		<tr><td><code>t:<em>&lt;search_term&gt;</em></code></td><td>Search only in tag field<br />Ex: <code>t:humor</code></td></tr>
		<tr><td><code>d:<em>&lt;search_term&gt;</em></code></td><td>Search only in description field<br />Ex: <code>d:politics</code></td></tr>
		<tr><td><code>-<em>&lt;search_term&gt;</em></code></td><td>Exclude results containing search term<br />Ex: <code>-microsoft</code></td></tr>
	</table>
	<p>Combining operators, like <code>-t:nonsense</code>, is currently not supported.</p>
	
	<h3>How does it work?</h3>
	<p>The idea behind a client-side web service broker (or intermediary, as <a href="http://weblog.infoworld.com/udell/2002/12/30.html">Jon Udell calls it</a>) is simple: assist a client in interpreting or processing information from a service, but letting the client do all the work (just like what "strategic management consultants" do). Unlike other web services like <a href="http://www.kokogiak.com/amazon/">Amazon Light</a> or <a href="http://www.googlism.com/">Googlism</a> that execute all of the program logic on the server side, a client-side broker sends all of the logic over as Javascript and has the browser do the work.</p>
	<p>Other brokering services like the <a href="http://stuff.rancidbacon.com/gmaps-standalone/">Google Maps hack</a> are not entirely self-contained and require the broker host to proxy information between the main server and the client, thus doubling the amount of network traffic and degrading the overall performance. direc.tor eliminates the need for the broker host to proxy requests by instructing the client to directly communicate with the main server. This approach is very similar to the way <a href="http://greasemonkey.mozdev.org/">Greasemonkey</a> scripts are loaded, except that it is largely platform independent and does not require additional client-side extensions like Greasemonkey. However, the major pitfall to this approach is that users are required to manually create the bookmarklet.</p>
	<p style="text-align:center"><img src="/images/features/delicious-broker.gif" width="592" height="229" alt="Comparing standard vs. client-side web service brokers" /></p>
	<p>In a standard service, the Client Browser makes a request to the Service Broker (1), which in turn makes a request to the Web Service (2). The response from the Web Service is then transformed by the Service Broker, and presented to the Client Browser (3). In a client-side service, the Client Browser gets the entire service logic from the Service Broker (1), and then communicates directly with the Web Service (2).</p>
	<h4>Loading the service</h4>
	<p>This project uses the only reliable loophole for executing foreign Javascript code: the bookmarklet bootloader. It works by inserting a <code>&lt;script&gt;</code> element directly into the DOM, which is then immediately executed by the browser. The injected Javascript wipes the existing del.icio.us page and replaces the entire body with the direc.tor UI. At the same time, direc.tor makes an XmlHTTPRequest to <code>http://del.icio.us/api/posts/all</code> to get the XML listing of the user's bookmarks, which is persisted through the lifetime of the direc.tor page.  Because del.icio.us uses the standard HTTP basic authentication, the browser will automatically ask for credentials if it has not been established yet.  Since the client is communicating directly with del.icio.us, those credentials never pass through this site.  For more information about this, and cross-site scripting concerns, see <a href="web-service-broker.html">Creating a client-side web service broker</a>.</p>
	<h4>Filtering and sorting the bookmarks</h4>
	<p>Performance is the primary concern &#8212; and often a severely limiting factor &#8212; when developing an in-browser application that handles large amounts of data. Filtering and sorting recordsets over 10,000 records though traditional Javascript objects is so sluggish that it simply is not a viable solution. del.icio.us direc.tor bypasses that limitation by leveraging the speed of the XML and XSL processors accessible via Javascript in modern browsers. Because these components are compiled binaries, their methods are orders of magnitude faster than an equivalent implementation in intepreted Javascript. del.icio.us direc.tor offloads all of the heavy lifting and a majority of the HTML generation to the XSLT processor  to provide a responsive user interface. Since this is a rather lengthy discussion in and of itself, I have moved it to its own article: <a href="xslt-filter-sort.html">Using XSLT to filter and sort records in the browser</a>.</p>
	
	<h4>Implementing the tag browser</h4>
	<p>Although it seems that the tag browser doesn't display a great deal of information, it too cannot be implemented with efficiency using straight Javascript. The main reason is that the tags and their relationship to the bookmarks can't be indexed in a way that allows fast retrieval.  Brute force approaches work fine when the record count is around 1000 or so, but at 10,000 records the processing time becomes prohibitive.  Again, I use the compiled XML resources to tackle the heavy lifting and allow direc.tor to handle large record sets.  Another structure that is essential is an <a href="http://www.devarticles.com/c/a/Development-Cycles/Learning-About-the-Graph-Construct-using-Games-Part-1/2/">adjacency list</a>, which allows for the fast, indexed retrieval of a tag and its related tags.</p>
	<p>The major hurdle is not doing the initial retrieval of tags, but finding tags that have more than one other tag in common, i.e. <em>"Show me all the tags that appear with the tag 'blog' and 'photo'."</em>  The brute force approach would cycle through all of the records, return those that contain the tag 'blog', cycle through that subset in search of 'photo', and then finally list and count all of the remaining tags that aren't 'blog' or 'photo'.  Instead, direc.tor uses a single XPath query to pull out the subset of tags:</p>
	<p class="code"><code>//posts/post[contains(string(@tag),'blog') and contains(string(@tag),'photo')]</code></p>
	<p>Once that subset of nodes is returned by the XML engine, the tags from each node are inserted into a modified adjacency list, represented as a hashtable of hashtables in Javascript <a href="#hash">*</a>. The subset of nodes returned is almost always signifcantly smaller than the entire record set, making subsequent Javascript operations responsive enough for a decent user experience.  The outer hashtable is keyed by tag name, such that every tag that exists in the current node set is represented. The inner hashtables store the related tags and the number of occurences.</p>
	<p><img src="/images/features/delicious-hashtable.gif" width="325" height="140" style="float:left;padding-right: 10px;"/><em><strong>Example:</strong> This diagram represents a bookmark collection that has a total of 6 unique tags: blog, design, css, photo, cool, politics. The outer hashtable (left) uses each of those tags as its keys, while its values are hashtables that contain the key tag and any tag that is related. The values of those inner hashtables represent the total count of each tag and its occurence with the outer tag.</em><br style="clear:left" />
  </p>
	<p>The hashtable's fast key-based retrieval makes it an ideal indexer for storing the tag counts, and fulfilling the tag requests from the user. Getting a list of tags is accomplished by enumerating over the hashtable keys, and getting the tag counts involves retrieving the values from the inner hashtables.</p>
	
	<h4>Highlighting the search terms</h4>
	<p>The search term highlighting is currently implemented using Javascript, by way of a generic search and replace method that wraps search terms with a <code>&lt;span&gt;</code> tag. The method then assigns one of the 6 CSS colors that are defined in the stylesheet. I'm sure that it could also be done in XSL, but I was unable to create out a template that would highlight multiple query terms that occur in a random order (if you have one, I'd love to see it).  Because of Javascript performance limitations, single letter query terms are not highlighted.  The highlighting takes place in the pipeline after the XSL transformation, but before the DOM node is actually brought online and painted in the browser (this is good general practice, as editing live DOM objects is horrifically slow.)</p>

	<h3>What else could this do?</h3>
	<p>There are probably hundreds of other features that would be cool to implement, so here are some that I would implement if I had more time:</p>
	<ul>
		<li><strong>Bulk tag editing:</strong> Enable tag addition and removal from multiple bookmarks (which would then give me an excuse to implement the fancy <a href="http://www.axentric.com/posts/default/7">fade anything technique</a>).</li>
		<li><strong>Labeling:</strong> Designate a tag as a special UI flag that mimics Gmail's "starred" functionality.</li>
		<li><strong>Other operators:</strong> Add <code>OR</code>, <code>since:</code>, <code>related:</code>, and <code>inurl:</code> operators.</li>
		<li><strong>Media detection:</strong> Expose media player controls for registered types, like MPG, MOV, WMV, etc.</li>
		<li><strong>RSS import:</strong> Expand the input processor to parse RSS feeds, i.e. other people's tags.</li>
		<li><strong>XML export:</strong> Allow download of an XML version of a current search, or all bookmarks.</li>
		<li><strong>Link autopreview:</strong> Enable an Outlook-style bookmark preview pane.</li>
		<li><strong>OS X Dashboard integration:</strong> Port direc.tor to a Dashboard widget.</li>
	</ul>
	
	<p>The ultimate feature, though, would be to integrate some of this project directly into del.icio.us in order to eliminate the bootloading process altogether. I'm sure all you cats on delicious-discuss can come up with a collective feature list.  I did this project to research different interface possibilities on other projects, so by all means, let me know if you're interested in helping make this a more mature service.</p>
	<h3>Related Articles</h3>
	<ul>
		<li><a href="xslt-filter-sort.html">Using XSLT to filter and sort records in the browser</a></li>
		<li><a href="web-service-broker.html">Creating a client-side web service broker</a></li>
	</ul>
	<p>Thanks go to the DHTML grandmaster, <a href="http://www.404minefield.com/portfolio/">Nick Mealy</a>, and VMWare guru, <a href="http://www.johnzed.com">John Zedlewski</a>, for their help with this project.</p>
	<p>Comments or questions? <a href="/blog/2005/06/delicious-director">Leave a message</a>, or <a href="/contact/">contact me directly</a>.</p>
	<p>&nbsp;</p>
	<p class="fnote"><a name="hash">*</a> Javascript does not technically implement hashtables or associative arrays as native classes.  What Javascript does have is the ability to access object properties by way of an index, i.e. <code>myObject.myProperty</code> can alternatively be accessed using <code>myObject["myProperty"]</code>.  This leads to the common misconception that typing <code>myArray["myKey"]</code> creates an associative array called <code>myArray</code> with an element indexed under <code>myKey</code>. It actually assigns a new property called <code>myKey</code> to the object instance of <code>myArray</code> and does not actually add any element to the formal array.  Underneath, Javascript <em>does</em> store the object properties in a hashtable, so the practical consequence is a relatively fast hashtable.  However, it is important to recognize the distinction to avoid going nuts when array methods don't return expected results.</p>


</div>

<div id="copyright">
	2001&#8211;2006 A brief exploration through the marvelous mind of <a href="/contact/">Johnvey Hwang</a>. All content released under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.0/">Creative Commons License</a> unless otherwise noted.
</div>

</div>

<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-626632-1";
urchinTracker();
</script>

<!--
<rdf:RDF xmlns="http://web.resource.org/cc/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
<dc:title>Johnvey.com</dc:title>
<dc:date>2005</dc:date>
<dc:creator><Agent>
<dc:title>Johnvey Hwang</dc:title>
</Agent></dc:creator>
<dc:rights><Agent>
<dc:title>Johnvey Hwang</dc:title>
</Agent></dc:rights>
<dc:source rdf:resource="http://johnvey.com"/>
<license rdf:resource="http://creativecommons.org/licenses/by-nc-sa/2.0/" />
</Work>
<License rdf:about="http://creativecommons.org/licenses/by-nc-sa/2.0/">
<permits rdf:resource="http://web.resource.org/cc/Reproduction" />
<permits rdf:resource="http://web.resource.org/cc/Distribution" />
<requires rdf:resource="http://web.resource.org/cc/Notice" />
<requires rdf:resource="http://web.resource.org/cc/Attribution" />
<prohibits rdf:resource="http://web.resource.org/cc/CommercialUse" />
<permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
<requires rdf:resource="http://web.resource.org/cc/ShareAlike" />
</License>
</rdf:RDF>
-->
</body>
</html>
<!-- HTH_VERSION_4 -->
<!-- HTH_RAW  -->
<html>
<head>
 <title>Distributing Ruby Applications - Theory and Practice of Building, Packing and Distributing Ruby Applications</title>
 <meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>
 <meta http-equiv='Content-Style-Type' content='text/css'>
  <style type='text/css'>
  <!--

             /* body                  { background            : white     } */

             /* body                  { margin-top            : 50px      } */
             /* body                  { margin-bottom         : 50px      } */
             /* body                  { margin-left           : 100px     } */
             /* body                  { margin-right          : 100px     } */

             body                     { background            : gray      }

             body                     { margin-top            : 0px       }
             body                     { margin-bottom         : 0px       }
             body                     { margin-left           : 0px       }
             body                     { margin-right          : 0px       }

             div.main                 { background            : white     }

             div.main                 { margin-top            : 25px      }
             div.main                 { margin-bottom         : 25px      }
             div.main                 { margin-left           : 25px      }
             div.main                 { margin-right          : 25px      }

             div.main                 { border-style          : solid     }
             div.main                 { border-color          : black     }
             div.main                 { border-top-width      : 1px       }
             div.main                 { border-bottom-width   : 4px       }
             div.main                 { border-left-width     : 1px       }
             div.main                 { border-right-width    : 4px       }

             div.main                 { padding-top           : 50px      }
             div.main                 { padding-bottom        : 50px      }
             div.main                 { padding-left          : 100px     }
             div.main                 { padding-right         : 100px     }

             a                        { text-decoration       : none      }
             a                        { color                 : #CC0000   }
             a:hover                  { background            : #CCCCCC   }

             a.nohover:hover          { background            : white     }

             a.rss                    { background            : #FF6600   }
             a.rss                    { color                 : #FFFFFF   }
             a.rss                    { font-size             : small     }
             a.rss                    { font-style            : bold      }

             pre                      { background            : #EEEEEE   }

             /* pre                   { margin-left           : 25px      } */
             /* pre                   { margin-right          : 25px      } */

             img                      { background            : white     }
             img:hover                { background            : white     }

             h1                       { font-size             : large     }
             h2                       { font-size             : medium    }
             h3                       { font-size             : small     }

             h1                       { color                 : #CC0000   }
             h2                       { color                 : #CC0000   }
             h3                       { color                 : #CC0000   }

             h1                       { font-style            : normal    }
             h2                       { font-style            : normal    }
             h3                       { font-style            : italic    }

             h1.no-toc                { font-size             : xx-large  }
             h2.no-toc                { font-size             : x-large   }
             h3.no-toc                { font-size             : large     }

             /* tt:hover              { background            : #EEEEEE   } */

  //-->
  </style>
</head>
<body link='#CC0000' vlink='#CC0000' alink='#CC0000'>
<div class='main'>
<a name='top'></a>

<!-- HTH_HR -->
<hr>

<!-- HTH_H -->
<h1 class='no-toc' align='center' title='Title'>Distributing Ruby Applications</h1>

<!-- HTH_SH -->
<h2 class='no-toc' align='center' title='Subtitle'>Theory and Practice of Building, Packing and Distributing Ruby Applications</h2>

<!-- HTH_DATE -->
<p align='center'><span title='Last modified'>Fri May 25 15:05:33 UTC 2007</span><br><span title='Author'>Erik Veenstra &lt;<a href='mailto:erikveen@dds.nl' title='Mail: erikveen@dds.nl'>erikveen@dds.nl</a>&gt;</span></p>

<!-- HTH_HR -->
<hr>

<!-- HTH_PDF -->
<p align='center'><small><i><a href='index.html.pdf' target='_blank' type='application/pdf' title='Printable version'>PDF version (A4)</a></i></small></p>

<!-- HTH_TOC -->
<p>
<a name='toc_1.0.0'></a><a href='#1.0.0' title='Go to this section'>1. Introduction</a><br>
<br><a name='toc_2.0.0'></a><a href='#2.0.0' title='Go to this section'>2. Create the Application</a><br>
<br><a name='toc_3.0.0'></a><a href='#3.0.0' title='Go to this section'>3. Pack the Application (the RBA)</a><br>
<br><a name='toc_4.0.0'></a><a href='#4.0.0' title='Go to this section'>4. Distribute the Application (the Executable)</a><br>
<br><a name='toc_5.0.0'></a><a href='#5.0.0' title='Go to this section'>5. Summary</a><br>
<br><a name='toc_6.0.0'></a><a href='#6.0.0' title='Go to this section'>6. Tutorials</a><br>
<br><a name='toc_7.0.0'></a><a href='#7.0.0' title='Go to this section'>7. Future</a><br>
<small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a name='toc_7.1.0'></a><a href='#7.1.0' title='Go to this section'>7.1. One Step</a></small><br>
<small>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a name='toc_7.2.0'></a><a href='#7.2.0' title='Go to this section'>7.2. Enriching the RBA</a></small><br>
</p>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='1.0.0'></a><a name='1.0.0'></a><a href='#1.0.0' title='Link to this section'>1. Introduction</a></h1>

<!-- HTH_TEXT -->
<p>This is how I build, pack and distribute my Ruby applications. Theory and practice. The ultimate goal is to be able to distribute just one executable (Linux, Darwin or Windows) which contains both the application and the Ruby interpreter.</p>

<!-- HTH_TEXT -->
<p>The three main steps are:</p>

<!-- HTH_NL -->
<ol>
<li>Create the application in a directory (and its subdirectories).</li>
<li>Convert this directory into an RBA (Ruby Archive) with <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a>.</li>
<li>Convert this RBA into an executable with <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a>.</li>
</ol>

<!-- HTH_TEXT -->
<p>I can distribute this executable to my customers as a standalone application. They don&#39;t need Ruby.</p>

<!-- HTH_CENTER -->
<p align='center'><i>Customers don&#39;t need Ruby.</i></p>

<!-- HTH_TEXT -->
<p>They don&#39;t need Ruby, because it&#39;s embedded in the executable, along with the application files and libraries and gems. Everything they need to run the application. To <b>run</b> the application. Not to install the application. This document describes a way to create an <tt><b>application.exe</b></tt>. Not a <tt>setup.exe</tt> or an <tt>install.exe</tt>.</p>

<!-- HTH_NOTE -->
<p><small><i>(That&#39;s a lot of <tt>exe</tt>-s, but it works on Linux and Darwin, too.)</i></small></p>

<!-- HTH_IMG -->
<p align='center'><img src='images/distributingrubyapplications1.dia.gif' alt='[images/distributingrubyapplications1.dia.gif]' title='Schematic representation' border='0'></p>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='2.0.0'></a><a name='2.0.0'></a><a href='#2.0.0' title='Link to this section'>2. Create the Application</a></h1>

<!-- HTH_TEXT -->
<p>An application is more than just a program or script. It consists of libraries, documentation, help files, configuration files, images, license, readme, and so on. Because a hard disk isn&#39;t one big directory, we traditionally group files in directories. When installing an application on a hard disk, we can do this grouping in two ways:</p>

<!-- HTH_L -->
<ul>
<li>Put all files of one type in one directory. All binaries in one place, all help files in another. That means that an application is scattered all over the place. That&#39;s the way it&#39;s done on Linux and most versions if Unix.</li>
<li>Put all files that are part of one application in its own directory tree. Binaries, help files, configuration files, everything in one place. This time, if you want to search the help files for a term, you have to find those help files in the first place. In the Windows world, this is the preferred way of installing applications.</li>
</ul>

<!-- HTH_TEXT -->
<p>Without a good, uniform bookkeeping of your files (&quot;Which files belong to which application?&quot;), it&#39;s virtually impossible to uninstall or update an application. The one-app-one-dir approach gives us the housekeeping for free. Because Ruby has no uniform way of packing and distributing applications, putting all files of one application in its own directory tree seems like a safe bet.</p>

<!-- HTH_TEXT -->
<p>User data has to be separated from the applications, under all circumstances. You don&#39;t want your data to be scattered all over the place!</p>

<!-- HTH_TEXT -->
<p>Besides this one-app-one-dir approach, there&#39;s also the one-app-one-file approach. Like a ZIP-file or TAR-ball, but executable. It looks like an ideal way of keeping related files together. I&#39;ll return to this topic later on, because it turns out to be not only a theory: it has already been implemented. Anyway, you still need to build your application in one directory tree.</p>

<!-- HTH_TEXT -->
<p>A couple of things you have to take care of when creating the application:</p>

<!-- HTH_L -->
<ul>
<li>The entry point of the application is <tt>init.rb</tt> . I&#39;ll explain this in &quot;<a href='#pack' title='Open: #pack'>Pack the Application (the RBA)</a>&quot;.</li>
<li>Use only directories and files. No links, no permissions, no owners, no groups. All this is for being platform-independent as much as possible.</li>
<li>Don&#39;t rely on shared libraries which are not part of the Ruby environment. Unless you are absolutely sure your customer has installed these libraries. For example: the Ruby bindings for TK are considered to be part of your Ruby environment, TK itself isn&#39;t. For that reason, I like <a href='../rubywebdialogs/index.html' title='Open: ../rubywebdialogs/index.html'>RubyWebDialogs</a> (pure Ruby!) and <a href='http://wxruby.rubyforge.org/wiki/wiki.pl' target='_blank' title='Open in a new window: http://wxruby.rubyforge.org/wiki/wiki.pl'>WxRuby</a> (native widgets).</li>
</ul>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='3.0.0'></a><a name='pack'></a><a href='#pack' title='Link to this section'>3. Pack the Application (the RBA)</a></h1>

<!-- HTH_TEXT -->
<p>The next step is packing it all into one file, which we can mail, or ship, or publish on the &#39;Net, or distribute to all the workstations. Traditionally, we put them in a ZIP-file or a TAR-ball, which has to be extracted manually by the customer. Not all customers know or want to know how to do that. They only want to run the application. The goal of most software companies is to reach as much people as possible: &quot;More people&quot; means &quot;more money&quot;. So they make software for stupid customers and get rich. (It worked for Microsoft...) And open source developers want to make more people happy. To achieve this, we&#39;ve created installers, e.g. NSIS.</p>

<!-- HTH_TEXT -->
<p>I want to go back one step and ask this question: Do we really need to install an application before we can use it? We can rewrite this question: Why do we install an application, anyway? Mostly, because we have to recreate the environment in which the application has to live. We shouldn&#39;t bother our customer with recreating this environment. He just wants to double click on an icon. That&#39;s what he understands: &quot;To start an application, you have to double click on the icon.&quot; If we manage to get our software down to this level, we can reach even more people. More people being happy, more money.</p>

<!-- HTH_TEXT -->
<p>JAR&#39;s (Java Archives) are a common way in the Java universe to package applications, or libraries, or applets. It&#39;s one file, you can launch it by double clicking, it&#39;s sealed, it&#39;s simple. It&#39;s good. Can we do this with Ruby? Yes, we can. Do we have to change the runtime environment? No, we don&#39;t. But Java knows how to handle JAR&#39;s and Ruby doesn&#39;t know how to handle RBA&#39;s (Ruby Archives): We need extra tools! No we don&#39;t. And yes, it already exists. It&#39;s called <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a>.</p>

<!-- HTH_TEXT -->
<p><a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> transforms a directory tree, containing your application, into one single Ruby script, called the RBA (Ruby Archive), along with some code to handle this archive and start the application. This RBA can be distributed to our friends. When they&#39;ve installed Ruby, they just double click, and your application is up and running! See the examples section of <a href='../rubywebdialogs/index.html' title='Open: ../rubywebdialogs/index.html'>RubyWebDialogs</a> for some demos.</p>

<!-- HTH_TEXT -->
<p>To create the RBA:</p>

<!-- HTH_TEXT -->
<pre>$ ruby <a href='../tar2rubyscript/download/tar2rubyscript.rb' title='Download: ../tar2rubyscript/download/tar2rubyscript.rb'>tar2rubyscript.rb</a> <i>application</i>/</pre>

<!-- HTH_TEXT -->
<p>The result, <tt><i>application</i></tt><tt>.rb</tt>, <b>is</b> the application and can run like any script:</p>

<!-- HTH_TEXT -->
<pre>$ ruby <i>application</i>.rb</pre>

<!-- HTH_TEXT -->
<p><a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> knows how to handle the embedded archive and is able to extract it to a temporary directory. After that, it simply loads <tt>init.rb</tt>, if present, in the newly created directory. This <tt>init.rb</tt> is our entry point.</p>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='4.0.0'></a><a name='4.0.0'></a><a href='#4.0.0' title='Link to this section'>4. Distribute the Application (the Executable)</a></h1>

<!-- HTH_TEXT -->
<p>Until now, we assumed that our customer has installed Ruby. Even worse: we assumed that he has installed the same libraries as we have. And the same gems. And that he has the same versions, or at least compatible versions. Well, that&#39;s a lot of assumptions. Unwelcome assumptions. It would be nice if we could assume that the customers hasn&#39;t installed Ruby at all. That&#39;s where <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> comes in.</p>

<!-- HTH_TEXT -->
<p><a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> transforms the RBA (well, any Ruby script...) into a standalone Windows, Linux or Darwin executable. You can look at it as a &quot;compiler&quot;. Not in the sense of a source-code-to-byte-code compiler, but as a &quot;collector&quot;, for it collects all necessary files to run the application on an other machine: the RBA, the Ruby interpreter and the Ruby runtime library (stripped down for this application). Anyway, the result is the same: a standalone executable (<tt><i>application</i></tt><tt>.exe</tt>). And that&#39;s what we want!</p>

<!-- HTH_TEXT -->
<p>To create the executable:</p>

<!-- HTH_TEXT -->
<pre>$ ruby <a href='../rubyscript2exe/download/rubyscript2exe.rb' title='Download: ../rubyscript2exe/download/rubyscript2exe.rb'>rubyscript2exe.rb</a> <i>application</i>.rb</pre>

<!-- HTH_TEXT -->
<p>You can copy the result (<tt><i>application</i></tt><tt>.exe</tt> on Windows, <tt><i>application</i></tt><tt>_linux</tt> on Linux and <tt><i>application</i></tt><tt>_darwin</tt> on Darwin) to another machine and run the application! Even on a machine without Ruby.</p>

<!-- HTH_TEXT -->
<p>To list the contents of the executable and the contents of the RBA:</p>

<!-- HTH_TEXT -->
<pre>$ ./<i>application</i>_linux --eee-list
$ ./<i>application</i>_linux --tar2rubyscript-list</pre>

<!-- HTH_TEXT -->
<p>On Windows, it&#39;s:</p>

<!-- HTH_TEXT -->
<pre>c:\home\erik&gt; <i>application</i>.exe --eee-list
c:\home\erik&gt; <i>application</i>.exe --tar2rubyscript-list</pre>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='5.0.0'></a><a name='5.0.0'></a><a href='#5.0.0' title='Link to this section'>5. Summary</a></h1>

<!-- HTH_TEXT -->
<p>To create the RBA and the executable:</p>

<!-- HTH_TEXT -->
<pre>$ ruby <a href='../tar2rubyscript/download/tar2rubyscript.rb' title='Download: ../tar2rubyscript/download/tar2rubyscript.rb'>tar2rubyscript.rb</a> <i>application</i>/
$ ruby <a href='../rubyscript2exe/download/rubyscript2exe.rb' title='Download: ../rubyscript2exe/download/rubyscript2exe.rb'>rubyscript2exe.rb</a> <i>application</i>.rb</pre>

<!-- HTH_TEXT -->
<p>To list the contents of the executable and the contents of the RBA:</p>

<!-- HTH_TEXT -->
<pre>$ ./<i>application</i>_linux --eee-list
$ ./<i>application</i>_linux --tar2rubyscript-list</pre>

<!-- HTH_TEXT -->
<p>Have a look at the sites of <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> and <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> for the usage and other detailed information of both products.</p>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='6.0.0'></a><a name='6.0.0'></a><a href='#6.0.0' title='Link to this section'>6. Tutorials</a></h1>

<!-- HTH_TEXT -->
<p>For now, I&#39;m working on only one tutorial: <a href='rails.html' title='Open: rails.html'>Distributing Rails Applications</a>.</p>

<!-- HTH_HR -->
<hr>

<!-- HTH_HEADER -->
<h1><a name='7.0.0'></a><a name='7.0.0'></a><a href='#7.0.0' title='Link to this section'>7. Future</a></h1>

<!-- HTH_TEXT -->
<p>These sections are just theories. They are not not (yet) (fully) implemented and probably never will be. If you&#39;re satisfied with the previous sections and the executable, you can stop reading...</p>

<!-- HTH_HEADER -->
<h2><a name='7.1.0'></a><a name='7.1.0'></a><a href='#7.1.0' title='Link to this section'>7.1. One Step</a></h2>

<!-- HTH_TEXT -->
<p>I&#39;m contemplating the combination <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> and <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> in just one step:</p>

<!-- HTH_TEXT -->
<pre>$ ruby rubyscript2exe.rb <i>application</i>/</pre>

<!-- HTH_TEXT -->
<p><a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> already knows how to embed files and directories. Starting <tt>ruby init.rb</tt> in the given directory can&#39;t be too difficult...</p>

<!-- HTH_HEADER -->
<h2><a name='7.2.0'></a><a name='7.2.0'></a><a href='#7.2.0' title='Link to this section'>7.2. Enriching the RBA</a></h2>

<!-- HTH_TEXT -->
<p>We&#39;ve created an RBA and an executable. The RBA contains the application and the executable contains the RBA and everything else to run the application.</p>

<!-- HTH_TEXT -->
<p>There&#39;s something wrong with this picture. We can&#39;t ship the RBA instead of the executable, unless our customer has installed the same libraries and gems as we have. At least the ones required or loaded by our application. And it would be nice if the versions were the same as well. Can&#39;t we just ship our libraries and gems along with our application to avoid these dependencies? Can&#39;t we just copy the necessary files from <tt>sitelibdir</tt> and <tt>gemdir</tt> into the RBA?</p>

<!-- HTH_TEXT -->
<p>Yes we can, if <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> is able to detect and embed all necessary <tt>sitelibdir</tt>-files and <tt>rubygem</tt>-files (and their <tt>dll</tt>&#39;s and <tt>so</tt>&#39;s, determined recursively) and if <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> is able to detect and embed all necessary files except the <tt>sitelibdir</tt>-files and <tt>rubygem</tt>-files. Combining these features results in an enriched RBA and the same executable. The RBA can run on a plain Ruby installation and the executable can run on any machine (with the corresponding OS).</p>

<!-- HTH_TEXT -->
<p>In an ideal world, this RBA contains just Ruby files and no <tt>so</tt>-files, so the application is platform agnostic, like Ruby itself. For example, the examples of <a href='../rubywebdialogs/index.html' title='Open: ../rubywebdialogs/index.html'>RubyWebDialogs</a> are perfectly enriched RBA&#39;s.</p>

<!-- HTH_TEXT -->
<p>At the time of writing, <a href='../tar2rubyscript/index.html' title='Open: ../tar2rubyscript/index.html'>Tar2RubyScript</a> and <a href='../rubyscript2exe/index.html' title='Open: ../rubyscript2exe/index.html'>RubyScript2Exe</a> are not able to do this optimization.</p>

<!-- HTH_TEXT -->
<p>The following two images show the differences.</p>

<!-- HTH_EOP -->
<!-- PAGE BREAK -->

<!-- HTH_IMG -->
<p align='center'><img src='images/distributingrubyapplications2.dia.gif' alt='[images/distributingrubyapplications2.dia.gif]' title='No enriched RBA' border='0'></p>

<!-- HTH_IMG -->
<p align='center'><img src='images/distributingrubyapplications3.dia.gif' alt='[images/distributingrubyapplications3.dia.gif]' title='Enriched RBA' border='0'></p>

<!-- HTH_EOP -->
<!-- PAGE BREAK -->

<!-- HTH_HR -->
<hr>

<!-- HTH_RSS -->
<div title='RSS ../index.rss'><a  class='rss'href='../index.rss'>&nbsp;RSS&nbsp;</a></div>

<!-- HTH_NEDSTAT -->
<p><a target='_blank' href='http://v1.nedstatbasic.net/stats?ADLjdACiXrPgq9VX7QeFqqtYrVFg'><img src='http://m1.nedstatbasic.net/n?id=ADLjdACiXrPgq9VX7QeFqqtYrVFg' border='0' width='18' height='18' alt='Nedstat Basic - Free web site statistics'/></a></p>

<p align='center'><font size='1' color='white'>aior all allinone allinoneruby applications archive bin browser code codesnippet codesnippets compile compiler computer computerlanguage dialog dialogs distribute distributing distributingrubyapplications distribution eee eee-file eeefile erik erikveen erikveenstra exe executable exerb file graphical graphicaluserinterface gui gz html http httpserver iloveruby interface jar jit just justintime lang language one pack package packaging packing packingrubyapplications programming programminglanguage rar rb rb2bin rb2exe rba rbarchive rbtobin rbtoexe rbw ruby ruby2bin ruby2exe rubyapplications rubyarchive rubycompiler rubyscript rubyscript2 rubyscript2exe rubyscripts rubyscripttoexe rubytobin rubytoexe rubyweb rubywebdialog rubywebdialogs script scripts server snippet snippets t2rb t2rs tar tar2rb tar2rbscript tar2rs tar2rscript time ui user userinterface veenstra web webbrowser webdialog webdialogs window windowinbrowser windows wrap wrapper wxruby zip</font></p>

</div>
</body>
</html>








<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<script type='text/JavaScript' src='/js/cookie_get.js'></script>
<title>Using JConsole to Monitor Applications</title>
<meta name="collection" content="reference">
<meta name="description" content="JConsole is the Java Monitoring and Management Console, a new graphical tool shipped  in J2SE JDK 5.0. This article describes how JConsole can be used to observe information about an application running on the Java platform, with an overview of the J2SE 5.0 monitoring and  management
architecture and how JConsole plugs into the architecture.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="date" content="2004-12-07">
<link rel="stylesheet" href="/css/default_developer.css" />
<script language="JavaScript" type="text/javascript" src="/js/popUp.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/sniff.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucontent.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucode.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/developer.js"></script>
</head>
<!--stopindex-->
<body leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" rightmargin="0" bgcolor="#ffffff" onload="prepmenus(); done=true">
<a name="top"></a>
<!-- THIS FILE IS GENERATED BY A DCR FILE -->
<!-- BEGIN GENERIC MASTHEAD -->
<!-- BEGIN A1 COMPONENT V.0 -->
<div class="a1 a1r2">
<div class="a1v0">
<a href="#skip2content" class="skiplink">Skip to Content</a>
<span class="toolbarlinks">
<a href="/global/mh/suncom/index.html">Sun</a>
<a href="/global/mh/java/">Java</a>
<a href="/global/mh/solaris/">Solaris</a>
<a href="/global/mh/communities/" class="dividelink">Communities</a>
<a href="http://developers.sun.com/global/my_profile.html">My SDN Account</a>

</span>
</div>
</div>
<!-- END A1 COMPONENT V.0 -->
<!-- BEGIN A2 COMPONENT V.1 -->
<div class="a2w0">
<div class="a2" id="a2v1">
<div class="a2w1"><div class="a2w2"><div class="a2w3"><div class="a2w4">
<div class="a2topiclinks">
<div class="a2search">
<form action="http://search.sun.com/main/index.jsp" accept-charset="utf-8" method="GET">
<input type="hidden" name="charset" value="utf-8">
<input type="hidden" name="col" value="main-developer-all">
<span class="rightarrowwhite">&raquo;</span>&nbsp;<a href="http://developers.sun.com/global/search_tips.html">search tips</a>&nbsp;
<input class="searchfield" name="qt" class="medium" size="7" onFocus="if( this.value==this.defaultValue ) this.value='';" value="Search">
<input id="searchbttn" type="image" border="0" src="/im/a2_bttn_search.gif" alt="Submit Search">
</form>
</div>
<a href="http://www.sun.com" title="Sun Microsystems Home Page" id="sunlogo"><img src="/im/a.gif" alt="Home Page" width="98" height="58" border="0" /></a>
<a href="http://developers.sun.com" title="Sun Developer Network"><img src="/im/a.gif" id="venuespacer" alt="Sun Developer Network" width="400" height="33" border="0" /></a>
<ul id="mtopics">
<li id="mtopic1"><a id="glink1" class="tpclink a2menu" title="See All APIs" href="/global/mh/api/index.html">APIs</a></li>
<li id="mtopic2"><a id="glink2" class="tpclink a2menu" title="See All Downloads" href="/global/mh/downloads/index.html">Downloads</a></li>
<li id="mtopic3"><a id="glink3" class="tpclink a2menu" title="See All Products" href="/global/mh/products/index.html">Products</a></li>
<li id="mtopic4"><a id="glink4" class="tpclink a2menu" title="See All Support" href="/global/mh/support/index.html">Support</a></li>
<li id="mtopic5"><a id="glink5" class="tpclink a2menu" title="See All Training" href="/global/mh/training/index.html">Training</a></li>
<li id="mtopic6"><a id="glink6" class="tpclink a2menu" title="See All Participate" href="/global/mh/participate/index.html">Participate</a></li>
</ul>
</div>
</div></div></div></div>
</div></div>
<!-- END A2 COMPONENT V.1 -->
<!-- END GENERIC MASTHEAD -->
<!-- BEGIN BREADCRUMB -->
<div id="breadcrumb">
<a href="http://developers.sun.com/index.jsp">SDN Home</a> > <a href="http://java.sun.com/index.jsp">Java Technology</a> > <a href="http://java.sun.com/reference/index.html">Reference</a> > <a href="http://java.sun.com/reference/techart/index.html">Technical Articles and Tips</a> > 
</div><br />
<!-- END BREADCRUMB -->
<!-- BEGIN PAGETITLE -->
<div class="pagetitle2">Article</div>
<div class="smallpagetitle"><h1>Using JConsole to Monitor Applications</h1></div>
<!-- END PAGETITLE -->
<!-- BEGIN WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<table border="0" cellpadding="10" cellspacing="0" width="100%">
<tr><td width="100%" valign="top">
<!-- BEGIN CENTRAL COLUMN COMPONENTS -->
<!--startindex-->
<!-- ============ -->
<!-- MAIN CONTENT -->
<!-- ============ -->
<a name="skip2content"></a>
<!--  BEGIN VCD4 PFV  -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="smaller" valign="top"><em></em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom"><div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a><br></td>
</tr></table></div>
</td></tr>
</table>
<!--  END VCD4 PFV -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td class="smaller" valign="top"><em>
By Mandy Chung, December 2004
</em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom">
<div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<!--
<td valign="bottom" align="right"><img src="/im/ic_email.gif" width="14" height="12" border="0" hspace="4" vspace="1" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">E-mail</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right"><img src="/im/ic_download_thin.gif" width="9" height="14" hspace="4" border="0" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">Download</a></td>
-->
</tr>
</table>
</div>
</td></tr>
</table>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<!--  END VCD4 BYLINE AND TOOLS  -->
<p>
The Java 2 Platform, Standard Edition (J2SE) 5.0 release provides comprehensive monitoring and management support. It not only defines the management interfaces for the Java virtual machine, but also provides out-of-the-box remote monitoring and management on the Java platform and of applications that  run on it. In addition, JDK 5.0 includes the Java Monitoring and Management Console (<i>JConsole</i>) tool. It uses the extensive instrumentation of the Java virtual machine to provide information on performance and resource consumption of applications running on the Java platform using Java Management
Extension (JMX) technology.
</p>
<p>
The article describes how JConsole can be used to observe information about an application running on the Java platform. The article first gives an overview of the J2SE 5.0 monitoring and management architecture and how JConsole plugs into the architecture. It then describes how to use JConsole to access several core monitoring and management functionalities provided by the Java platform including:<br />
<ul>
<li><a href="#LowMemoryDetection">Detect low memory</a></li>
<li><a href="#VerboseTracing">Enable or disable GC and class loading verbose tracing</a></li>
<li><a href="#DeadlockDetection">Detect deadlocks</a></li>
<li><a href="#LoggingControl">Control the log level of any loggers in an application</a></li>
<li><a href="#OSResources">Access OS resources&mdash;Sun's platform extension</a></li>
<li><a href="#ManageMBeans">Manage an application's Managed Beans (MBeans)</a></li>
</ul>
</p>
<div><b>Architectural Overview</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
Figure 1 shows the architecture of J2SE 5.0 monitoring and management support. In the 5.0 release, the Java virtual machine (JVM) is highly instrumented for monitoring and management. The platform instrumentation provides information on performance, resource consumption, and the JVM and logging settings of applications running on the Java platform.
</p>
<p>
JMX provides a standard way to instrument the Java runtime environment and applications, and the JMX Remote API allows that instrumentation to be accessed remotely. The instrumentation is accessible through the JMX managed bean (MBean) interfaces, which are registered in the platform MBean server. Applications can also create their own MBeans and register them in the platform MBean server, which can serve as a single point for remote access. A JMX-compliant client, such as JConsole, can connect to the platform MBean server and manage the application (as well as the Java platform) using
JMX technology.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="567"><tr>
<td align="center" class="grey3"><img src="jconsole/arch-overview.jpg" width="557" height="344" border="0" alt="Figure 1: Architecture of J2SE 5.0 Monitoring and Management Support" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 1</b>: Architecture of J2SE 5.0 Monitoring and Management Support.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<div><b>Platform Beans</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The Java platform provides a set of <i>platform MBeans</i> (Managed Beans) for monitoring and management of the Java virtual machine and the logging facility:
</p>
<!-- BEGIN VCD8 DATA TABLE COMPONENT  -->
<div><b class="dkgrey"></b></div><div class="pad2x0x10x0">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="vatop" summary="Description of the MBeans"><tr>
<th width="35%" scope="col" align="left" class="headerbar6"><div class="headerpadding2"><b>Platform MBean</b></div></th>
<th width="65%" scope="col" align="left" class="headerbar6"><div class="headerpadding2"><b>Description</b></div></th></tr>
<tr><td colspan="3"><img src="http://developers.sun.com/images/a.gif" width="1" height="2" border="0" alt=" " /></td></tr>
<tr>
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/ClassLoadingMXBean.html"><code>java.lang.management.ClassLoadingMXBean</code></a></td></code></div></td>
<td><div class="datacell">Class loading system of the Java virtual machine.</code></td>
</tr>
<tr class="grey5">
<td><div class="datacell"><a  href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/CompilationMXBean.html"><code>java.lang.management.CompilationMXBean</code></a></div></td>
<td><div class="datacell">Compilation system of the Java virtual machine.</div></td>
</tr>
<tr>
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/MemoryMXBean.html"> <code>java.lang.management.MemoryMXBean</code></a></div></td>
<td><div class="datacell">Memory system of the Java virtual machine.</div></td>
</tr>
<tr class="grey5">
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/MemoryManagerMXBean.html">
<code>java.lang.management.MemoryManagerMXBean</code></a></div></td>
<td><div class="datacell">Memory manager in the Java virtual machine.</div></td>
</tr>
<tr>
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/MemoryPoolMXBean.html">
<code>java.lang.management.MemoryPoolMXBean</code></a></div></td>
<td><div class="datacell">Memory pool in the Java virtual machine.</div></td>
</tr>
<tr class="grey5">
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/GarbageCollectorMXBean.html">
<code>java.lang.management.GarbageCollectorMXBean</code></a></div></td>
<td><div class="datacell">Garbage collector in the Java virtual machine.</div></td>
</tr>
<tr>
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/ThreadMXBean.html">
<code>java.lang.management.ThreadMXBean</code></a></div></td>
<td><div class="datacell">Threading system of the Java virtual machine.</div></td>
</tr>
<tr class="grey5">
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/RuntimeMXBean.html">
<code>java.lang.management.RuntimeMXBean</code></a></div></td>
<td><div class="datacell">Runtime system of the Java virtual machine.</div></td>
</tr>
<tr>
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/OperatingSystemMXBean.html">
<code>java.lang.management.OperatingSystemMXBean</code></a></div></td>
<td><div class="datacell">Operating system on which the Java virtual machine is running.</div></td>
</tr>
<tr class="grey5">
<td><div class="datacell"><a
href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/logging/LoggingMXBean.html">
<code>java.util.logging.LoggingMXBean</code></a></div></td>
<td><div class="datacell">Logging facility.</div></td>
</tr>
<!--  FINAL LINE IS OF A DIFFERENT COLOR  -->
<tr><td colspan="3" class="headerbar6"><img src="http://developers.sun.com/images/a.gif" width="1" height="1" border="0" alt=" " /></td></tr></table></div>
<!-- END VCD8 DATA TABLE COMPONENT  -->
<span class="sp20">&nbsp;</span><br />
<p>
An MBean is a managed object that follows the design patterns conforming to the <a
href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/package-summary.html">JMX specification</a>. An MBean can represent a device, an application, or any resource that needs to be managed. The management interface of an MBean comprises a set of readable and/or writable attributes and a set of invokable operations. MBeans can also emit notifications when predefined events occur.
</p>
<p>
Each platform MBean has a rich set of attributes and operations such as memory usage, thread CPU usage, garbage collection statistics, and so on. Some might also emit notifications. We will explore a few platform MBeans in
the following sections.
</p>
<div><b>The JConsole Tool</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
JConsole is a JMX-compliant GUI tool that connects to a running JVM, which started with the management agent. To start an application with the management agent for local monitoring, set the <code>com.sun.management.jmxremote</code> system property when you start the application. For example, to enable the J2SE sample application <i>Java2Demo</i> for local monitoring, enter the following command:
</p>
<pre>&nbsp;&nbsp;&nbsp;<i>JDK_HOME</i>/bin/java -Dcom.sun.management.jmxremote -jar <i>JDK_HOME</i>/demo/jfc/Java2D/Java2Demo.jar<br></pre>
<p>
where <code><i>JDK_HOME</i></code> is the directory containing the JDK 5.0. The <a href="http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html">Monitoring and Management Using JMX</a> document provides detailed information on out-of-the-box remote management.
</p>
<p>
To start JConsole, run<br />
<pre>&nbsp;&nbsp;&nbsp;<i>JDK_HOME</i>/bin/jconsole</pre>
A connection dialog box opens, whose Local tab lists any JVMs running on the local system started with the same user ID as JConsole, along with their process ID and class/argument information.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="410"><tr>
<td align="center" class="grey3"><img src="jconsole/Local.jpg" width="400" height="300" border="0" alt="Figure 2: Local Tab" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 2</b>: Local Tab.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
Jconsole can connect to a running JVM in 3 different ways:
</p>
<ul>
<li><a href="jconsole/Local.jpg">Local</a>. Connects to a Java virtual machine running on the local system using JConsole that is executed with the same user name. JConsole connects to the platform MBean server using an RMI connector with authentication that uses the filesystem access permission. This local monitoring connection capability is only available in Sun's JDK.<br /><br /></li>
<li><a href="jconsole/Remote.jpg">Remote</a>. Connects to a JMX agent using an RMI connector with the following URL:<br />
<pre style="margin-left: 80px;">service:jmx:rmi:///jndi/rmi://<i>hostName</i>:<i>portNum</i>/jmxrmi</pre>
where <i>hostName</i> is the host name and <i>portNum</i> is the port number specified when the JMX agent was enabled.  JConsole will pass the user name and password as client credentials as authentication to the RMI connector server by setting the "<code>jmx.remote.credentials</code>" property to these values in the environment map for establishing the connection.<br /><br /></li>
<li><a href="jconsole/Advanced.jpg">Advanced</a>. Connects to a JMX agent with the specified URL. You typically use this to connect to a JMX agent using a custom connector other than RMI connector, or an application running on JDK 1.4 with the Reference Implementation of JMX (JSR-3) and JMX Remote (JSR-160).<br /><br /></li>
</ul>
<p>
When JConsole successfully establishes the connection, it obtains information from the JVM MBeans in the connected JMX agent, and displays the information in the following tabs:
</p>
<ul>
<li><a href="jconsole/SummaryTab.JPG">Summary tab</a>. Summary information on the JVM and on monitored values.</li>
<li><a href="jconsole/MemoryTab.JPG">Memory tab</a>. Information on memory use.</li>
<li><a href="jconsole/ThreadsTab.jpg">Threads tab</a>. Information on thread use.</li>
<li><a href="jconsole/ClassesTab.JPG">Classes tab</a>. Information on class loading</li>
<li><a href="jconsole/VMTab.JPG">VM tab</a>. Information on the JVM</li>
<li><a href="jconsole/MBeansTab.jpg">MBeans tab</a>. Information on all MBeans</li>
</ul>
<p>
The MBeans tab displays information on all MBeans registered in the target JVM in a generic way. The MBeans tab
allows you to access the <i>full set</i> of the platform instrumentation, including those that are not visible in
the other tabs. Note that the other tabs present some of the information on the platform MBeans. In addition, you can monitor and manage your application's MBeans using this MBeans tab.
</p>
<div><b>Using MBeans Tab to Monitor and Manage MBeans</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
All platform and application MBeans that are registered in the connected JMX agent can be accessed through the MBeans tab. For example, the Memory MBean is defined as follows:
</p>
<table class="grey4" cellpadding="2" cellspacing="2" border="0" style="text-align: left; width: 100%;">
<tbody>
<tr>
<td style="vertical-align: top;">
<pre>	public interface MemoryMXBean {<br>	    public MemoryUsage getHeapMemoryUsage();<br>	    public MemoryUsage getNonHeapMemoryUsage();<br>	    public int         getObjectPendingFinalizationCount();<br>	    public boolean     isVerbose();<br>	    public void        setVerbose(boolean value);<br>	    public void        gc();<br>	}<br></pre>
</td>
</tr></tbody></table>
<span class="sp20"> </span><br />
<p>
The Memory MBean contains four attributes:
</p>
<ul>
<li><code>HeapMemoryUsage</code>. A read-only attribute describing the current heap memory usage.</li>
<li><code>NonHeapMemoryUsage</code>. A read-only attribute describing non-heap memory usage.</li>
<li><code>ObjectPendingFinalizationCount</code>. A read-only attribute describing the number of objects pending for finalization.</li>
<li><code>Verbose</code>. A boolean attribute describing the GC verbose tracing setting. This can be set dynamically.</li>
</ul>
<p>
The Memory MBean supports one operation, <code>gc</code>, for explicit garbage collection requests. Details of the MBean interface are defined in the <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/management/MemoryMXBean.html">java.lang.management.MemoryMXBean</a> specification. You can use the MBeans tab to access all these attributes and operations.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/MBeansTab.jpg" width="675" height="530" border="0" alt="Figure 3: MBeans Tab" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 3</b>: MBeans Tab.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
The tree on the left shows the list of all MBeans, organized by their object names. An MBean object name consists of a domain name and a list of key properties. For example, the platform MBeans for the JVM are all grouped under the "<code>java.lang</code>" domain, where the logging MBean is under the "<code>java.util.logging</code>" domain. The format of an MBean object name is described in the <a href="http://java.sun.com/j2se/1.5.0/docs/api/javax/management/ObjectName.html">javax.management.ObjectName</a>
specification.
</p>
<p>
When you select an MBean in the tree, its attributes, operations, notifications, and other information are displayed on the right. You can set the value of attributes, if they are writeable (the value is displayed in blue). You can invoke operations displayed in the <a href="jconsole/MBeansTab-Operations.JPG">Operations tab</a>. You can also watch for the notifications emitted by an MBean: by default, JConsole does not listen to any notification emitted by an MBean until you subscribe to it. You can click the "<code>Subscribe</code>" button to subscribe to notifications or the "<code>Unsubscribe</code>" button to unsubscribe.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/MBeansTab-Notif.jpg" width="675" height="530" border="0" alt="Figure 4: MBeans Notification" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 4</b>: MBeans Notification.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<div><b><a name="LowMemoryDetection"></a>Detecting Low Memory</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div> 
<p>
The Memory tab provides information about memory consumption, memory pools, and garbage collection statistics by accessing the memory system, memory pools, garbage collector MBeans.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/HeapMemory.jpg" width="675" height="530" border="0" alt="Figure 5: Memory Tab" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 5</b>: Memory Tab.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
The chart shows the memory usage over time, for heap and non-heap memory, and for specific memory pools. The memory pools available depend on the JVM being used. The following list shows the pools for the HotSpot virtual machine.
</p>
<ul>
<li><b>Eden Space (heap)</b> Pool from which memory is initially allocated for most objects.</li>
<li><b>Survivor Space (heap)</b> Pool containing objects that have survived GC of eden space.</li>
<li><b>Tenured Generation (heap)</b> pool containing objects that have existed for some time in the survivor space.</li>
<li><b>Permanent Generation (non-heap).</b> Holds all the reflective data of the virtual machine itself, such as class and method objects. With JVMs that use <a
href="http://java.sun.com/j2se/1.5.0/docs/guide/vm/class-data-sharing.html">class
data sharing</a>, this generation is divided into read-only and read-write areas.</li>
<li><b>Code Cache (non-heap)</b> The HotSpot JVM also includes a &quot;code cache&quot; that contains memory used for compilation and storage of native code.</li>
</ul>
<p>
The <i>Details</i> area shows several current memory metrics:
</p>
<ul>
<li><b>Used</b> The amount of memory currently used. Memory used includes the memory occupied by all objects including both reachable and unreachable objects.</li>
<li><b>Committed</b> The amount of memory guaranteed to be available for use by the JVM. The amount of committed memory may change over time. The Java virtual machine may release memory to the system and <i>committed</i> could be less than the amount of memory initially allocated at startup. <i>Committed</i> will always be greater than or equal to <i>used</i>.</li>
<li><b>Max</b> The maximum amount of memory that can be used for memory management. Its value may change or be undefined. A memory allocation may fail if the JVM attempts to increase the used memory to be greater than committed memory, even if the amount used is less than or equal to <i>max</i> (for example, when the system is low on virtual memory).</li>
<li><b>Usage Threshold</b> The usage threshold of a memory pool. This field will only be shown if the memory pool supports usage threshold.</li>
<li><b>GC time</b> The cumulative time spent on garbage collection and the total number of invocations. It may have multiple rows, each of which represents one garbage collector algorithm used in the JVM.</li>
</ul>
<p>
The bar chart on the lower right shows memory consumed by the memory pools in the JVM. The bar turns red when the memory used exceeds the <i>usage threshold</i>. The usage threshold is one of the attributes defined in the Memory Pool MBean for low memory detection support. A set of methods defined in the MemoryPoolMXBean interface for low memory detection support follows.
</p>
<table  class="grey4" cellpadding="2" cellspacing="2" border="0"
style="text-align: left; width: 100%;">
<tbody>
<tr>
<td
style="vertical-align: top;">
<pre>	public interface MemoryPoolMXBean {<br>            ....<br><br>	    // Usage threshold <br>	    public long    getUsageThreshold();<br>	    public void    setUsageThreshold(long threshold);<br>	    public boolean isUsageThresholdExceeded();<br>	    public boolean isUsageThresholdSupported();<br><br>            // Collection usage threshold<br>	    public long    getCollectionUsageThreshold();<br>	    public void    setCollectionUsageThreshold(long threshold);<br>	    public boolean isCollectionUsageThresholdSupported();<br>	   &nbsp;public boolean isCollectionUsageThresholdExceeded();<br>	}<br></pre>
</td>
</tr>
</tbody>
</table>
<span class="sp20">&nbsp;</span><br />
<p>
Each memory pool may have two kinds of memory thresholds for low memory detection support: a <a href="#UsageThreshold">usage threshold</a> and a <a href="#CollectionThreshold">collection usage threshold</a>. Either one of these thresholds might not be supported by a particular memory pool.
</p>
<p>
<b><a name="UsageThreshold" id="UsageThreshold">Usage Threshold</a></b>
</p>
<p>
The <i>usage threshold</i> is a manageable attribute of a memory pools. It enables the monitoring of memory use with low overhead. Setting the threshold to a positive value enables usage threshold checking for a memory pool. Setting the usage threshold to zero disables usage threshold checking. The default value is supplied by the JVM. A JVM performs usage threshold checking on a memory pool at the most appropriate time, typically during GC and sometimes at allocation time. If the JVM detects that the current memory usage exceeds the usage threshold, it will set the <code>UsageThresholdExceeded</code> attribute to true.
</p>
<p>
Some memory pools may not support the usage threshold. You can use the <code>UsageThresholdSupported </code>attribute to determine whether a memory pool supports a usage threshold. For example, in a generational garbage collector (such as the HotSpot virtual machine), most of the objects are allocated in the young generation, from the &quot;eden&quot; memory pool. The eden pool is designed to be filled up; performing garbage collection on the eden memory pool will free most of its memory space since it is expected to contain mostly short-lived objects unreachable at garbage collection time. So, having the eden memory pool to support the usage threshold is not only <i>not</i> useful but also might not be implemented efficiently.
</p>
<p>
<b><a name="CollectionThreshold" id="CollectionThreshold">Collection
Usage Threshold</a></b>
</p>
<p>
<i>Collection usage threshold</i> is a manageable attribute of some garbage-collected memory pools. After a JVM has performed garbage collection on a memory pool, some memory in the pool will still be occupied by reachable objects. The collection usage threshold allows you to set a value to check against the memory usage only after garbage collection. If the JVM detects that the memory usage exceeds the collection usage threshold, it will set the <code>CollectionUsageThresholdExceeded</code> attribute to true.
</p>
<p>
You can use the <code>CollectionUsageThresholdSupported</code> attribute to determine if the pool supports a collection usage threshold.
</p>
<p>
The usage threshold and collection usage threshold is set in the MBeans tab. For example, select the <code>TenuredGen</code> memory pool in the left tree, set the usage threshold of the tenured generation memory pool to 6 Mbytes.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/SetUsageThreshold.jpg" width="675" height="530" border="0" alt="Figure 6: Setting Usage Threshold" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 6</b>: Setting Usage Threshold.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
When the memory usage of the <code>TenuredGen</code> memory pool exceeds 6 MBytes, part of the bar representing the <code>TenuredGen</code> memory pool will turn red to indicate the portion of used memory that exceeds the usage threshold. The bar representing the heap memory will also turn red. You can either click on the bar or select a specific memory pool in the Chart menu to switch to the information about a specific memory pool. If you hover the cursor over a bar, the name of the memory pool it represents will be displayed.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/LowMemory.jpg" width="675" height="530" border="0" alt="Figure 7: Low Memory" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 7</b>: Low Memory.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<div><b><a name="VerboseTracing"></a>Enabling or Disabling VM Verbose Tracing</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
As described earlier, the memory system MBean defines a boolean attribute called Verbose that allows you to turn the GC verbose tracing on or off dynamically. The GC verbose traces will be displayed at the location specified at JVM startup.  The default location for GC verbose output of the Hotspot virtual machine is <code>stdout</code>.
</p>
<p>
To enable or disable the GC verbose tracing, select the Memory MBean and set the Verbose attribute to true or false. Similarly, the class loading MBean also has the Verbose attribute, which can be set to enable or disable class loading verbose tracing.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/SettingGCVerbose.jpg" width="675" height="530" border="0" alt="Figure 8: Setting Verbose GC" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 8</b>: Setting Verbose GC.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<div><b><a name="DeadlockDetection"></a>Detecting Deadlocks</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The Threads tab provides information about threads running in an application.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/ThreadsTab.jpg" width="675" height="530" border="0" alt="Figure 9: Threads Tab" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 9</b>: Threads Tab.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
The Threads list in the lower left lists all the active threads. If you enter a string in the Filter field, the Threads list will show only those threads whose name contains the string you enter. You can get the thread dump of a thread by clicking on the name of a thread in the Threads list.
</p>
<p>
The Threading MBean provides several other useful operations that are not covered by the Threads tab:
</p>
<ul>
<li><code>findMonitorDeadlockedThreads</code>. Detects if any threads are deadlocked on the object monitor locks. This operation returns an array of deadlocked thread IDs.</li>
<li><code>getThreadInfo</code>. Returns the thread information. This includes the name, stack trace, and the monitor lock that the thread is currently blocked on, if any, and which thread is holding that lock, and thread contention statistics.</li>
<li><code>getThreadCpuTime</code>. Returns the CPU time consumed by a given thread</li>
</ul>
<p>
To access these additional features, go to the MBeans tab and select the Threading MBean in the MBeans tree. It lists all the attributes and operations for accessing information in the JVM being monitored.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/MBeansTab-Threading.jpg" width="675" height="530" border="0" alt="Figure 10: MBeans Tab Threading" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 10</b>: MBeans Tab Threading.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
To check if your application has run into a deadlock (for example, your application seems to be hanging), you can
invoke the <code>findMonitorDeadlockedThreads</code> operation.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/FindDeadlock-IDs.jpg" width="675" height="530" border="0" alt="Figure 11: Find Deadlocked Threads" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 11</b>: Find Deadlocked Threads.</span></div></td>
</tr></table>
<span class="sp20">&nbsp;</span><br />
<p>
Once you click on the <code>findMonitorDeadlockedThreads</code> button, the Operation Return Value window pops up to show the result. In the example above, JConsole connects to the sample application <a href="jconsole/SampleTest.zip">SampleTest</a>, which has three threads in deadlock. It detects that threads of ID 12, 10, and 11 are deadlocked, as shown in the preceding figure. To find out more information about the deadlocked threads, you can use the <code>getThreadInfo</code> operation. The Threading MBean supports the <code>getThreadInfo</code> operation in four different forms, which obtain thread information:
</p>
<ul>
<li>Of a given thread ID with stack trace of the specified maximum number of frames.</li>
<li>Of an array of thread IDs with stack trace of the specified maximum number of frames.</li>
<li>Of a given thread ID with no stack trace.</li>
<li>Of an array of thread IDs with no stack trace.</li>
</ul>
<p>
For a deadlock situation, you would typically be interested in the stack trace. You can enter the thread ID of a deadlocked thread in the first parameter of the getThreadInfo operation (say, <code>ID = 12</code>) and the number of frames you want to get as the second parameter (<code>depth = 5</code>).
</p>
<table border="0" cellpadding="2" cellspacing="0" width="694"><tr>
<td align="center" class="grey3"><img src="jconsole/ThreadInfo-1.jpg" width="684" height="592" border="0" alt="Figure 12: ThreadInfo for thread ID = 12" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 12</b>: ThreadInfo for Thread ID = 12.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<p>
Double-clicking on the value field of the stackTrace attribute will show a Composite Navigation view that allows you to traverse the stack trace. Figures 13 and 14 show the Composite Navigation view that displays the top and second top frame of the stack trace of <code>DeadlockedThread-1</code>.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="378"><tr>
<td align="center" class="grey3"><img src="jconsole/ThreadInfo-2.jpg" width="368" height="245" border="0" alt="Figure 13: Top Frame of the Stack Trace of DeadlockedThread-1" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 13</b>: Top Frame of the Stack Trace of DeadlockedThread-1.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<table border="0" cellpadding="2" cellspacing="0" width="378"><tr>
<td align="center" class="grey3"><img src="jconsole/ThreadInfo-3.jpg" width="368" height="245" border="0" alt="Figure 14: Second Frame of the Stack Trace of DeadlockedThread-1" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 14</b>: Second Frame of the Stack Trace of DeadlockedThread-1.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<p>
The Threads tab provides a more user-friendly way to look at the stack trace of a thread. You can find the name of the deadlocked threads using the <code>getThreadInfo</code> operation. Then you can use the Threads tab to analyze the deadlock:
</p>
<ul>
<li><a href="jconsole/DeadlockedThread1.JPG">DeadlockedThread-1</a> is blocked to enter a monitor lock owned by DeadlockedThread-2</li>
<li><a href="jconsole/DeadlockedThread2.JPG">DeadlockedThread-2</a> is blocked to enter another monitor lock owned by DeadlockedThread-3</li>
<li><a href="jconsole/DeadlockedThread3.JPG">DeadlockedThread-3</a> is blocked to enter another monitor lock owned by DeadlockedThread-1</li>
</ul>
<div><b><a name="LoggingControl"></a>Controlling Log Level</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The Logging MBean defines a <code>LoggerNames</code> attribute describing the list of logger names. To find the list of loggers in your application, select the Logging MBean under the <code>java.util.logging</code> domain in the MBeans tree and then double-click on the value field of the <code>LoggerNames</code> attribute.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/LoggerNames.jpg" width="675" height="530" border="0" alt="Figure 15: List of All Logger Names" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 15</b>: List of All Logger Names.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<p>
The Logging MBean also supports three operations:
</p>
<ul>
<li><code>getParentLoggerName</code>. Returns the name of the parent logger of a given logger.</li>
<li><code>getLoggerLevel</code>. Returns the log level of a given logger.</li>
<li><code>setLoggerLevel</code>. Sets the log level of a given logger to a new level.</li>
</ul>
<p>
All three operations take a logger name as the first parameter. To change the level of a logger, enter the logger name in the first parameter and the name of the level it should be set to in the second parameter of the <code>setLoggerLevel</code> operation, and then enter the <code>setLoggerLevel</code> button. The <a href="/developer/technicalArticles/J2SE/jconsole/SampleTest.java">SampleTest</a> application has its own logger <code>com.sun.example.hello</code>, which
is included in the preceding list of logger names. You can invoke the <code>setLoggerLevel</code> operation to set the <code>com.sun.example.hello</code> logger to <code>FINEST</code> level. A pop-up window appears, showing whether the method is successfully invoked or there is an error.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/LogLevel.jpg" width="675" height="530" border="0" alt="Figure 16: Setting Log Level" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 16</b>: Setting Log Level.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<div><b><a name="OSResources"></a>Accessing OS Resources&mdash;Sun's Platform Extension</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The JDK 5.0 extends the Operating System MBean to include certain OS resource information such as:
</p>
<ul>
<li>the process CPU time</li>
<li>the amount of total and free physical memory</li>
<li>the amount of committed virtual memory (that is, the amount of virtual memory guaranteed to be available to the running process)</li>
<li>the amount of total and free swap space</li>
<li>the number of open file descriptions (UNIX only)</li>
</ul>
<p>
When the Operating System MBean in the MBeans tab is selected, you see all the attributes and operations including the platform extension. You can monitor the changes of a numerical attribute over time&mdash;for example, the process CPU time&mdash;by double-clicking the value field of the attribute.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/MBeansTab-OS.jpg" width="675" height="530" border="0" alt="Figure 17: MBeans Tab OS" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 17</b>: MBeans Tab OS.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<p>
In addition, the <a href="jconsole/VMTab.JPG">VM tab</a> and the <a href="jconsole/SummaryTab.JPG">Summary tab</a> provide  information on the operating system resources.
</p>
<div><b><a name="ManageMBeans"></a>Managing Application MBeans</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The <a href="jconsole/SampleTest.zip">SampleTest</a> application being monitored has its own <i>Hello</i> MBean with the object name:<br />
<pre>&nbsp;&nbsp;&nbsp;com.sun.example:type=Hello</pre>
If the CacheSize attribute is changed, the Hello MBean will send a notification. You can use the MBeans tab to manage your application's MBeans, as well as the platform MBeans. For example, you might want to monitor when the CacheSize attribute is changed. You first subscribe to the notifications in the Notification tab. If you change the CacheSize to <code>300</code>, you will see one notification sent out.
</p>
<table border="0" cellpadding="2" cellspacing="0" width="685"><tr>
<td align="center" class="grey3"><img src="jconsole/Hello-Notif.jpg" width="675" height="530" border="0" alt="Figure 18: Notifications" />
<div class="pad3"> <span class="dkcaption1"> <b>Figure 18</b>: Notifications.</span></div></td>
</tr></table><span class="sp20">&nbsp;</span><br />
<div><b>Summary</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
The JConsole tool demonstrates the comprehensiveness and ease-of use of the JDK 5.0's monitoring and management features. You can use JConsole to connect to a running Java virtual machine, and then monitor the memory usage and thread activity. You can obtain class-loading information, plus information on the JVM and the operating system. JConsole also gives you a generic way to access MBeans, such that you can access the full set of instrumentation of the Java platform and also manage your application.
</p>
<p>
We described how to access several core monitoring and management functionalities provided by the Java platform through JConsole, including low memory detection, virtual machine verbose tracing, deadlock detection, and logger level control.
</p>
<div><b>Related Information</b></div>
<ul>
<li><a href="http://java.sun.com/j2se/1.5.0/docs/guide/management/">Monitoring and Management for the Java Platform</a></li>
<li><a href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/index.html#manage">Monitoring and Management Tools</a></li>
</ul>
<div><b>About the Author</b></div>
<p>
<i><a name="chung">Mandy Chung</a> is a Senior Staff Engineer in the Java Serviceability Group at Sun Microsystems. She designed and implemented the JVM monitoring and management interface in JDK 5.0 and led the JConsole development. She holds a masters degree in Computer Science from the University of California, Davis, and a B.S. in Computer Studies from the University of Hong Kong.</i>
</p>
<!-- BEGIN RATE AND REVIEW G16 var1 -->
<script type="text/javascript">
<!-- Hide script from older browsers
// Popup window function
function onRateSubmitHandler()
{
var w = window.open("","rr","width=800,height=600,status=no,toolbar=no,scrollbars=yes"); 
w.setTimeout("window.close();", 30000 );
return true;
}
// End of javascript 
-->
</script>
<form name="form" method="post" action="https://www2.sun.de/dc/servlets/incoming" onSubmit="return onRateSubmitHandler()" target="rr">
<input type="hidden" name="errcount" value="1" />
<input type="hidden" name="ref" value="http://www2.sun.de/dc/forms/reg_xh_2610_243.jsp">
<input type="hidden" name=""  value="">
<table width="100%" cellspacing="0" cellpadding="1" border="0" class="dkgrey" style="margin-top:7px"><tr><td>
<table width="100%" cellspacing="0" cellpadding="4" border="0" class="white">
<tr><td class="dkgrey1"><b>Rate and Review</b></td></tr>
<tr><td>Tell us what you think of the content of this page.</td></tr>
<tr><td><b>
<input type="radio" name="custom_3" value="Excellent"> Excellent&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Good"> Good&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Fair"> Fair&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Poor"> Poor&nbsp;&nbsp;
</b></td></tr>
<tr><td>
<b>Comments:</b><br><textarea name="custom_2" cols="60" rows="3" wrap="virtual"></textarea></td></tr>
<tr><td>
<b>Your email address (no reply is possible without an address):</b><br>
<a href="http://sun.com/privacy/" target="_new">Sun Privacy Policy</a><br>
<input type="text" name="custom_1" value="" size="35" maxlength="60"> <br>
Note: We are not able to respond to all submitted comments.</td></tr>
<tr><td>
<input type="submit" border="0" class="buttonblue" value="&nbsp;Submit &raquo;&nbsp;" onmouseover="this.style.color='#fbe249';" onmouseout="this.style.color='#FFF';">
<input type="hidden" name="custom_0" value="Mandy Chung">
<input type="hidden" name="custom_4" value="Using JConsole to Monitor Applications">
<input type="hidden" name="custom_5" value="http://java.sun.com/developer/technicalArticles/J2SE/jconsole.html">
<input type="hidden" name="cf_Form_Name" value="Rate and Review - article feedback" />
<input type="hidden" name="cf_Form_Location" value="Registrations" />
<input type="hidden" name="cf_iso2" value="XH" />
<input type="hidden" name="charset" value="ISO-8859-1">
</td></tr></table></td></tr>
</table></form>
<!-- END RATE AND REVIEW G16 var1-->
<!-- =================== -->
<!-- END OF MAIN CONTENT -->
<!-- =================== -->
<!--stopindex-->
<!-- END CENTRAL COLUMN COMPONENTS -->
</td><td valign="top">
<!-- BEGIN RIGHT COLUMN COMPONENTS -->
<!-- END RIGHT COLUMN COMPONENTS -->
</td></tr>
<!-- BEGIN SPACER ROW -->
<tr><td><img src="/im/a.gif" width="560" height="1" border="0" alt=" " /></td><td><img src="/im/a.gif" width="170" height="1" border="0" alt=" " /></td></tr>
<!-- END SPACER ROW -->
</table>
<!-- END WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<!-- BEGIN PC1 COMPONENT V.2 -->
<div class="pc1 pc1v2" style="margin:0 10px">
<div class="pc1w1"><div class="pc1w2"><div class="pc1w3 cornerBL"><div class="pc1w4">
<p>Oracle is reviewing the Sun product roadmap and will provide guidance to customers in accordance with Oracle's standard product communication policies. Any resulting features and timing of release of such features as determined by Oracle's review of roadmaps, are at the sole discretion of Oracle. All product roadmap information, whether communicated by Sun Microsystems or by Oracle, does not represent a commitment to deliver any material, code, or functionality, and should not be relied upon in making purchasing decisions. It is intended for information purposes only, and may not be incorporated into any contract.</p>
</div></div></div></div>
</div>
<!-- END PC1 COMPONENT V.2 -->
<!-- BEGIN G9 VARIATION 0 -->
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_engine.js"></script>
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_conf_en-US.js"></script>
<!-- END G9 VARIATION 0 -->
<!-- BEGIN VNV5 FOOTER  -->
<table border="0" cellpadding="0" cellspacing="10" width="100%">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="vatop">
<tr>
<td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
<tr>
<td><img src="http://developers.sun.com/im/a.gif" width="190" height="1" border="0" alt="" /><br />
<a href="http://www.oracle.com/index.html"><img src="/im/logo_oracle_footer.gif" width="93" height="29" border="0" alt="" vspace="5"/></a></td>
<td width="100%" valign="top"><img src="/im/a.gif" width="350" height="1" border="0" alt="" /><br />
<div class="footer">
<a href="http://developers.sun.com/global/aboutsun.html">About Sun</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/aboutsdn.html">About This Site</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/newsletters.html">Newsletters</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/contact.html">Contact Us</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/employment.html">Employment</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/howtobuy.html">How to Buy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/licensing.html">Licensing</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/termsofuse.html">Terms of Use</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/privacy.html">Privacy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/trademarks.html">Trademarks</a>
<br /><span class="sp10">&nbsp;</span><br />
<br /><span class="sp10">&nbsp;</span><br />
<!-- <span id="copyDate" class="cssDate"></span>--> &copy; 2010, Oracle Corporation and/or its affiliates
</div></td>
<td><img src="/im/a.gif" width="40" height="1" border="0" alt="" /></td>
<td valign="top"><div class="footer"><b><a href="http://developers.sun.com/global/aboutsdn.html">A Sun Developer Network Site</a></b></div>
<div class="footer">
<img src="/im/a.gif" width="170" height="1" border="0" alt="" /><br />
Unless otherwise licensed, code in all technical manuals herein (including articles, FAQs, samples) is provided under this <a href="http://developers.sun.com/global/berkeley_license.html">License</a>.
<br /><span class="sp5">&nbsp;</span><br />
<a href="http://developers.sun.com/global/rss_sdn.html"><img src="/im/ic_feed_16x.gif" width="16" height="16" align="top" border="0" alt="XML" /></a>&nbsp;<a href="http://developers.sun.com/global/content_feeds.html">Sun Developer RSS Feeds</a>
</div></td></tr>
<tr><td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
</table>
</td></tr>
</table>
<!-- END VNV5 FOOTER -->
<script language="JavaScript" src="/js/omi/jsc/s_code_remote.js"></script></body>
</html>











<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang='en'>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<script type='text/JavaScript' src='/js/cookie_get.js'></script>
<title>Mixing C and C++ Code in the Same Program</title>
<meta http-equiv="content-language" content="en">
<meta name="collection" content="reference">
<meta name="keywords" content="C++, C, Compatible Compilers, ABI, Solaris OS, structs, Classes, Source, Propagating Exceptions">
<meta name="description" content="The C++ language provides mechanisms for mixing code that is compiled by compatible C and C++ compilers in the same program.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="archive" content="FALSE">
<meta name="date" content="2004-11-01">
<link rel="stylesheet" href="/css/default_developer.css" />
<script language="JavaScript" type="text/javascript" src="/js/popUp.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/sniff.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucontent.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucode.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/developer.js"></script>
</head>
<!--stopindex-->
<body leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" rightmargin="0" bgcolor="#ffffff" onload="prepmenus(); done=true">
<a name="top"></a>
<!-- THIS FILE IS GENERATED BY A DCR FILE -->
<!-- BEGIN GENERIC MASTHEAD -->
<!-- BEGIN A1 COMPONENT V.0 -->
<div class="a1 a1r2">
<div class="a1v0">
<a href="#skip2content" class="skiplink">Skip to Content</a>
<span class="toolbarlinks">
<a href="/global/mh/suncom/index.html">Sun</a>
<a href="/global/mh/java/">Java</a>
<a href="/global/mh/solaris/">Solaris</a>
<a href="/global/mh/communities/" class="dividelink">Communities</a>
<a href="http://developers.sun.com/global/my_profile.html">My SDN Account</a>

</span>
</div>
</div>
<!-- END A1 COMPONENT V.0 -->
<!-- BEGIN A2 COMPONENT V.1 -->
<div class="a2w0">
<div class="a2" id="a2v1">
<div class="a2w1"><div class="a2w2"><div class="a2w3"><div class="a2w4">
<div class="a2topiclinks">
<div class="a2search">
<form action="http://search.sun.com/main/index.jsp" accept-charset="utf-8" method="GET">
<input type="hidden" name="charset" value="utf-8">
<input type="hidden" name="col" value="main-developer-all">
<span class="rightarrowwhite">&raquo;</span>&nbsp;<a href="http://developers.sun.com/global/search_tips.html">search tips</a>&nbsp;
<input class="searchfield" name="qt" class="medium" size="7" onFocus="if( this.value==this.defaultValue ) this.value='';" value="Search">
<input id="searchbttn" type="image" border="0" src="/im/a2_bttn_search.gif" alt="Submit Search">
</form>
</div>
<a href="http://www.sun.com" title="Sun Microsystems Home Page" id="sunlogo"><img src="/im/a.gif" alt="Home Page" width="98" height="58" border="0" /></a>
<a href="http://developers.sun.com" title="Sun Developer Network"><img src="/im/a.gif" id="venuespacer" alt="Sun Developer Network" width="400" height="33" border="0" /></a>
<ul id="mtopics">
<li id="mtopic1"><a id="glink1" class="tpclink a2menu" title="See All APIs" href="/global/mh/api/index.html">APIs</a></li>
<li id="mtopic2"><a id="glink2" class="tpclink a2menu" title="See All Downloads" href="/global/mh/downloads/index.html">Downloads</a></li>
<li id="mtopic3"><a id="glink3" class="tpclink a2menu" title="See All Products" href="/global/mh/products/index.html">Products</a></li>
<li id="mtopic4"><a id="glink4" class="tpclink a2menu" title="See All Support" href="/global/mh/support/index.html">Support</a></li>
<li id="mtopic5"><a id="glink5" class="tpclink a2menu" title="See All Training" href="/global/mh/training/index.html">Training</a></li>
<li id="mtopic6"><a id="glink6" class="tpclink a2menu" title="See All Participate" href="/global/mh/participate/index.html">Participate</a></li>
</ul>
</div>
</div></div></div></div>
</div></div>
<!-- END A2 COMPONENT V.1 -->
<!-- END GENERIC MASTHEAD -->
<!-- BEGIN BREADCRUMB -->
<div id="breadcrumb">
<a href="http://developers.sun.com/index.jsp">SDN Home</a> > <a href="http://developers.sun.com/solaris/">Solaris</a> > <a href="http://developers.sun.com/solaris/reference/">Reference</a> > <a href="http://developers.sun.com/solaris/reference/techart/">Technical Articles and Tips</a> > 
</div><br />
<!-- END BREADCRUMB -->
<!-- BEGIN PAGETITLE -->
<div class="pagetitle2">Article</div>
<div class="smallpagetitle"><h1>Mixing C and C++ Code in the Same Program</h1></div>
<!-- END PAGETITLE -->
<!-- BEGIN WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<table border="0" cellpadding="10" cellspacing="0" width="100%">
<tr><td width="100%" valign="top">
<!-- BEGIN CENTRAL COLUMN COMPONENTS -->
<!--startindex-->
<!-- ============ -->
<!-- MAIN CONTENT -->
<!-- ============ -->
<a name="skip2content"></a>
<!--  BEGIN VCD4 PFV  -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="smaller" valign="top"><em></em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom"><div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a><br></td>
</tr></table></div>
</td></tr>
</table>
<!--  END VCD4 PFV -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td class="smaller" valign="top"><em>
By <a href="#author">Stephen Clamage</a>, Sun Microsystems, Sun ONE Studio Solaris Tools Development Engineering
</em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom">
<div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<!--
<td valign="bottom" align="right"><img src="/im/ic_email.gif" width="14" height="12" border="0" hspace="4" vspace="1" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">E-mail</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right"><img src="/im/ic_download_thin.gif" width="9" height="14" hspace="4" border="0" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">Download</a></td>
-->
</tr>
</table>
</div>
</td></tr>
</table>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<!--  END VCD4 BYLINE AND TOOLS  -->
<a name="skip2content"></a>
<!-- BEGIN VCD1 OVERVIEW COMPONENT  -->
<div class="padbottom10">
<table border="0" cellpadding="4" cellspacing="0" width="100%" class="grey3">
<tr><td>The C++ language provides mechanisms for mixing code that is compiled
by compatible C and C++ compilers in the same program. You can experience
varying degrees of success as you port such code to different platforms
and compilers. This article shows how to solve common problems that arise
when you mix C and C++ code, and highlights the areas where you might run
into portability issues. In all cases we show what is needed when using
Sun C and C++ compilers.</td></tr></table></div>
<!-- END VCD1 OVERVIEW COMPONENT  -->
<!-- BEGIN VCD5 ANCHOR LINKS COMPONENT  -->
<div><b>Contents</b></div>
<span class="sp2">&nbsp;</span><br />
<table border="0" cellpadding="0" cellspacing="0" class="vatop">
<tr><td class="hyphen">-&nbsp;</td><td><a href="#using">Using Compatible Compilers</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#c_from_cpp">Accessing C Code From Within C++ Source</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#cpp_from_c">Accessing C++ Code From Within C Source</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#iostream">Mixing IOstream and C Standard I/O</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#pfn">Working with Pointers to Functions</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#except">Working with C++ Exceptions</a></td></tr>
<tr><td class="hyphen">-&nbsp;</td><td><a href="#linking">Linking the Program</a></td></tr>
</table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD5 ANCHOR LINKS COMPONENT  -->
<span class="sp20">&nbsp;</span><br />
<a name="using"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Using Compatible Compilers</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>
The first requirement for mixing code is that the C and C++ compilers you
are using must be compatible. They must, for example, define basic types
such as int, float or pointer in the same way. The Solaris Operating
System (Solaris OS) specifies the Application Binary Interface (ABI) of
C programs, which includes information about basic types and how functions
are called. Any useful compiler for the Solaris OS must follow this ABI.
<p>Sun C and C++ compilers follow the Solaris OS ABI and are compatible.
Third-party C compilers for the Solaris OS usually also follow the ABI.
Any C compiler that is compatible with the Sun C compiler is also compatible
with the Sun C++ compiler.
</p><p>The C runtime library used by your C compiler must also be compatible
with the C++ compiler. C++ includes the standard C runtime library as a
subset, with a few differences. If the C++ compiler provides its own versions
of of the C headers, the versions of those headers used by the C compiler
must be compatible.
</p><p>Sun C and C++ compilers use compatible headers, and use the same C runtime
library. They are fully compatible.</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="c_from_cpp"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Accessing C Code From Within C++ Source</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>The C++ language provides a "linkage specification" with which you declare
that a function or object follows the program linkage conventions for a
supported language. The default linkage for objects and functions is C++.
All C++ compilers also support C linkage, for some compatible C compiler.
<p>When you need to access a function compiled with C linkage (for example,
a function compiled by the C compiler), declare the function to have C
linkage. Even though most C++ compilers do not have different linkage for
C and C++ data objects, you should declare C data objects to have C linkage
in C++ code. With the exception of the pointer-to-function type, types
do not have C or C++ linkage.
</p>
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Declaring Linkage Specifications</b><br />
Use one of the following notations to declare that an object or function
has the linkage of language <i>language_name</i>:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "<i>language_name</i>" <i>declaration </i>;
extern "<i>language_name</i>" { <i>declaration</i> ; <i>declaration </i>; ... }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
The first notation indicates that the declaration (or definition) that
immediately follows has the linkage of <i>language_name</i>. The second
notation indicates that everything between the curly braces has the linkage
of <i>language_name</i>, unless declared otherwise. Notice that you do
not use a semicolon after the closing curly brace in the second notation.</p>
<p>You can nest linkage specifications, but they do not create a scope.
Consider the following example:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
    void f();             // C linkage
    extern "C++" {
        void g();         // C++ linkage
        extern "C" void h(); // C linkage
        void g2();        // C++ linkage
    }
    extern "C++" void k();// C++ linkage
    void m();             // C linkage
}
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
All the functions above are in the same global scope, despite the nested
linkage specifiers.
</p>
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Including C Headers in C++ Code</b><br />
If you want to use a C library with its own defining header that was intended
for C compilers, you can include the header in <tt>extern "C"</tt> brackets:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
    #include "header.h"
}
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<!-- BEGIN VCD14 SMALL FEATURE COMPONENT -->
<table border="0" cellpadding="0" cellspacing="0" class="yellow2">
<tr>
<td>
<div class="pad6">
<b>Warning-</b><br />
<span class="sp5">&nbsp;</span><br />
Do not use this technique for system headers on the Solaris OS.
The Solaris headers, and all the headers that come with Sun C and C++ compilers,
are already configured for use with C and C++ compilers. You can invalidate
declarations in the Solaris headers if you specify a linkage.<br />
</div>
</td></tr>
</table>
<span class="sp10">&nbsp;</span><br />
<!-- END VCD14 SMALL FEATURE COMPONENT -->
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Creating Mixed-Language Headers</b><br />
If you want to make a header suitable for both C and C++ compilers, you
could put all the declarations inside <tt>extern "C"</tt> brackets, but
the C compiler does not recognize the syntax. Every C++ compiler predefines
the macro
<tt>__cplusplus</tt>, so you can use that macro to guard the
C++ syntax extensions:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
#ifdef __cplusplus
extern "C" {
#endif
<b>...</b> /* body of header */
#ifdef __cplusplus
} /* closing brace for extern "C" */
#endif
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Adding C++ features to C structs</b><br />
Suppose you want to make it easier to use a C library in
your C++ code. And suppose that instead of using C-style
access you might want to add member functions, maybe
virtual functions, possibly derive from the class,
and so on. How can you
accomplish this transformation and ensure the C library functions can still
recognize the struct? Consider the uses of the C <tt>struct buf</tt> in
the following example:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
struct buf {
    char* data;
    unsigned count;
};
void buf_clear(struct buf*);
int  buf_print(struct buf*); /* return status, 0 means fail */
int  buf_append(struct buf*, const char*, unsigned count); /* same return */
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>You want to turn this struct into a C++ class and make it easier to use
with the following changes:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
  #include "buf.h"
}
class mybuf { // first attempt -- will it work?
public:
    mybuf() : data(0), count(0) { }
    void clear() { buf_clear((buf*)this); }
    bool print() { return buf_print((buf*)this); }
    bool append(const char* p, unsigned c)
        { return buf_append((buf*)this, p, c); }
private:
    char* data;
    unsigned count;
};
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>The interface to the <tt>class mybuf</tt> looks more like C++ code, and 
can be more easily
integrated into an Object-Oriented style of programming -- if it works.</p>
<p>What happens when the member functions pass the <tt>this</tt> pointer
to the <tt>buf</tt> functions? Does the C++ class layout match the C layout?
Does the <tt>this</tt> pointer point to the <tt>data</tt> member, as a
pointer to <tt>buf</tt> does? What if you add virtual functions to <tt>mybuf</tt>?
</p><p>The C++ standard makes no promises about the compatibility of <tt>buf</tt>
and <tt>class mybuf</tt>. This code, without virtual functions, might work,
but you can't count on it. If you add virtual functions, the code will
fail using compilers that add extra data (such as pointers to virtual tables)
at the beginning of a class.
</p><p>The portable solution is to leave <tt>struct buf</tt> strictly alone,
even though you would like to protect the data members and provide access
only through member functions. You can guarantee C and C++ compatibility
only if you leave the declaration unchanged.
</p><p>You can derive a C++ <tt>class mybuf</tt> from the C <tt>struct buf</tt>,
and pass pointers to the <tt>buf</tt> base class to the <tt>mybuf</tt>
functions. If a pointer to <tt>mybuf</tt> doesn't point to the beginning
of the <tt>buf</tt> data, the C++ compiler will adjust it automatically when
converting a <tt>mybuf*</tt> to a <tt>buf*</tt>. The layout of <tt>mybuf</tt>
might vary among C++ compilers, but the C++ source code that manipulates
<tt>mybuf</tt> and <tt>buf</tt> objects will work everywhere. The following
example shows a portable way to add C++ and Object-Oriented features to
a C struct.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
  #include "buf.h"
}
class mybuf : public buf { // a portable solution
public:
    mybuf() : data(0), count(0) { }
    void clear() { buf_clear(this); }
    bool print() { return buf_print(this); }
    bool append(const char* p, unsigned c)
        { return buf_append(this, p, c); }
};
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
C++ code can freely create and use <tt>mybuf</tt> objects, passing them to C code
that expects <tt>buf</tt> objects, and everything will work together. Of course,
if you add data to <tt>mybuf</tt>, the C code won't know anything about it. That's
a general design consideration for class hierarchies. You also have to
take care to create and delete <tt>buf</tt> and <tt>mybuf</tt> objects consistently. It is
safest to let C code delete (free) an object if it was created by C code,
and not allow C code to delete a <tt>mybuf</tt> object.</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="cpp_from_c"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Accessing C++ Code From Within C Source</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>If you declare a C++ function to have C linkage, it can be called from
a function compiled by the C compiler. A function declared to have C linkage
can use all the features of C++, but its parameters and return type must
be accessible from C if you want to call it from C code. For example, if
a function is declared to take a reference to an IOstream class as a parameter,
there is no (portable) way to explain the parameter type to a C compiler.
The C language does not have references or templates or classes with C++
features.</p>
<p>Here is an example of a C++ function with C linkage:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
#include &lt;iostream&gt;
extern "C" int print(int i, double d)
{
    std::cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; ", d = " &lt;&lt; d;
}
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>You can declare function <tt>print</tt> in a header file that is shared
by C and C++ code:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
#ifdef __cplusplus
extern "C"
#endif
int print(int i, double d);
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>You can declare at most one function of an overloaded set as <tt>extern
"C"</tt> because only one C function can have a given name. If you need
to access overloaded functions from C, you can write C++ wrapper functions
with different names as the following example demonstrates:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
int    g(int);
double g(double);
extern "C" int    g_int(int i)       { return g(i); }
extern "C" double g_double(double d) { return g(d); }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>Here is the example C header for the wrapper functions:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
int g_int(int);
double g_double(double);
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>You also need wrapper functions to call template functions because template
functions cannot be declared as <tt>extern "C"</tt>:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
template&lt;class T&gt; T foo(T t) { ... }
extern "C" int   foo_of_int(int t) { return foo(t); }
extern "C" char* foo_of_charp(char* p) { return foo(p); }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
C++ code can still call the the overloaded functions and the template functions.
C code must use the wrapper functions.
</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Accessing C++ Classes From C</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>Can you access a C++ class from C code? Can you declare a C struct that
looks like a C++ class and somehow call member functions? The answer is
yes, although to maintain portability you must add some complexity. Also,
any modifications to the definition of the C++ class you are accessing
requires that you review your C code.</p>
<p>Suppose you have a C++ class such as the following:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
class M {
public:
    virtual int foo(int);
    // <b>...
</b>private:
    int i, j;
};
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>You cannot declare class <tt>M</tt> in your C code. The best you can do
is to pass around pointers to class <tt>M</tt> objects, similar to the
way you deal with FILE objects in C Standard I/O. You can write <tt>extern
"C"</tt> functions in C++ that access class
<tt>M</tt> objects and call
them from C code. Here is a C++ function designed to call the member function
<tt>foo</tt>:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" int call_M_foo(M* m, int i) { return m-&gt;foo(i); }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>Here is an example of C code that uses class <tt>M</tt>:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
struct M; /* you can supply only an incomplete declaration */
int call_M_foo(struct M*, int); /* declare the wrapper function */
int f(struct M* p, int j) /* now you can call M::foo */
    { return call_M_foo(p, j); }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="iostream"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Mixing IOstream and C Standard I/O</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>You can use C Standard I/O, from the standard C header &lt;stdio.h&gt;, in
C++ programs because C Standard I/O is part of C++.</p>
<p>Any considerations about mixing IOstream and Standard I/O in the same
program therefore do not depend on whether the program contains C code
specifically. The issues are the same for purely C++ programs that use
both Standard I/O and IOstreams.
</p><p>Sun C and C++ use the same C runtime libraries, as noted in the section
about compatible compilers. Using Sun compilers, you can therefore use
Standard I/O functions freely in both C and C++ code in the same program.
</p><p>The C++ standard says you can mix Standard I/O functions and IOstream
functions on the same target "stream", such as the standard input and output
streams. But C++ implementations vary in their compliance. Some systems
require that you call the <tt>sync_with_stdio() </tt>function explicitly
before doing any I/O. Implementations also vary in the efficiency of I/O
when you mix I/O styles on the same stream or file. In the worst case,
you get a system call per character input or output. If the program does
a lot of I/O, the performance might be unacceptable.
</p><p>The safest course is to stick with Standard I/O or IOstream styles on
any given file or standard stream. Using Standard I/O on one file or stream
and IOstream on a different file or stream does not cause any problems.
</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="pfn"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Working with Pointers to Functions</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>A pointer to a function must specify whether it points to a C function
or to a C++ function, because it is possible that C and C++ functions use
different calling conventions. Otherwise, the compiler does not know which
kind of function-calling code to generate. Most systems do not have have
different calling conventions for C and C++, but C++ allows for the possibility.
You therefore must be careful about declaring pointers to functions, to
ensure that the types match. Consider the following example:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
typedef int (*pfun)(int);  // line 1
extern "C" void foo(pfun); // line 2
extern "C" int g(int)      // line 3
<b>...
</b>foo( g ); // Error!        // line 5
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
Line 1 declares <tt>pfun</tt> to point to a C++ function, because it lacks
a linkage specifier.
<br>Line 2 therefore declares <tt>foo</tt> to be a C function that takes
a pointer to a C++ function.
<br>Line 5 attempts to call <tt>foo</tt> with a pointer to <tt>g</tt>,
a C function, a type mis-match.</p>
<p>Be sure to match the linkage of a pointer-to-function with the functions
to which it will point. In the following corrected example, all declarations
are inside <tt>extern "C"</tt> brackets, ensuring that the types match.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
    typedef int (*pfun)(int);
    void foo(pfun);
    int g(int);
}
foo( g ); // now OK
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
Pointers to functions have one other subtlety that occasionally traps programmers.
A linkage specification applies to all the parameter types and to the return
type of a function. If you use the elaborated declaration of a pointer-to-function
in a function parameter, a linkage specification on the function applies
to the pointer-to-function as well. If you declare a pointer-to-function
using a <tt>typedef</tt>, the linkage specification of that <tt>typedef</tt> is not affected
by using it in a function declaration. For example, consider this code:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
typedef int (*pfn)(int);
extern "C" void foo(pfn p) { <b>...</b> }      // definition
extern "C" void foo( int (*)(int) ); // declaration
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
The first two lines might appear in a program file, and the third line
might appear in a header where you don't want to expose the name of the
private typedef. Although you intended for the declaration of <tt>foo</tt>
and its definition to match, they do not. The definition of <tt>foo</tt>
takes a pointer to a C++ function, but the declaration of <tt>foo</tt>
takes a pointer to a C function. The code declares a pair of overloaded
functions.</p>
<p>To avoid this problem, use typedefs consistently in declarations, or
enclose the typedefs in appropriate linkage specifications. For example,
assuming you wanted <tt>foo</tt> to take a pointer to a C function, you could write
the definition of <tt>foo</tt> this way:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" {
    typedef int (*pfn)(int);
    void foo(pfn p) { <b>...</b> }
}
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="except"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Working with C++ Exceptions</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Propagating Exceptions</b><br />
What happens if you call a C++ function from a C function, and the C++
function throws an exception? The C++ standard is somewhat vague about
whether you can expect exceptions to behave properly, and on some systems
you have to take special precautions. Generally, you must consult the user
manuals to determine whether the code will work properly.
<p>No special precautions are necessary with Sun C++. The exception mechanism
in Sun C++ does not affect the way functions are called. If a C function
is active when a C++ exception is thrown, the C function is passed over
in the process of handling the exception.
</p>
<span class="sp10">&nbsp;</span><br />
<p><b class="dkgrey">Mixing Exceptions with <tt>set_jmp</tt> and <tt>long_jmp</tt></b><br />
The best advice is not to use <tt>long_jmp</tt> in programs that contain C++ 
code. The C++ exception
mechanism and C++ rules about destroying objects that go out of scope are
likely to be violated by a <tt>long_jmp</tt>, with unpredictable results.
Some compilers integrate exceptions and <tt>long_jmp</tt>, allowing them
to work together, but you should not depend on such behavior. Sun C++ uses
the same <tt>set_jmp</tt> and <tt>long_jmp</tt> as the C compiler.
<p>Many C++ experts believe that <tt>long_jmp</tt> should not be integrated
with exceptions, due to the difficulty of specifying exactly how it should
behave.
</p><p>If you use <tt>long_jmp</tt> in C code that you are mixing with C++,
ensure that a <tt>long_jmp</tt> does not cross over an active C++ function.
If you cannot ensure that, see if you can compile that C++ code with exceptions
disabled. You still might have problems if the destructors of local objects
are bypassed.
</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<a name="linking"></a>
<!-- BEGIN VCD6 ARTICLE COMPONENT -->
<div><b>Linking the Program</b></div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<p>At one time, most C++ compilers required that function <tt>main</tt> be
compiled by the C++ compiler. That requirement is not common today, and
Sun C++ does not require it. If your C++ compiler needs to compile the
main function but you cannot do so for some reason, you can change the
name of the C main function and call it from a wrapper version of C++ <tt>main</tt>.
For example, change the name of the C main function to <tt>C_main</tt>,
and write this C++ code:</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
extern "C" int C_main(int, char**); // not needed for Sun C++
int main(int argc, char** argv) { return C_main(argc, argv); }
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
Of course, <tt>C_main</tt> must be declared in the C code to return an
int, and it will have to return an int value. As noted above, you do not
need to go to this trouble with Sun C++.
<p>Even if your program is primarily C code but makes use of C++ libraries,
you need to link C++ runtime support libraries provided with the C++ compiler
into your program. The easiest and best way to do that is to use the C++
compiler driver to do the linking. The C++ compiler driver knows what libraries
to link, and the order in which to link them. The specific libraries can
depend on the options used when compiling the C++ code.
</p><p>Suppose you have C program files <tt>main.o</tt>, <tt>f1.o</tt>, and<tt>
f2.o</tt>, and you use a C++ library <tt>helper.a</tt>. With Sun C++,
you would issue the command
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td><pre>
CC -o myprog main.o f1.o f2.o helper.a
</pre>
</td></tr></table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  -->
<p>
The necessary C++ runtime libraries like libCrun and libCstd are linked
automatically. The documentation for <tt>helper.a</tt> might require that
you use additional link-time options. If you can't use the C++ compiler
for some reason, you can use the <tt>-dryrun</tt> option of the CC command
to get the list of commands the compiler issues, and capture them into
a shell script. Since the exact commands depend on command-line options,
you should review the output from <tt>-dryrun</tt> with any change of the
command line.
</p>
<span class="sp20">&nbsp;</span><br />
<!-- END VCD6 ARTICLE COMPONENT -->
<!-- BEGIN VCH1 MORE INFORMATION COMPONENT  -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td class="headerbar2"><div class="headerpadding2">For More Information</div></td></tr>
</table>
<span class="sp10">&nbsp;</span><br />
<table border="0" cellpadding="0" cellspacing="0" class="vatop">
<tr>
<td class="hyphen">-&nbsp;</td>
<td><a href="/sunstudio/documentation/product/previous.jsp">Sun ONE Studio C/C++ Documentation </a> 
<br />&nbsp;Latest information on the Sun ONE C and C++ compilers and tools, including
man pages and readme files. </td></tr>
</table>
<span class="sp20">&nbsp;</span><br />
<!-- END VCH1 MORE INFORMATION COMPONENT  -->
<a name="author"></a> <br>
<!-- BEGIN VCD3 TITLED SECTION COMPONENT  -->
<div>
<b>About the Author</b>
</div>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<div>
<p><span class="bold">Steve Clamage </span> 
has been at Sun since 1994. He is currently technical 
lead for the C++ compiler and the Sun ONE Studio Compiler 
Collection. He has been chair of the ANSI C++ Committee since 1995.
</p>
</div>
<span class="sp10">&nbsp;</span><br />
<!-- END VCD3 TITLED SECTION COMPONENT  -->
<!-- =================== -->
<!-- END OF MAIN CONTENT -->
<!-- =================== -->
<!--stopindex-->
<!-- END CENTRAL COLUMN COMPONENTS -->
</td><td valign="top">
<!-- BEGIN RIGHT COLUMN COMPONENTS -->
<!-- END RIGHT COLUMN COMPONENTS -->
</td></tr>
<!-- BEGIN SPACER ROW -->
<tr><td><img src="/im/a.gif" width="560" height="1" border="0" alt=" " /></td><td><img src="/im/a.gif" width="170" height="1" border="0" alt=" " /></td></tr>
<!-- END SPACER ROW -->
</table>
<!-- END WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<!-- BEGIN PC1 COMPONENT V.2 -->
<div class="pc1 pc1v2" style="margin:0 10px">
<div class="pc1w1"><div class="pc1w2"><div class="pc1w3 cornerBL"><div class="pc1w4">
<p>Oracle is reviewing the Sun product roadmap and will provide guidance to customers in accordance with Oracle's standard product communication policies. Any resulting features and timing of release of such features as determined by Oracle's review of roadmaps, are at the sole discretion of Oracle. All product roadmap information, whether communicated by Sun Microsystems or by Oracle, does not represent a commitment to deliver any material, code, or functionality, and should not be relied upon in making purchasing decisions. It is intended for information purposes only, and may not be incorporated into any contract.</p>
</div></div></div></div>
</div>
<!-- END PC1 COMPONENT V.2 -->
<!-- BEGIN G9 VARIATION 0 -->
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_engine.js"></script>
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_conf_en-US.js"></script>
<!-- END G9 VARIATION 0 -->
<!-- BEGIN VNV5 FOOTER  -->
<table border="0" cellpadding="0" cellspacing="10" width="100%">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="vatop">
<tr>
<td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
<tr>
<td><img src="http://developers.sun.com/im/a.gif" width="190" height="1" border="0" alt="" /><br />
<a href="http://www.oracle.com/index.html"><img src="/im/logo_oracle_footer.gif" width="93" height="29" border="0" alt="" vspace="5"/></a></td>
<td width="100%" valign="top"><img src="/im/a.gif" width="350" height="1" border="0" alt="" /><br />
<div class="footer">
<a href="http://developers.sun.com/global/aboutsun.html">About Sun</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/aboutsdn.html">About This Site</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/newsletters.html">Newsletters</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/contact.html">Contact Us</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/employment.html">Employment</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/howtobuy.html">How to Buy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/licensing.html">Licensing</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/termsofuse.html">Terms of Use</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/privacy.html">Privacy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/trademarks.html">Trademarks</a>
<br /><span class="sp10">&nbsp;</span><br />
<br /><span class="sp10">&nbsp;</span><br />
<!-- <span id="copyDate" class="cssDate"></span>--> &copy; 2010, Oracle Corporation and/or its affiliates
</div></td>
<td><img src="/im/a.gif" width="40" height="1" border="0" alt="" /></td>
<td valign="top"><div class="footer"><b><a href="http://developers.sun.com/global/aboutsdn.html">A Sun Developer Network Site</a></b></div>
<div class="footer">
<img src="/im/a.gif" width="170" height="1" border="0" alt="" /><br />
Unless otherwise licensed, code in all technical manuals herein (including articles, FAQs, samples) is provided under this <a href="http://developers.sun.com/global/berkeley_license.html">License</a>.
<br /><span class="sp5">&nbsp;</span><br />
<a href="http://developers.sun.com/global/rss_sdn.html"><img src="/im/ic_feed_16x.gif" width="16" height="16" align="top" border="0" alt="XML" /></a>&nbsp;<a href="http://developers.sun.com/global/content_feeds.html">Sun Developer RSS Feeds</a>
</div></td></tr>
<tr><td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
</table>
</td></tr>
</table>
<!-- END VNV5 FOOTER -->
<script language="JavaScript" src="/js/omi/dsc/s_code_remote.js"></script></body>
</html>




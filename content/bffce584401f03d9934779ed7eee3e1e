<html>	<head>		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">		<title>Contour Trees</title>	</head>	<body bgcolor="#FFFFFF">		<h2 align="CENTER">Efficient computation of Contour Trees</h2>		The contour tree is a structure that summarizes all possible contours on a map. I didn't invent it: it was used in the 1950's by Boyell and Ruston for contours, and by many people since then. Until recently, contour trees haven't been used in 3-D datasets, because of a lack of efficient algorithms.<br>		<br>				My <a href="../papers/mastersthesis.pdf">Master's thesis</a> gave an efficient algorithm for computing the contour tree in any number of dimensions, with particular focus on 3-D data sets such as X-ray crystallography. A <a href="publications/contourtreealgorithm.pdf">journal version</a> of the principal results can be found in <a href="http://www.elsevier.com/locate/comgeo">Computational Geometry: Theory and Applications</a>.<br>		<br>		<h3>Hunh? What the heck is a contour tree?</h3>				To illustrate the contour tree, and the algorithm for its construction, I will work through a 2-D example. For data, I will start with a DEM (digital elevation map) of Vancouver, taken from the USGS <a href="http://edcdaac.usgs.gov/gtopo30/gtopo30.html">GTOPO30</a> dataset. In the grid shown, measurements are spaced approximately 1 km (30 arc-seconds) apart: the measurements represent height above sea level.<br>		<br>		<pre><tt>0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  15  18  26  210   0   0   0   0   0   0   0   0   0   0   0   0   0   0  36   4   0   0   0   00   0   0   0   0   0   0   0   0   0   0   0   0   0   6  35  30   1   1   0   00   0   0   0   0   0   0   0   0   0   0   0   0   0   0   2   3   1   0   0   00   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  20  34  30  22   10   0   0   6   9   6   3   1   1   0   0   0   0   0   0   1   1  23  30  17   10   0  30  39  46  42  34  35  27  16   7   7   5  20  26  14   3   1   1   2   40   0  30  53  60  60  55  57  55  47  28  22  24  28  30  32  31  30  19  21  250   0   0  30  56  53  52  60  64  85  86  46  30  30  37  49  57  60  47  47  530   0   0   0   0  17  30  47  60  69  82  67  61  30  40  60  89  72  63  61  610   0   0   0   0   0   0  19  27  33  43  56  60  60  60  80  91  85  69  63  710   0   0   0   0   0   1   0  11  14  19  25  33  42  54  66  79  90  75  64  620   0   0   0   0   0   0   1   1   1   1   8  11  18  30  42  60  61  58  40  320   0   0   0   0   0   0   0   1   1   1   1   1   1   0  18  30  33  29  16  130   0   0   0   0   0   0   0   1   4   4   4   4   4   1   1   6   6   1   1   10   0   0   0   0   0   0   0   3   4   4   4   4   4   4   4   1   1   1   1   10   0   0   0   0   0   0   0   0   1   2   3   4   4   2   1   1   1   2   3   30   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   2   3   4   4</tt></pre>				One way of looking at this information is as an image:<br>		<br>		<center>			<img src="images/pt_grey_img.jpg" alt="Pt. Grey: image"><br>				Image of Vancouver</center>		<br>		<br>				Alternately, we can construct a series of contours from the data:<br>		<center>			<img src="images/pt_grey.jpg" alt="Pt. Grey: contours"><br>				Contour Map of Vancouver</center>		<br>		If we look closely, we can see that the contours <i>nest</i> inside each other.  We can exploit this by drawing a diagram that represents the way the contours nest.  One way to do this is to draw a set of paths that cross every contour <i>exactly</i> once:<br>		<div align="center">			<p><img src="images/pt_grey_ct.jpg" alt="Pt. Grey with contour tree"><br>				Contours &amp; Contour Tree</p>		</div>		<div align="center">					</div>		<br>		<br>		The diagram we get is called the <i>contour tree</i>.  If we straighten out this tree so that the highest hills are at the top, and the lowest points at the bottom, we get this:		<center>			<img src="images/pt_grey_ct_only.jpg" alt="Contour tree for Pt. Grey"><br>				Contour Tree</center>		This gives a convenient abstract representation of the input data that we can use for a number of purposes, starting with accelerated extraction of the contours.		<div align="center">					</div>		<h3>How do you construct the contour tree?</h3>			There are actually a couple of ways of doing it. Here's how I do it:<br>		<br>				Start at the highest peak (point A), and add points one at a time in order of height. As we do so, we see blobs grow in the image:		<center>			<img src="images/join_blobs.jpg" alt="Blobs joining together"><br>				Blobs growing to find Join Tree</center>		<br>		<br>				When we see two blobs join together, we know that we have found a saddle, or pass, between two peaks. We draw two lines connecting the peaks to the saddle. After that, we treat the two (connected) peaks as one: if we need to draw a line from the combined peak, we do it from the saddle. When we are done, we straighten out the diagram we have drawn, and get what I call the <b>join tree</b>: note that all &quot;upward&quot; forks in the final contour tree show up in this tree.<br>		<br>		<center>			<img src="images/join_tree.jpg" alt="Join Tree"><br>				The Join Tree</center>		<br>		<br>				If we grow blobs from the bottom up, we get the &quot;split tree&quot;, in which the &quot;downward&quot; forks show up:<br>		<br>		<center>			<img src="images/split_blobs.jpg" alt="Blobs joining together">			<p>	Blobs growing to find the Split Tree</p>			<p><img src="images/split_tree.jpg" alt="Join Tree"><br>			</p>			<p>The Split Tree</p>		</center>		<br>		<br>When we have constructed the join and split trees, we merge them together to get the contour tree. If you want details, check out the <a href="../publications/contourtreealgorithm.pdf">paper</a>.<br>		<br>				For those of you who are curious, the labelled points are (very roughly):				<table>			<tr>				<td>A</td>				<td>Queen Elizabeth Park</td>				<td>B</td>				<td>Dunbar</td>				<td>C</td>				<td>Metrotown</td>			</tr>			<tr>				<td>D</td>				<td>Fraser</td>				<td>E</td>				<td>Kerrisdale</td>				<td>F</td>				<td>University Hill (UBC)</td>			</tr>			<tr>				<td>G</td>				<td>Blanca</td>				<td>H</td>				<td>Stanley Park</td>				<td>I</td>				<td>Downtown</td>			</tr>			<tr>				<td>J</td>				<td>North Vancouver</td>				<td>K</td>				<td>Lost Lagoon</td>				<td>L</td>				<td>False Creek</td>			</tr>			<tr>				<td>M</td>				<td>Sea Island</td>				<td>N</td>				<td>First Narrows</td>				<td>O</td>				<td>North Arm</td>			</tr>			<tr>				<td>P</td>				<td>Burrard Inlet</td>				<td>Q</td>				<td>Georgia Strait</td>			</tr>		</table>	</body></html>
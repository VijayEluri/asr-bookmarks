<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Properties</title><link rel="stylesheet" href="styles.css" type="text/css" /><meta name="generator" content="DocBook XSL Stylesheets V1.65.1" /><link rel="home" href="index.html" title="Version Control with Subversion" /><link rel="up" href="ch07.html" title="Chapter 7. Advanced Topics" /><link rel="previous" href="ch07.html" title="Chapter 7. Advanced Topics" /><link rel="next" href="ch07s03.html" title="Peg and Operative Revisions" /></head><body>
<div id="adsense_left">
<script type="text/javascript"><!--
// Text Ad: Skyscraper (120x600)
google_ad_client = "pub-0505104349866057";
google_ad_width = 120;
google_ad_height = 600;
google_ad_format = "120x600_as";
google_ad_channel = "";
google_color_border = "ffffff";
google_color_bg = "ffffff";
google_color_link = "0000ff";
google_color_url = "008000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>


<div class="navheader"><table width="100%" summary="Navigation header"><tr><th colspan="3" align="center">Properties</th></tr><tr><td width="20%" align="left"><a accesskey="p" href="ch07.html">Prev</a> </td><th width="60%" align="center">Chapter 7. Advanced Topics</th><td width="20%" align="right"> <a accesskey="n" href="ch07s03.html">Next</a></td></tr></table><hr /></div><div class="sect1" lang="en" xml:lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="svn-ch-7-sect-2"></a>Properties</h2></div></div><div></div></div><p>We've already covered in detail how Subversion stores and      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      fundamental piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from a version control perspective.  But it
      doesn't stop there.</p><p>In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
      <i class="firstterm">properties</i>, and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must be
      human-readable text.  And the best part about these properties
      is that they, too, are versioned, just like the textual contents
      of your files.  You can modify, commit, and revert property
      changes as easily as committing textual changes.  And you
      receive other people's property changes as you update your
      working copy.</p><div class="sidebar"><p class="title"><b>Other Properties in Subversion</b></p><p>Properties show up elsewhere in Subversion, too.  Just as
        files and directories may have arbitrary property names and
        values attached to them, each revision as a whole may have
        arbitrary properties attached to it.  The same constraints
        apply—human-readable, text names and anything-you-want,
        binary values—except that revision properties are not
        versioned.  See <a href="ch05.html#svn-ch-5-sect-1.2" title="Unversioned Properties">the section called “Unversioned Properties”</a> for more
        information on these unversioned properties.</p></div><p>In this section, we will examine the utility—both to
      users of Subversion, and to Subversion itself—of property
      support.  You'll learn about the property-related
      <span><b class="command">svn</b></span> subcommands, and how property
      modifications affect your normal Subversion workflow.
      Hopefully, you'll be convinced that Subversion properties can
      enhance your version control experience.</p><div class="sect2" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="svn-ch-7-sect-2.1"></a>Why Properties?</h3></div></div><div></div></div><p>Properties can be very useful additions to your working
        copy.  In fact, Subversion itself uses properties to house
        special information, and as a way to denote that certain
        special processing might be needed.  Likewise, you can use
        properties for your own purposes.  Of course, anything you can
        do with properties you could also do using regular versioned
        files, but consider the following example of Subversion
        property use.</p><p>Say you wish to design a website that houses many digital
        photos, and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you'd like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors.  You can do this with traditional files.  That is,
        you can have your <tt class="filename">image123.jpg</tt> and an
        <tt class="filename">image123-thumbnail.jpg</tt> side-by-side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, like
        <tt class="filename">thumbnails/image123.jpg</tt>.  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  Soon, your tree of
        files is a mess, and grows in multiples with each new photo
        added to the site.</p><p>Now consider the same setup using Subversion's file
        properties.  Imagine having a single image file,
        <tt class="filename">image123.jpg</tt>, and then properties set on
        that file named <tt class="literal">caption</tt>,
        <tt class="literal">datestamp</tt>, and even
        <tt class="literal">thumbnail</tt>.  Now your working copy directory
        looks much more manageable—in fact, it looks like there
        are nothing but image files in it.  But your automation
        scripts know better.  They know that they can use
        <span><b class="command">svn</b></span> (or better yet, they can use the
        Subversion language bindings—see <a href="ch08s02.html#svn-ch-8-sect-2.3" title="Using Languages Other than C and C++">the section called “Using Languages Other than C and C++”</a>) to dig out the extra
        information that your site needs to display without having to
        read an index file or play path manipulation games.</p><p>How (and if) you use Subversion properties is up to you.
        As we mentioned, Subversion has it own uses for properties,
        which we'll discuss a little later in this chapter.  But
        first, let's discuss how to manipulate options using the
        <span><b class="command">svn</b></span> program.</p></div><div class="sect2" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="svn-ch-7-sect-2.2"></a>Manipulating Properties</h3></div></div><div></div></div><p>The <span><b class="command">svn</b></span> command affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command-line of the <span><b class="command">propset</b></span>
        subcommand.</p><pre class="screen">
$ svn propset copyright '(c) 2003 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</pre><p>But we've been touting the flexibility that Subversion
        offers for your property values.  And if you are planning to
        have a multi-line textual, or even binary, property value, you
        probably do not want to supply that value on the command-line.
        So the <span><b class="command">propset</b></span> subcommand takes a
        <tt class="option">--file</tt> (<tt class="option">-F</tt>) option for
        specifying the name of
        a file which contains the new property value.</p><pre class="screen">
$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</pre><p>In addition to the <span><b class="command">propset</b></span> command, the
        <span><b class="command">svn</b></span> program supplies the
        <span><b class="command">propedit</b></span> command.  This command uses the
        configured editor program (see <a href="ch07.html#svn-ch-7-sect-1.3.2" title="Config">the section called “Config”</a>) to add or modify properties.
        When you run the command, <span><b class="command">svn</b></span> invokes your
        editor program on a temporary file that contains the current
        value of the property (or which is empty, if you are adding a
        new property).  Then, you just modify that value in your
        editor program until it represents the new value you wish to
        store for the property, save the temporary file, and then exit
        the editor program.  If Subversion detects that you've
        actually changed the existing value of the property, it will
        accept that as the new property value.  If you exit your
        editor without making any changes, no property modification
        will occur.</p><pre class="screen">
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</pre><p>We should note that, as with other <span><b class="command">svn</b></span>
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done:</p><pre class="screen">
$ svn propset copyright '(c) 2002 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
…
$
</pre><p>All of this property adding and editing isn't really very
        useful if you can't easily get the stored property value.  So
        the <span><b class="command">svn</b></span> program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The <span><b class="command">svn proplist</b></span>
        command will list the names of properties that exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using <span><b class="command">svn
        propget</b></span>.  This command will, given a path (or set of
        paths) and a property name, print the value of the property to
        the standard output stream.</p><pre class="screen">
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2003 Red-Bean Software
</pre><p>There's even a variation of the
        <span><b class="command">proplist</b></span> command that will list both the
        name and value of all of the properties.  Simply supply the
        <tt class="option">--verbose</tt> (<tt class="option">-v</tt>) option.</p><pre class="screen">
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : ================================================================
Copyright (c) 2003 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
…
</pre><p>The last property-related subcommand is
        <span><b class="command">propdel</b></span>.  Since Subversion allows you to
        store properties with empty values, you can't remove a
        property altogether using <span><b class="command">propedit</b></span> or
        <span><b class="command">propset</b></span>.  For example, this command will
        <span class="emphasis"><em>not</em></span> yield the desired effect:</p><pre class="screen">
$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
  license : 
$
</pre><p>You need to use the <span><b class="command">propdel</b></span> command to
        delete properties altogether.  The syntax is similar to the
        other property commands:</p><pre class="screen">
$ svn propdel license calc/button.c
property 'license' deleted from ''.
$ svn proplist --verbose calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2003 Red-Bean Software
$
</pre><p>Now that you are familiar with all of the
        property-related <span><b class="command">svn</b></span> subcommands, let's see
        how property modifications affect the usual Subversion
        workflow.  As we mentioned earlier, file and directory
        properties are versioned, just like your file contents.  As a
        result, Subversion provides the same opportunities for
        merging—in cleanly or conflicting fashions—someone
        else's modifications into your own.</p><div class="sidebar"><p class="title"><b>Modifying Revision Properties</b></p><p>Remember those unversioned revision properties?  You can
          modify those, too, with the <span><b class="command">svn</b></span> program.
          Simply add the <tt class="option">--revprop</tt> command-line
          parameter, and specify the revision whose property you wish
          to modify.  Since revisions are global, you don't need to
          specify a path in this case as long as you are positioned in
          the working copy of the repository whose revision property
          you wish to modify.  For example, you might want to replace
          the commit log message of an existing revision.
          <sup>[<a id="id3021920" href="#ftn.id3021920">27</a>]</sup></p><pre class="screen">
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</pre><p>Note that the ability to modify these unversioned
          properties must be explicitly added by the repository
          administrator (see <a href="ch05s02.html#svn-ch-5-sect-2.1" title="Hook Scripts">the section called “Hook Scripts”</a>).
          Since the properties aren't versioned, you run the risk of
          losing information if you aren't careful with your edits.
          The repository administrator can setup methods to protect
          against this loss, and by default, modification of
          unversioned properties is disabled.</p></div><p>And as with file contents, your property changes are local
        modifications, only made permanent when you commit them to the
        repository with <span><b class="command">svn commit</b></span>.  Your property
        changes can be easily unmade, too—the <span><b class="command">svn
        revert</b></span> command will restore your files and
        directories to their un-edited states, contents, properties,
        and all.  Also, you can receive interesting information about
        the state of your file and directory properties by using the
        <span><b class="command">svn status</b></span> and <span><b class="command">svn diff</b></span>
        commands.</p><pre class="screen">
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2003 Red-Bean Software

$
</pre><p>Notice how the <span><b class="command">status</b></span> subcommand
        displays <tt class="literal">M</tt> in the second column instead of
        the first.  That is because we have modified the properties on
        <tt class="filename">calc/button.c</tt>, but not modified its
        textual contents.  Had we changed both, we would have seen
        <tt class="literal">M</tt> in the first column, too (see <a href="ch03s05.html#svn-ch-3-sect-5.3.1" title="svn status">the section called “svn status”</a>).</p><div class="sidebar"><p class="title"><b>Property Conflicts</b></p><p>As with file contents, local property modifications can
          conflict with changes committed by someone else.  If you
          update your working copy directory and receive property
          changes on a versioned resource that clash with your own,
          Subversion will report that the resource is in a conflicted
          state.</p><pre class="screen">
% svn update calc
M  calc/Makefile.in
 C calc/button.c
Updated to revision 143.
$ 
</pre><p>Subversion will also create, in the same directory as
          the conflicted resource, a file with a
          <tt class="filename">.prej</tt> extension which contains the
          details of the conflict.  You should examine the contents of
          this file so you can decide how to resolve the conflict.
          Until the conflict is resolved, you will see a
          <tt class="literal">C</tt> in the second column of <span><b class="command">svn
          status</b></span> output for that resource, and attempts to
          commit your local modifications will fail.</p><pre class="screen">
$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
prop 'linecount': user set to '1256', but update set to '1301'.
$
</pre><p>To resolve property conflicts, simply ensure that the
          conflicting properties contain the values that they should,
          and then use the <span><b class="command">svn resolved</b></span> command to
          alert Subversion that you have manually resolved the
          problem.</p></div><p>You might also have noticed the non-standard way that
        Subversion currently displays property differences.  You can
        still run <span><b class="command">svn diff</b></span> and redirect the output
        to create a usable patch file.  The <span><b class="command">patch</b></span>
        program will ignore property patches—as a rule, it
        ignores any noise it can't understand.  This does
        unfortunately mean that to fully apply a patch generated by
        <span><b class="command">svn diff</b></span>, any property modifications will
        need to be applied by hand.</p><p>As you can see, the presence of property modifications has
        no outstanding effect on the typical Subversion workflow.
        Your general patterns of updating your working copy, checking
        the status of your files and directories, reporting on the
        modifications you have made, and committing those
        modifications to the repository are completely immune to the
        presence or absence of properties.  The <span><b class="command">svn</b></span>
        program has some additional subcommands for actually making
        property changes, but that is the only noticeable asymmetry.</p></div><div class="sect2" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="svn-ch-7-sect-2.3"></a>Special Properties</h3></div></div><div></div></div><p>Subversion has no particular policy regarding
        properties—you can use them for any purpose.  Subversion
        asks only that you not use property names that begin with the
        prefix <tt class="literal">svn:</tt>.  That's the namespace that it
        sets aside for its own use.  In fact, Subversion defines
        certain properties that have magical effects on the files and
        directories to which they are attached.  In this section,
        we'll untangle the mystery, and describe how these special
        properties make your life just a little easier.</p><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.1"></a><tt class="literal">svn:executable</tt></h4></div></div><div></div></div><p>The <tt class="literal">svn:executable</tt> property is used
          to control a versioned file's filesystem-level execute
          permission bit in a semi-automated way.  This property has
          no defined values—its mere presence indicates a desire
          that the execute permission bit be kept enabled by Subversion.
          Removing this property will restore full control of the
          execute bit back to the operating system.</p><p>On many operating systems, the ability to execute a file
          as a command is governed by the presence of an execute
          permission bit.  This bit usually defaults to being
          disabled, and must be explicitly enabled by the user for
          each file that needs it.  In a working copy, new files are
          being created all the time as new versions of existing files
          are received during an update.  This means that you might
          enable the execute bit on a file, then update your working
          copy, and if that file was changed as part of the update,
          its execute bit might get disabled.  So, Subversion provides
          the <tt class="literal">svn:executable</tt> property as a way to
          keep the execute bit enabled.</p><p>This property has no effect on filesystems that have no
          concept of an executable permission bit, such as FAT32 and
          NTFS.
          <sup>[<a id="id3022244" href="#ftn.id3022244">28</a>]</sup>
          Also, although it has no defined values, Subversion will force
          its value to <tt class="literal">*</tt> when setting this property.
          Finally, this property is valid only on files, not on
          directories.</p></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.2"></a><tt class="literal">svn:mime-type</tt></h4></div></div><div></div></div><p>The <tt class="literal">svn:mime-type</tt> property serves
          many purposes in Subversion.  Besides being a
          general-purpose storage location for a file's Multipurpose
          Internet Mail Extensions (MIME) classification, the value of
          this property determines some behavioral characteristics
          of Subversion itself.</p><p>For example, if a file's
          <tt class="literal">svn:mime-type</tt> property is set to a
          non-text MIME type (generally, something that doesn't begin
          with <tt class="literal">text/</tt>, though there are exceptions),
          Subversion will assume that the file contains
          binary—that is, not human-readable—data.  One of
          the benefits that Subversion typically provides is
          contextual, line-based merging of changes received from the
          server during an update into your working file.  But for
          files believed to contain binary data, there is no concept
          of a “<span class="quote">line</span>”.  So, for those files, Subversion
          does not attempt to perform contextual merges during
          updates.  Instead, any time you have locally modified a
          binary working copy file that is also being updated, your
          file is renamed with a <tt class="filename">.orig</tt> extension,
          and then Subversion stores a new working copy file that
          contains the changes received during the update, but not
          your own local modifications, at the original filename.
          This behavior is really for the protection of the user
          against failed attempts at performing contextual merges on
          files that simply cannot be contextually merged.</p><p>Also, if the <tt class="literal">svn:mime-type</tt>
          property is set, then the Subversion Apache module will use
          its value to populate the <tt class="literal">Content-type:</tt>
          HTTP header when responding to GET requests.  This gives a
          crucial clue about how to display a file when perusing
          your repository with a web browser.</p></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.3"></a><tt class="literal">svn:ignore</tt></h4></div></div><div></div></div><p>The <tt class="literal">svn:ignore</tt> property contains a
          list of file patterns which certain Subversion operations
          will ignore.  Perhaps the most commonly used special
          property, it works in conjunction with the
          <tt class="literal">global-ignores</tt> run-time configuration
          option (see <a href="ch07.html#svn-ch-7-sect-1.3.2" title="Config">the section called “Config”</a>) to
          filter unversioned files and directories out of commands
          <span><b class="command">svn status</b></span>, <span><b class="command">svn
          add</b></span>, and <span><b class="command">svn import</b></span>.</p><p>The rationale behind the <tt class="literal">svn:ignore</tt>
          property is easily explained.  Subversion does not assume
          that every file or subdirectory in a working copy directory
          is intended for version control.  Resources must be
          explicitly placed under Subversion's management using the
          <span><b class="command">svn add</b></span> or <span><b class="command">svn import</b></span>
          commands.  As a result, there are often many resources in a
          working copy that are not versioned.</p><p>Now, the <span><b class="command">svn status</b></span> command displays
          as part of its output every unversioned file or subdirectory
          in a working copy that is not already filtered out by the
          <tt class="literal">global-ignores</tt> option (or its built-in
          default value).  This is done so that users can see if
          perhaps they've forgotten to add a resource to version
          control.</p><p>But Subversion cannot possibly guess the names of
          every resource that should be ignored.  Also, quite often
          there are things that should be ignored in
          <span class="emphasis"><em>every</em></span> working copy of a particular
          repository.  To force every user of that repository to add
          patterns for those resources to their run-time configuration
          areas would be not just a burden, but has the potential to
          clash with the configuration needs of other working copies
          that the user has checked out.</p><p>The solution is to store ignore patterns that are unique
          to the resources likely to appear in a given directory with
          the directory itself.  Common examples of unversioned
          resources that are basically unique to a directory, yet
          likely to appear there, include output from program
          compilations.  Or—to use an example more appropriate
          to this book—the HTML, PDF, or PostScript files
          generated as the result of a conversion of some source
          DocBook XML files to a more legible output format.</p><div class="sidebar"><p class="title"><b>Ignore Patterns for CVS Users</b></p><p>The Subversion <tt class="literal">svn:ignore</tt> property
            is very similar in syntax and function to the CVS
            <tt class="filename">.cvsignore</tt> file.  In fact, if you are
            migrating a CVS working copy to Subversion, you can
            directly migrate the ignore patterns by using the
            <tt class="filename">.cvsignore</tt> file as input file to the
            <span><b class="command">svn propset</b></span> command:</p><pre class="screen">
$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</pre><p>There are, however, some differences in the ways that
            CVS and Subversion handle ignore patterns.  The two systems
            use the ignore patterns at some different times, and there
            are slight discrepancies in what the ignore patterns apply
            to.  Also, Subversion does not recognize the use of the
            <tt class="literal">!</tt> pattern as a reset back to having no
            ignore patterns at all.</p></div><p>For this purpose, the <tt class="literal">svn:ignore</tt>
          property is the solution.  Its value is a multi-line
          collection of file patterns, one pattern per line.  The
          property is set on the directory in which you wish the
          patterns to be applied.
          <sup>[<a id="id3022585" href="#ftn.id3022585">29</a>]</sup>
          For example, say you have the following output from
          <span><b class="command">svn status</b></span>:</p><pre class="screen">
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</pre><p>In this example, you have made some property
          modifications to <tt class="filename">button.c</tt>, but in your
          working copy you also have some unversioned files:
          the latest <tt class="filename">calculator</tt> program
          that you've compiled from your source code, a source file
          named <tt class="filename">data.c</tt>, and a set of debugging
          output log files.  Now, you know that your build system
          always results in the <tt class="filename">calculator</tt>
          program being generated.
          <sup>[<a id="id3022641" href="#ftn.id3022641">30</a>]</sup>
          And you know that your test suite always leaves those
          debugging log files lying around.  These facts are true for
          all working copies, not just your own.  And you know that
          you aren't interested in seeing those things every time you
          run <span><b class="command">svn status</b></span>.  So you use <span><b class="command">svn
          propedit svn:ignore calc</b></span> to add some ignore
          patterns to the <tt class="filename">calc</tt> directory.  For
          example, you might add this as the new value of the
          <tt class="literal">svn:ignore</tt> property:</p><pre class="programlisting">
calculator
debug_log*
</pre><p>After you've added this property, you will now have a
          local property modification on the <tt class="filename">calc</tt>
          directory.  But notice what else is different about your
          <span><b class="command">svn status</b></span> output:</p><pre class="screen">
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</pre><p>Now, all the cruft is missing from the output!  Of
          course, those files are still in your working copy.
          Subversion is simply not reminding you that they are present
          and unversioned.  And now with all the trivial noise removed
          from the display, you are left with more interesting
          items—such as that source code file that you probably
          forgot to add to version control.</p><p>If you want to see the ignored files, you can pass the 
          <tt class="option">--no-ignore</tt> option to Subversion:</p><pre class="screen">
$ svn status --no-ignore
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</pre><p>The list of patterns to ignore is also used by
          <span><b class="command">svn add</b></span> and <span><b class="command">svn
          import</b></span>.  Both of these operations involve asking
          Subversion to begin managing some set of files and
          directories.  Rather than force the user to pick and choose
          which files in a tree she wishes to start versioning,
          Subversion uses the ignore patterns to determine which files
          should not be swept into the version control system as part
          of a larger recursive addition or import operation.</p></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.4"></a><tt class="literal">svn:keywords</tt></h4></div></div><div></div></div><p>Subversion has the ability to substitute
          <i class="firstterm">keywords</i>—pieces of useful,
          dynamic information about a versioned file—into the
          contents of the file itself.  Keywords generally describe
          information about the last time the file was known to be
          modified.  Because this information changes each time the
          file changes, and more importantly, just
          <span class="emphasis"><em>after</em></span> the file changes, it is a hassle
          for any process except the version control system to keep
          the data completely up-to-date.  Left to human authors, the
          information would inevitably grow stale.</p><p>For example, say you have a document in which you would
          like to display the last date on which it was modified.  You
          could burden every author of that document to, just before
          committing their changes, also tweak the part of the
          document that describes when it was last changed.  But
          sooner or later, someone would forget to do that.  Instead
          simply ask Subversion to perform keyword substitution on the
          <tt class="literal">LastChangedDate</tt> keyword.  You control
          where the keyword is inserted into your document by placing
          a <i class="firstterm">keyword anchor</i> at the desired
          location in the file.  This anchor is just a string of text
          formatted as
          <tt class="literal">$</tt><i class="replaceable"><tt>KeywordName</tt></i><tt class="literal">$</tt>.</p><p>All keywords are case-sensitive where they appear as
          anchors in files: you must use the correct capitalization in
          order for the keyword to be expanded.  You should consider the
          value of the <tt class="literal">svn:keywords</tt> property to be
          case-sensitive too—certain keyword names will be recognized
          regardless of case, but this behaviour is deprecated.</p><p>Subversion defines the list of keywords available for
          substitution.  That list contains the following five keywords, 
          some of which have aliases that you can also use:</p><div class="variablelist"><dl><dt><span class="term"><tt class="literal">Date</tt></span></dt><dd><p>This keyword describes the last time the file was
                known to have been changed in the repository, and
                looks something like <tt class="literal">$Date:
                2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002)
                $</tt>.  It may also be specified as
                <tt class="literal">LastChangedDate</tt>.</p></dd><dt><span class="term"><tt class="literal">Revision</tt></span></dt><dd><p>This keyword describes the last known revision in
                which this file changed in the repository, and looks
                something like <tt class="literal">$Revision: 144 $</tt>.  
                It may also be specified as
                <tt class="literal">LastChangedRevision</tt> or
                <tt class="literal">Rev</tt>.</p></dd><dt><span class="term"><tt class="literal">Author</tt></span></dt><dd><p>This keyword describes the last known user to
                change this file in the repository, and looks
                something like <tt class="literal">$Author: harry $</tt>.  
                It may also be specified as 
                <tt class="literal">LastChangedBy</tt>.</p></dd><dt><span class="term"><tt class="literal">HeadURL</tt></span></dt><dd><p>This keyword describes the full URL to the latest
                version of the file in the repository, and looks
                something like <tt class="literal">$HeadURL:
                http://svn.collab.net/repos/trunk/README $</tt>.
                It may be abbreviated as
                <tt class="literal">URL</tt>.</p></dd><dt><span class="term"><tt class="literal">Id</tt></span></dt><dd><p>This keyword is a compressed combination of the
                other keywords.  Its substitution looks something like
                <tt class="literal">$Id: calc.c 148 2002-07-28 21:30:43Z sally
                $</tt>, and is interpreted to mean that the file
                <tt class="filename">calc.c</tt> was last changed in revision
                148 on the evening of July 28, 2002 by the user
                <tt class="literal">sally</tt>.</p></dd></dl></div><p>Simply adding keyword anchor text to your file does
          nothing special.  Subversion will never attempt to perform
          textual substitutions on your file contents unless
          explicitly asked to do so.  After all, you might be writing
          a document
          <sup>[<a id="id3023036" href="#ftn.id3023036">31</a>]</sup> 
          about how to use keywords, and you don't want Subversion to
          substitute your beautiful examples of un-substituted keyword
          anchors!</p><p>To tell Subversion whether or not to substitute keywords
          on a particular file, we again turn to the property-related
          subcommands.  The <tt class="literal">svn:keywords</tt> property,
          when set on a versioned file, controls which keywords will
          be substituted on that file.  The value is a space-delimited
          list of the keyword names or aliases found in the previous
          table.</p><p>For example, say you have a versioned file named
          <tt class="filename">weather.txt</tt> that looks like
          this:</p><pre class="programlisting">
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</pre><p>With no <tt class="literal">svn:keywords</tt> property set on
          that file, Subversion will do nothing special.  Now, let's
          enable substitution of the
          <tt class="literal">LastChangedDate</tt> keyword.</p><pre class="screen">
$ svn propset svn:keywords "Date Author" weather.txt
property 'svn:keywords' set on 'weather.txt'
$
</pre><p>Now you have made a local property modification on the
          <tt class="filename">weather.txt</tt> file.  You will see no
          changes to the file's contents (unless you made some of your
          own prior to setting the property).  Notice that the file
          contained a keyword anchor for the <tt class="literal">Rev</tt>
          keyword, yet we did not include that keyword in the property
          value we set.  Subversion will happily ignore requests to
          substitute keywords that are not present in the file, and
          will not substitute keywords that are not present in the
          <tt class="literal">svn:keywords</tt> property value.</p><div class="sidebar"><p class="title"><b>Keywords and Spurious Differences</b></p><p>The user-visible result of keyword substitution might
            lead you to think that every version of a file with that
            feature in use differs from the previous version in at
            least the area where the keyword anchor was placed.
            However, this is actually not the case.  While checking
            for local modifications during <span><b class="command">svn
            diff</b></span>, and before transmitting those local
            modifications during <span><b class="command">svn commit</b></span>,
            Subversion “<span class="quote">un-substitutes</span>” any keywords that
            it previously substituted.  The result is that the
            versions of the file that are stored in the repository
            contain only the real modifications that users make to the
            file.</p></div><p>Immediately after you commit this property change,
          Subversion will update your working file with the new
          substitute text.  Instead of seeing your keyword anchor
          <tt class="literal">$LastChangedDate$</tt>, you'll see its
          substituted result.  That result also contains the name of
          the keyword, and continues to be bounded by the dollar sign
          (<tt class="literal">$</tt>) characters.  And as we predicted, the
          <tt class="literal">Rev</tt> keyword was not substituted because
          we didn't ask for it to be.</p><p>Note also that we set the <tt class="literal">svn:keywords</tt>
          property to "Date Author" yet the keyword anchor used the
          alias <tt class="literal">$LastChangedDate$</tt> and still
          expanded correctly.</p><pre class="screen">
Here is the latest report from the front lines.
$LastChangedDate: 2002-07-22 21:42:37 -0700 (Mon, 22 Jul 2002) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</pre><p>If someone else now commits a change to
          <tt class="filename">weather.txt</tt>, your copy of that file
          will continue to display the same substituted keyword value
          as before—until you update your working copy.  At that
          time the keywords in your <tt class="filename">weather.txt</tt>
          file will be re-substituted with information that
          reflects the most recent known commit to that file.</p></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.5"></a><tt class="literal">svn:eol-style</tt></h4></div></div><div></div></div><p>Unless otherwise noted using a versioned file's
          <tt class="literal">svn:mime-type</tt> property, Subversion
          assumes the file contains human-readable data.  Generally
          speaking, Subversion only uses this knowledge to determine
          if contextual difference reports for that file are
          possible.  Otherwise, to Subversion, bytes are bytes.</p><p>This means that by default, Subversion doesn't pay any
          attention to the type of <i class="firstterm">end-of-line (EOL)
          markers</i> used in your files.  Unfortunately,
          different operating system use different tokens to represent
          the end of a line of text in a file.  For example, the usual
          line ending token used by software on the Windows platform
          is a pair of ASCII control characters—carriage return
          (<tt class="literal">CR</tt>) and line feed
          (<tt class="literal">LF</tt>).  Unix software, however, just uses
          the <tt class="literal">LF</tt> character to denote the end of a
          line.</p><p>Not all of the various tools on these operating systems
          are prepared to understand files that contain line endings
          in a format that differs from the <i class="firstterm">native line
          ending style</i> of the operating system on which
          they are running.  Common results are that Unix programs
          treat the <tt class="literal">CR</tt> character present in Windows
          files as a regular character (usually rendered as
          <tt class="literal">^M</tt>), and that Windows programs combine
          all of the lines of a Unix file into one giant line because
          no carriage return-linefeed (or <tt class="literal">CRLF</tt>)
          character combination was found to denote the end of
          line.</p><p>This sensitivity to foreign EOL markers can become
          frustrating for folks who share a file across different
          operating systems.  For example, consider a source code
          file, and developers that edit this file on both Windows and
          Unix systems.  If all the developers always use tools which
          preserve the line ending style of the file, no problems
          occur.</p><p>But in practice, many common tools either fail to
          properly read a file with foreign EOL markers, or they
          convert the file's line endings to the native style when the
          file is saved.  If the former is true for a developer, he
          has to use an external conversion utility (such as
          <span><b class="command">dos2unix</b></span> or its companion,
          <span><b class="command">unix2dos</b></span>) to prepare the file for
          editing.  The latter case requires no extra preparation.
          But both cases result in a file that differs from the
          original quite literally on every line!  Prior to committing
          his changes, the user has two choices.  Either he can use a
          conversion utility to restore the modified file to the same
          line ending style that it was in before his edits were made.
          Or, he can simply commit the file—new EOL markers and
          all.</p><p>The result of scenarios like these include wasted time
          and unnecessary modifications to committed files.  Wasted
          time is painful enough.  But when commits change every line
          in a file, this complicates the job of determining which of
          those lines were changed in a non-trivial way.  Where was
          that bug really fixed?  On what line was a syntax error
          introduced?</p><p>The solution to this problem is the
          <tt class="literal">svn:eol-style</tt> property.  When this
          property is set to a valid value, Subversion uses it to
          determine what special processing to perform on the file so
          that the file's line ending style isn't flip-flopping with
          every commit that comes from a different operating
          system.  The valid values are:</p><div class="variablelist"><dl><dt><span class="term"><tt class="literal">native</tt></span></dt><dd><p>This causes the file to contain the EOL markers
                that are native to the operating system on which
                Subversion was run.  In other words, if a user on a
                Windows machine checks out a working copy that
                contains a file with an
                <tt class="literal">svn:eol-style</tt> property set to
                <tt class="literal">native</tt>, that file will contain
                <tt class="literal">CRLF</tt> EOL markers.  A Unix user
                checking out a working copy which contains the same
                file will see <tt class="literal">LF</tt> EOL markers in his
                copy of the file.</p><p>Note that Subversion will actually store the file
                in the repository using normalized
                <tt class="literal">LF</tt> EOL markers regardless of the
                operating system.  This is basically transparent to
                the user, though.</p></dd><dt><span class="term"><tt class="literal">CRLF</tt></span></dt><dd><p>This causes the file to contain
                <tt class="literal">CRLF</tt> sequences for EOL markers,
                regardless of the operating system in use.</p></dd><dt><span class="term"><tt class="literal">LF</tt></span></dt><dd><p>This causes the file to contain
                <tt class="literal">LF</tt> characters for EOL markers,
                regardless of the operating system in use.</p></dd><dt><span class="term"><tt class="literal">CR</tt></span></dt><dd><p>This causes the file to contain
                <tt class="literal">CR</tt> characters for EOL markers,
                regardless of the operating system in use.  This line
                ending style is not very common.  It was used on older
                Macintosh platforms (on which Subversion doesn't even
                run).</p></dd></dl></div></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.6"></a><tt class="literal">svn:externals</tt></h4></div></div><div></div></div><p>The <tt class="literal">svn:externals</tt> property contains
          instructions for Subversion to populate a versioned
          directory with one or more other checked-out Subversion
          working copies.  For more information on this keyword and
          its use, see <a href="ch07s04.html" title="Externals Definitions">the section called “Externals Definitions”</a>.</p></div><div class="sect3" lang="en" xml:lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="svn-ch-7-sect-2.3.7"></a><tt class="literal">svn:special</tt></h4></div></div><div></div></div><p>The <tt class="literal">svn:special</tt> property is the only
          <tt class="literal">svn:</tt> property that isn't meant to be
          directly set or modified by users.  Subversion automatically
          sets this property whenever a “<span class="quote">special</span>” object
          is scheduled for addition, such as a symbolic link.  The
          repository stores an <tt class="literal">svn:special</tt> object as
          an ordinary file.  However, when a client sees this property
          during checkouts or updates, it interprets the contents of
          the file and translates the item back into the special type
          of object.  In Subversion 1.1, only versioned symbolic links
          have this property attached, but in future versions of
          Subversion other special types of nodes will probably use
          this property as well.</p><p>Note: Windows clients don't have symbolic links, and
          thus ignore any <tt class="literal">svn:special</tt> files coming
          from a repository that claim to be symbolic links.  On
          Windows, the user ends up with an ordinary versioned file in
          the working copy.</p></div></div><div class="sect2" lang="en" xml:lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="svn-ch-7-sect-2.4"></a>Automatic Property Setting</h3></div></div><div></div></div><p>Properties are a powerful feature of Subversion, acting as
        key components of many Subversion features discussed elsewhere
        in this and other chapters—textual diff and merge
        support, keyword substitution, newline translation, etc.  But
        to get the full benefit of properties, they must be set on the
        right files and directories.  Unfortunately, that can be a
        step easily forgotten in the routine of things, especially
        since failing to set a property doesn't usually result in an
        obvious error condition (at least compared to, say, failing to
        add a file to version control).  To help your properties get
        applied to the places that need them, Subversion provides a
        couple of simple but useful features.</p><p>Whenever you introduce a file to version control using the
        <span><b class="command">svn add</b></span> or <span><b class="command">svn import</b></span>
        commands, Subversion runs a very basic heuristic to determine
        if that file consists of human-readable or non-human-readable
        content.  If the latter is the decision made, Subversion will
        automatically set the <tt class="literal">svn:mime-type</tt>
        property on that file to
        <tt class="literal">application/octet-stream</tt> (the generic
        “<span class="quote">this is a collection of bytes</span>” MIME type).  Of
        course, if Subversion guesses incorrectly, or if you wish to
        set the <tt class="literal">svn:mime-type</tt> property to something
        more precise—perhaps <tt class="literal">image/png</tt> or
        <tt class="literal">application/x-shockwave-flash</tt>—you can
        always remove or edit that property.</p><p>Subversion also provides the auto-props feature, which
        allows you to create mappings of filename patterns to property
        names and values.  These mappings are made in your runtime
        configuration area.  They again affect adds and imports, and
        not only can override any default MIME type decision made by
        Subversion during those operations, they can also set
        additional Subversion or custom properties, too.  For example,
        you might create a mapping that says that any time you add
        JPEG files—ones that match the pattern
        <tt class="literal">*.jpg</tt>—Subversion should automatically
        set the <tt class="literal">svn:mime-type</tt> property on those
        files to <tt class="literal">image/jpeg</tt>.  Or perhaps any files
        that match <tt class="literal">*.cpp</tt> should have
        <tt class="literal">svn:eol-style</tt> set to
        <tt class="literal">native</tt>, and <tt class="literal">svn:keywords</tt>
        set to <tt class="literal">Id</tt>.  Auto-prop support is perhaps
        the handiest property related tool in the Subversion toolbox.
        See <a href="ch07.html#svn-ch-7-sect-1.3.2" title="Config">the section called “Config”</a> for more about
        configuring that support.</p></div><div class="footnotes"><br /><hr width="100" align="left" /><div class="footnote"><p><sup>[<a id="ftn.id3021920" href="#id3021920">27</a>] </sup>Fixing spelling errors, grammatical gotchas, and
              “<span class="quote">just-plain-wrongness</span>” in commit log
              messages is perhaps the most common use case for the
              <tt class="option">--revprop</tt> option.</p></div><div class="footnote"><p><sup>[<a id="ftn.id3022244" href="#id3022244">28</a>] </sup>The Windows filesystems use file extensions (such as
              <tt class="literal">.EXE</tt>, <tt class="literal">.BAT</tt>, and
              <tt class="literal">.COM</tt>) to denote executable
              files.</p></div><div class="footnote"><p><sup>[<a id="ftn.id3022585" href="#id3022585">29</a>] </sup>The patterns are strictly for that
              directory—they do not carry recursively into
              subdirectories.</p></div><div class="footnote"><p><sup>[<a id="ftn.id3022641" href="#id3022641">30</a>] </sup>Isn't that the whole point of a build system?</p></div><div class="footnote"><p><sup>[<a id="ftn.id3023036" href="#id3023036">31</a>] </sup>… or maybe even a section of a book …</p></div></div></div>
<div id="adsense_bottom">
<script type="text/javascript"><!--
// Text Ad: Medium Rectangle (300x250)
google_ad_client = "pub-0505104349866057";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_channel = "";
google_color_border = "ffffff";
google_color_bg = "ffffff";
google_color_link = "0000ff";
google_color_url = "000000";
google_color_text = "000000";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>

<div class="navfooter"><hr /><table width="100%" summary="Navigation footer"><tr><td width="40%" align="left"><a accesskey="p" href="ch07.html">Prev</a> </td><td width="20%" align="center"><a accesskey="u" href="ch07.html">Up</a></td><td width="40%" align="right"> <a accesskey="n" href="ch07s03.html">Next</a></td></tr><tr><td width="40%" align="left" valign="top">Chapter 7. Advanced Topics </td><td width="20%" align="center"><a accesskey="h" href="index.html">Home</a></td><td width="40%" align="right" valign="top"> Peg and Operative Revisions</td></tr></table></div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
<script type="text/javascript">
_uacct = "UA-557726-1";
urchinTracker();
</script>
</body></html>

<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
  <title>BoilerPlate</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
  <link rel="stylesheet" type="text/css" href="demo/stylesheets/boilerplate.css" />
  <style type="text/css">
  /* <![CDATA[ */

body {
  margin: 1em;
}

p, ul, img {
  margin-bottom: 1.5em;
}

h1, h2, h3 {
  margin-top: 2em;
  margin-bottom: 1em;
}

h1 {
  margin-top: 1em;
}

a:link, a:visited, a:hover {
  text-decoration: underline;
}

ul, dl {
  margin-left: 2em;
}

dt {
  font-weight: bold;
}

  /* ]]> */
  </style>
</head>
<body>

  <h1>BoilerPlate &mdash; easy data-centric applications on Rails</h1>

  <p>
    <tt>BoilerPlate</tt> is a framework on top of 
    <a href="http://www.rubyonrails.org/">Ruby on Rails</a>
    that is intended to make development of data-centric applications 
    as easy as possible.
  </p>
  <p>
    Some technicalities can be found in the
    <a href="readme.html">README</a>.
    For the scenic route, see
    <a href="#guided_tour">below</a>.
  </p>
  
  <h2>Status</h2>
  <p>
    By now, BoilerPlate itself has died, but it lives on in a few plugins
    that I've published. Please see 
    <a href="http://rubyforge.org/users/mschuerig/">my page at RubyForge</a>.
  </p>

  <h2><a name="requirements">Requirements</a></h2>
  
  <dl>
    <dt>Rails</dt>
    <dd>Currently, <tt>BoilerPlate</tt> needs a patched version of
      Rails SVN HEAD. It's included in the download.
    </dd>
    <dt>libgettext-ruby</dt>
    <dd>get it from <a href="http://ponx.s5.xrea.com/hiki/ruby-gettext.html">its home page</a>. If you are using Debian/Linux, a package is available.</dd>
    <dt>ruby-json</dt>
    <dd>available as a gem from <a href="http://gems.rubyforge.org/">RubyForge</a>.</dd>
    <dt>libalgorithm-diff</dt>
    <dd>available <a href="http://users.cybercity.dk/~dsl8950/ruby/diff.html">here</a> or as a Debian/Linux package.</dd>
    <dt>MySQL</dt>
    <dd>only for the demo app; otherwise PostgreSQL works, too.</i></dd>
  </dl>
  
  <h2><a name="download">Download</a></h2>
  
  <ul>
    <li>
      BoilerPlate 0.2.0 (2005-08-21)
      <a href="boilerplate-0.2.0.zip">ZIP</a>,
      <a href="boilerplate-0.2.0.tar.gz">TAR.GZ</a>
    </li>
    <li>
      BoilerPlate 0.1.0 
      <a href="boilerplate-0.1.0.zip">ZIP</a>,
      <a href="boilerplate-0.1.0.tar.gz">TAR.GZ</a>
      -- pretty much outdated by now, but still gives an idea of what it
      is meant to be.
    </li>
  </ul>
  
  <h2><a name="guided_tour">Guided Tour</a></h2>
  
  <p>
    Being in its early childhood, <tt>BoilerPlate</tt> is still rather
    <em>browser shy</em>. It looks and works as intended in
    <a href="http://www.mozilla.org/products/firefox/">Mozilla Firefox</a> and
    <a href="http://konqueror.org/">Konqueror</a>.
    In Internet Explorer it will probably present itself as an angry fruit salad
    with bad manners.
  </p>
  <p>
    Currently, I can't host a live demo. To overcome this a bit, I've set up
    a couple of static demo pages. These are essentially saved versions of
    pages generated by the demo application.
    I have tweaked them somewhat to avoid the most egregious errors, but
    they will contain dead links and produce errors on some actions.
    For the list views, client-side column reordering is switched on; normally
    this is done on the server.
  </p>

  <h3><a name="list">A simple list</a></h3>
    <a href="demo/list_tasks.html">
      <img src="list_tasks.jpg" border="0" alt="" />
    </a>

  <p>
    Here's all the code from <tt>app/views/tasks/list.rhtml</tt>
    needed to create this view. 
    No need to write it yourself as it gets generated.
  </p>

  <pre class="code">
&lt;%
  @page_title = 'Tasks'
%&gt;

&lt;div id=&quot;entitylist&quot;&gt;
  &lt;%= render :partial =&gt; 'shared/entity_list' %&gt;
&lt;/div&gt;
  </pre>

  <p>
    Well, okay, that's not all. The controller needs to support it
    somewhat:
  </p>

  <pre class="code">
class TasksController < ApplicationController
  layout :standard_layout

  define_list_action :list, Task,
    { :path => 'description', :inline => '<%= truncate(object, 30, BoilerPlate::Unicode::Constants::HORIZONTAL_ELLIPSIS) %>'},
    { :path => 'due_date', :partial => 'shared/short_date'},
    { :path => 'category.name', :title => _('Category'), :type => :string, :include => :category },
    { :path => 'status.name', :title => _('Status'), :type => :enum, :include => :status }

  ...
end
  </pre>

  <p>
    Beyond that, however, you don't need any more code.
  </p>


    <h3><a name="list-reordering">Reordering columns</a></h3>
    <p>
      Table columns can be reordered by drag &amp; drop.
    </p>
    <a href="demo/list_tasks.html">
      <img src="list_tasks_reorder.jpg" border="0" alt="" />
    </a>

    <h3><a name="filter">Filter popups</a></h3>
    <p>
      Filter the displayed rows by certain criteria.
    </p>
    <a href="demo/list_tasks.html">
      <img src="list_tasks_filter.jpg" border="0" alt="" />
    </a>

    <h3><a name="form">A form</a></h3>
    <p>
      A form for creating a new object.
      Input elements with (client-side) validation errors are marked red(ish).
    </p>
    <a href="demo/form_employee.html">
      <img src="form_employee_new.jpg" border="0" alt="" />
    </a>
    <p>
      The code for <tt>app/views/employees/_form.rhtml</tt>:
    </p>

    <pre class="code">
&lt;!--[form:employee]--&gt;

&lt;%= labeled_text_field 'employee', 'lastname', :label =&gt; _('Last name'),
    :validation_message =&gt; _('Please enter a last name in this field.') %&gt;
&lt;%= labeled_text_field 'employee', 'firstname', :label =&gt; _('First name'),
    :validation_message =&gt; _('Please enter a first name in this field.') %&gt;
&lt;%= labeled_gender_choice 'employee', 'gender',
    :validation_message =&gt; _('Please choose one option.') %&gt;

&lt;% collapsible_fieldset(:legend =&gt; _('Address'), :except =&gt; 'new', :valid =&gt; @address) do %&gt;
  &lt;%= render :partial =&gt; 'shared/address', :object =&gt; @address %&gt;
&lt;% end %&gt;

&lt;%= labeled_association_target_chooser 'employee', 'manager', { :label =&gt; _('Managed by') }, :action =&gt; :manager_candidates %&gt;

&lt;% collapsible_fieldset(:legend =&gt; _('Assigned Tasks'), :only =&gt; 'new') do %&gt;
  &lt;%= association_targets_chooser_with_query 'employee', 'tasks', :text_method =&gt; :description, :action =&gt; :task_candidates %&gt;
&lt;% end -%&gt;

&lt;%= version_lock 'employee', 'address' %&gt;

&lt;!--[eoform:employee]--&gt;
    </pre>

    <p>
      Code for <tt>new.rhtml</tt> and <tt>edit.rhtml</tt> is generated.
    </p>


    <h3><a name="assoc">Choosing an association target</a></h3>
    <p>
      Choose an associated object.
      There's AJAX in there...
    </p>
    <a href="demo/form_employee.html">
      <img src="form_employee_popup.jpg" border="0" alt="" />
    </a>

    <h3><a name="habtm">Having and belonging to many</a></h3>
    <a href="demo/form_employee.html">
      <img src="form_habtm.jpg" border="0" alt="" />
    </a>
    <p>
      No extra code is required in the controller to handle this.
    </p>

  <h3><a name="conflict">Handling update conflicts</a></h3>
    <p>
      With optimistic locking there's always the possibility of conflicts.
      Some other user may have changed or deleted an object just while
      you're editing it yourself.
      <tt>BoilerPlate</tt> tells you when this has happened and allows
      you to clean up the conflict.
    </p>
    <a href="demo/form_task.html">
      <img src="form_task_conflict.jpg" border="0" alt="" />
    </a>
    <p>
      There's nothing spectacular in the form itself.
    </p>
    <pre class="code">
&lt;!--[form:task]--&gt;

&lt;%= labeled_calendar_field 'task', 'due_date', {}, :class =&gt; 'mandatory' %&gt;
&lt;%= labeled_text_area 'task', 'description', {}, :rows =&gt; 5 %&gt;
&lt;%= labeled_select 'task', 'status', :class =&gt; 'mandatory' %&gt;
&lt;%= labeled_tree_navigator 'task', 'category', {}, :initially_collapsed =&gt; (@action_name == 'edit') %&gt;

&lt;%= version_lock 'task' %&gt;

&lt;!--[eoform:task]--&gt;
    </pre>

    <p>
      And the code in the controller looks pretty easy, too.
    </p>
    <pre class="code">
  def update
    @task = Task.find(params[:id])
    result = update_optimistically(@task, params[:task])
    handle_update_result(result, [:task])
  end
    </pre>

  <h3><a name="treenav">Tree Navigator</a></h3>
  <p>
    The code above already contains the tree navigator.
    In the screenshot above it is collapsed; below is what it looks
    like when expanded. Levels are loaded dynamically via AJAX requests.
  </p>
  <img src="form_treenav.jpg" border="0" alt="" />
  <p>
    The controller needs this bit of code to service the request.
  </p>
  <pre class="code">
  define_ajax_action :child_categories, Category, {
    :conditions =&gt; [ 'parent_id = ?' ],
    :condition_values =&gt; [ :id ],
    :partial =&gt; 'categories',
    :default_response =&gt; ' '
  }
  </pre>


<h2><a name="author">About the author...</a></h2>

<p>
  I'm Michael Sch&uuml;rig, a software developer located in Bonn/Germany.
  If you'd like to get an idea of what I do and what I'm interested in,
  please visit <a href="http://www.schuerig.de/michael/">my home page</a>.
  Available for hire.
</p>


<h2>License</h2>

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
See <a href="http://www.gnu.org/copyleft/lesser.html">http://www.gnu.org/copyleft/lesser.html</a>


</body>
</html>
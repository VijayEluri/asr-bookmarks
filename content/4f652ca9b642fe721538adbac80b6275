<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">










<head><script type="text/javascript">_cf_loadingtexthtml="<img alt=' ' src='/CFIDE/scripts/ajax/resources/cf/images/loading.gif'/>";
_cf_contextpath="";
_cf_ajaxscriptsrc="/CFIDE/scripts/ajax";
_cf_jsonprefix='//';
</script><script type="text/javascript" src="/CFIDE/scripts/ajax/yui/yahoo-dom-event/yahoo-dom-event.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/messages/cfmessage.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/package/cfajax.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/yui/animation/animation-min.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/adapter/yui/ext-yui-adapter.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/ext-core.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/package/resizable.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/package/dragdrop/dragdrop.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/package/util.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/build/state/State-min.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/package/widget-core.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/ext/package/dialog/dialogs.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/ajax/package/cfwindow.js"></script>
<link rel="stylesheet" type="text/css" href="/CFIDE/scripts/ajax/resources/ext/css/ext-all.css" />
<link rel="stylesheet" type="text/css" href="/CFIDE/scripts/ajax/resources/cf/cf.css" />
<script type="text/javascript" src="/CFIDE/scripts/cfform.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/masks.js"></script>
<script type="text/javascript" src="/CFIDE/scripts/cfformhistory.js"></script>

	  
	  <title>A Call to Arms - ACM Queue</title>
	  <meta name='description' value='Long anticipated, the arrival of radically restructured database architectures is now finally at hand.' />
	  <meta name='keywords' value='Databases' />

   	  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="shortcut icon" href="favicon.ico" />

<link rel="stylesheet" type="text/css" media="all" href="css/acmq-cachekey4260.css" />
<link rel="stylesheet" type="text/css" media="print" href="css/acmq_print-cachekey1777.css" />

<script type="text/javascript" src="js/jquery-1.2.6.min.js"></script>
<script type="text/javascript" src="js/jquery.validate.min.js"></script>
<script type="text/javascript" src="js/global.js"></script>



<link rel="alternate" type="application/rss+xml" title="Latest Queue Content RSS 2.0" href="rss/feeds/latestitems.xml" />
<link rel="alternate" type="application/rss+xml" title="All Queue Content RSS 2.0" href="rss/feeds/queuecontent.xml" />
<link rel="alternate" type="application/rss+xml" title="Curmudgeon RSS 2.0"     href="rss/feeds/curmudgeon.xml" />
<link rel="alternate" type="application/rss+xml" title="Opinion RSS 2.0"        href="rss/feeds/opinion.xml" />
<link rel="alternate" type="application/rss+xml" title="Kode Vicious RSS 2.0"   href="rss/feeds/kodevicious.xml" />
<link rel="alternate" type="application/rss+xml" title="ACM TechNews RSS"       href="http://www.infoinc.com/acm/TechNews.rss" />
<link rel="alternate" type="application/rss+xml" title="Washington Updates RSS" href="http://usacm.acm.org/weblog2/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="RISKS Forum RSS"        href="rss/feeds/risksforum.xml" />


<link rel="alternate" type="application/rss+xml" title="AI RSS 2.0"        href="rss/feeds/ai.xml" />

<link rel="alternate" type="application/rss+xml" title="API Design RSS 2.0"        href="rss/feeds/apidesign.xml" />

<link rel="alternate" type="application/rss+xml" title="Bioscience RSS 2.0"        href="rss/feeds/bioscience.xml" />

<link rel="alternate" type="application/rss+xml" title="Compliance RSS 2.0"        href="rss/feeds/compliance.xml" />

<link rel="alternate" type="application/rss+xml" title="Component Technologies RSS 2.0"        href="rss/feeds/componenttechnologies.xml" />

<link rel="alternate" type="application/rss+xml" title="Computer Architecture RSS 2.0"        href="rss/feeds/computerarchitecture.xml" />

<link rel="alternate" type="application/rss+xml" title="Concurrency RSS 2.0"        href="rss/feeds/concurrency.xml" />

<link rel="alternate" type="application/rss+xml" title="DSPs RSS 2.0"        href="rss/feeds/dsps.xml" />

<link rel="alternate" type="application/rss+xml" title="Databases RSS 2.0"        href="rss/feeds/databases.xml" />

<link rel="alternate" type="application/rss+xml" title="Development RSS 2.0"        href="rss/feeds/development.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Computing RSS 2.0"        href="rss/feeds/distributedcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Distributed Development RSS 2.0"        href="rss/feeds/distributeddevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Email and IM RSS 2.0"        href="rss/feeds/emailandim.xml" />

<link rel="alternate" type="application/rss+xml" title="Embedded Systems RSS 2.0"        href="rss/feeds/embeddedsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Failure and Recovery RSS 2.0"        href="rss/feeds/failureandrecovery.xml" />

<link rel="alternate" type="application/rss+xml" title="File Systems and Storage RSS 2.0"        href="rss/feeds/filesystemsandstorage.xml" />

<link rel="alternate" type="application/rss+xml" title="Game Development RSS 2.0"        href="rss/feeds/gamedevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Graphics RSS 2.0"        href="rss/feeds/graphics.xml" />

<link rel="alternate" type="application/rss+xml" title="HCI RSS 2.0"        href="rss/feeds/hci.xml" />

<link rel="alternate" type="application/rss+xml" title="Managing Megaservices RSS 2.0"        href="rss/feeds/managingmegaservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Mobile Computing RSS 2.0"        href="rss/feeds/mobilecomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="Networks RSS 2.0"        href="rss/feeds/networks.xml" />

<link rel="alternate" type="application/rss+xml" title="Object-Relational Mapping RSS 2.0"        href="rss/feeds/object-relationalmapping.xml" />

<link rel="alternate" type="application/rss+xml" title="Open Source RSS 2.0"        href="rss/feeds/opensource.xml" />

<link rel="alternate" type="application/rss+xml" title="Patching and Deployment RSS 2.0"        href="rss/feeds/patchinganddeployment.xml" />

<link rel="alternate" type="application/rss+xml" title="Performance RSS 2.0"        href="rss/feeds/performance.xml" />

<link rel="alternate" type="application/rss+xml" title="Power Management RSS 2.0"        href="rss/feeds/powermanagement.xml" />

<link rel="alternate" type="application/rss+xml" title="Privacy and Rights RSS 2.0"        href="rss/feeds/privacyandrights.xml" />

<link rel="alternate" type="application/rss+xml" title="Processors RSS 2.0"        href="rss/feeds/processors.xml" />

<link rel="alternate" type="application/rss+xml" title="Programming Languages RSS 2.0"        href="rss/feeds/programminglanguages.xml" />

<link rel="alternate" type="application/rss+xml" title="Purpose-built Systems RSS 2.0"        href="rss/feeds/purpose-builtsystems.xml" />

<link rel="alternate" type="application/rss+xml" title="Quality Assurance RSS 2.0"        href="rss/feeds/qualityassurance.xml" />

<link rel="alternate" type="application/rss+xml" title="RFID RSS 2.0"        href="rss/feeds/rfid.xml" />

<link rel="alternate" type="application/rss+xml" title="SIP RSS 2.0"        href="rss/feeds/sip.xml" />

<link rel="alternate" type="application/rss+xml" title="Search Engines RSS 2.0"        href="rss/feeds/searchengines.xml" />

<link rel="alternate" type="application/rss+xml" title="Security RSS 2.0"        href="rss/feeds/security.xml" />

<link rel="alternate" type="application/rss+xml" title="Semi-structured Data RSS 2.0"        href="rss/feeds/semi-structureddata.xml" />

<link rel="alternate" type="application/rss+xml" title="Social Computing RSS 2.0"        href="rss/feeds/socialcomputing.xml" />

<link rel="alternate" type="application/rss+xml" title="System Administration RSS 2.0"        href="rss/feeds/systemadministration.xml" />

<link rel="alternate" type="application/rss+xml" title="System Evolution RSS 2.0"        href="rss/feeds/systemevolution.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtual Machines RSS 2.0"        href="rss/feeds/virtualmachines.xml" />

<link rel="alternate" type="application/rss+xml" title="Virtualization RSS 2.0"        href="rss/feeds/virtualization.xml" />

<link rel="alternate" type="application/rss+xml" title="VoIP RSS 2.0"        href="rss/feeds/voip.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Development RSS 2.0"        href="rss/feeds/webdevelopment.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Security RSS 2.0"        href="rss/feeds/websecurity.xml" />

<link rel="alternate" type="application/rss+xml" title="Web Services RSS 2.0"        href="rss/feeds/webservices.xml" />

<link rel="alternate" type="application/rss+xml" title="Workflow Systems RSS 2.0"        href="rss/feeds/workflowsystems.xml" />




<script type="text/javascript">
	ColdFusion.Ajax.importTag('CFWINDOW');
</script>

<script type="text/javascript">
	var _cf_window_init_1292622902002=function()
	{
		_cf_bind_init_1292622902003=function()
		{
			ColdFusion.Bind.register([],{'bindTo':'morethemes_body','bindExpr':['pullthemes.cfm']},ColdFusion.Bind.urlBindHandler,false);
		};ColdFusion.Event.registerOnLoad(_cf_bind_init_1292622902003);var _cf_window=ColdFusion.Window.create('morethemes','','pullthemes.cfm',{ modal:false, closable:true, divid:'cf_window1292622902001', draggable:true, resizable:true, fixedcenter:false, width:350, height:350, shadow:true, bodystyle:'text-align: left; font: 96%/1.5 Verdana, Arial, sans-serif; list-style: none; color:#3281A1;', callfromtag:true, minwidth:0, minheight:0, initshow:false, x:225, y:175});
	};ColdFusion.Event.registerOnLoad(_cf_window_init_1292622902002);
</script>

		<script type="text/javascript">
			ColdFusion.Ajax.importTag('CFFORM');
		</script>
		
		<script type="text/javascript">
			if (window.ColdFusion) ColdFusion.required['add_email']=true;
		</script>
		<script type="text/javascript">
<!--
    _CF_checkCFForm_1 = function(_CF_this)
    {
        //reset on submit
        _CF_error_exists = false;
        _CF_error_messages = new Array();
        _CF_error_fields = new Object();
        _CF_FirstErrorField = null;

        //form element add_email required check
        if( _CF_hasValue(_CF_this['add_email'], "TEXT", false ) )
        {
            //form element add_email 'EMAIL' validation checks
            if (!_CF_checkEmail(_CF_this['add_email'].value, true))
            {
                _CF_onError(_CF_this, "add_email", _CF_this['add_email'].value, "Please enter a properly formatted E-mail address");
                _CF_error_exists = true;
            }

        }else {
            _CF_onError(_CF_this, "add_email", _CF_this['add_email'].value, "Please enter a properly formatted E-mail address");
            _CF_error_exists = true;
        }


        //display error messages and return success
        if( _CF_error_exists )
        {
            if( _CF_error_messages.length > 0 )
            {
                // show alert() message
                _CF_onErrorAlert(_CF_error_messages);
                // set focus to first form error, if the field supports js focus().
                if( _CF_this[_CF_FirstErrorField].type == "text" )
                { _CF_this[_CF_FirstErrorField].focus(); }

            }
            return false;
        }else {
            return true;
        }
    }
//-->
</script>

		<script type="text/javascript">
			if (window.ColdFusion) ColdFusion.required['add_email']=true;
		</script>
		<script type="text/javascript">
<!--
    _CF_checkCFForm_2 = function(_CF_this)
    {
        //reset on submit
        _CF_error_exists = false;
        _CF_error_messages = new Array();
        _CF_error_fields = new Object();
        _CF_FirstErrorField = null;

        //form element add_email required check
        if( _CF_hasValue(_CF_this['add_email'], "TEXT", false ) )
        {
            //form element add_email 'EMAIL' validation checks
            if (!_CF_checkEmail(_CF_this['add_email'].value, true))
            {
                _CF_onError(_CF_this, "add_email", _CF_this['add_email'].value, "Please enter a properly formatted E-mail address");
                _CF_error_exists = true;
            }

        }else {
            _CF_onError(_CF_this, "add_email", _CF_this['add_email'].value, "Please enter a properly formatted E-mail address");
            _CF_error_exists = true;
        }


        //display error messages and return success
        if( _CF_error_exists )
        {
            if( _CF_error_messages.length > 0 )
            {
                // show alert() message
                _CF_onErrorAlert(_CF_error_messages);
                // set focus to first form error, if the field supports js focus().
                if( _CF_this[_CF_FirstErrorField].type == "text" )
                { _CF_this[_CF_FirstErrorField].focus(); }

            }
            return false;
        }else {
            return true;
        }
    }
//-->
</script>
<script type='text/javascript' src='/cfformprotect/js/mouseMovement.js'></script><script type='text/javascript' src='/cfformprotect/js/usedKeyboard.js'></script>
		<script type="text/javascript">
			if (window.ColdFusion) ColdFusion.required['username']=true;
		</script>
		
		<script type="text/javascript">
			if (window.ColdFusion) ColdFusion.required['email']=true;
		</script>
		
		<script type="text/javascript">
			if (window.ColdFusion) ColdFusion.required['body_text']=true;
		</script>
		
		<script type="text/javascript">
			var _cf_SUBMIT_init_1292622902006=function()
			{
				ColdFusion.setSubmitClicked('edit_form','discussion_reply:method');
			};ColdFusion.Event.registerOnLoad(_cf_SUBMIT_init_1292622902006);
		</script>
		<script type="text/javascript">
<!--
    _CF_submit_status["edit_form"]=null;
    _CF_checkedit_form = function(_CF_this)
    {
        //return false if form submit button has already been pressed once
        if( _CF_submit_status[_CF_this.name] == "submitting" ) return false;
        //reset on submit
        _CF_submit_status[_CF_this.name] = "submitting";
        _CF_error_exists = false;
        _CF_error_messages = new Array();
        _CF_error_fields = new Object();
        _CF_FirstErrorField = null;

        //form element Creator required check
        if( !_CF_hasValue(_CF_this['Creator'], "TEXT", false ) )
        {
            _CF_onError(_CF_this, "Creator", _CF_this['Creator'].value, "Name is required.");
            _CF_error_exists = true;
        }

        //form element email required check
        if( _CF_hasValue(_CF_this['email'], "TEXT", false ) )
        {
            //form element email 'EMAIL' validation checks
            if (!_CF_checkEmail(_CF_this['email'].value, true))
            {
                _CF_onError(_CF_this, "email", _CF_this['email'].value, "Please enter a properly formatted E-mail address");
                _CF_error_exists = true;
            }

        }else {
            _CF_onError(_CF_this, "email", _CF_this['email'].value, "Please enter a properly formatted E-mail address");
            _CF_error_exists = true;
        }

        //form element body_text required check
        if( !_CF_hasValue(_CF_this['body_text'], "TEXTAREA", false ) )
        {
            _CF_onError(_CF_this, "body_text", _CF_this['body_text'].value, "Please enter your Comment, (HTML is not allowed)");
            _CF_error_exists = true;
        }


        //display error messages and return success
        if( _CF_error_exists )
        {
            if( _CF_error_messages.length > 0 )
            {
                // show alert() message
                _CF_onErrorAlert(_CF_error_messages);
                // set focus to first form error, if the field supports js focus().
                if( _CF_this[_CF_FirstErrorField].type == "text" )
                { _CF_this[_CF_FirstErrorField].focus(); }

                _CF_submit_status[_CF_this.name] = null;
            }
            return false;
        }else {
            return true;
        }
    }
//-->
</script>
</head>

<body class="wide" id="A Call to Arms">
   <div id="wrapperhp">
         <div id="header">

      <a id="brand" href="index.cfm">ACM Queue
      <span>Architecting Tomorrow's Computing</span></a>

	
     <ul id="nav-utility">
        <li id="acm-link">
          <a href="whyjoinacm.cfm">ACM : Association for Computing Machinery</a>
        </li>
		<li class="first">
         
        </li>
      </ul><br />

      <div id="wrap-nav">
      <ul id="nav-primary">
        
		<li id="nav-home" style='width:25%;'>
          <a href="index.cfm">Home</a>
        </li>
       
        <li id="nav-audiocasts" style='width:25%;'>
          <a href="listing.cfm?qc_type=audiocasts&page_title=Audiocasts">Audiocasts</a>
        </li>
        <li id="nav-videos" style='width:25%;'>
          <a href="listing.cfm?qc_type=videos&page_title=Videos">Videos</a>
        </li>
		 <li id="nav-blogs" style='width:25%;'>
          <a href="blogs.cfm">Blogs</a>
        </li>
        
      </ul>
    </div>
   <div id="message-wrap">

     <a href='http://www.acm.org/joinacm2' target='_new'>A Special Offer to Join ACM</a>
 &nbsp; &nbsp; &nbsp;
     <a href="whyjoinacm.cfm">Why Join ACM?</a>
	</div>
	 <div id="search-wrap">
    <form id="form-search" name="searchform" action="results.cfm">
		<fieldset>
			<label for="q">Search</label>
			<input name="SearchableText" type="text" class="text" id="q" /><button type="submit" value="Search">Search</button>
		</fieldset>
	</form>
	</div>
 </div>

		      

	  



	  <div id="nav-secondary">
      <div id="sitenav">

		<a class="rss-inline" href="rssfeeds.cfm">Site Feeds</a>
		<br />
		<a style="-moz-background-clip:border; -moz-background-inline-policy:continuous; -moz-background-origin:padding; background:transparent url(/img/twitter-t.png) no-repeat scroll 0 0; padding-left:16px;" target="_blank" href="http://twitter.com/ACMQueue">Twitter feed</a>

	  <h4>Browse Topics</h4>
      <ul class="topic-list">
	  	
        
		
		
	    <li>
          <a href="listing.cfm?item_topic=Networks&qc_type=theme_list&filter=Networks&page_title=Networks&order=desc">Networks</a>
        </li>
		
      	
		
	    <li>
          <a href="listing.cfm?item_topic=System Administration&qc_type=theme_list&filter=System Administration&page_title=System Administration&order=desc">System Administration</a>
        </li>
		
      	
		
	    <li>
          <a href="listing.cfm?item_topic=HCI&qc_type=theme_list&filter=HCI&page_title=HCI&order=desc">HCI</a>
        </li>
		
      	
		
	    <li>
          <a href="listing.cfm?item_topic=Graphics&qc_type=theme_list&filter=Graphics&page_title=Graphics&order=desc">Graphics</a>
        </li>
		
      	
		
	    <li>
          <a href="listing.cfm?item_topic=Security&qc_type=theme_list&filter=Security&page_title=Security&order=desc">Security</a>
        </li>
		
      	
		
	    <li>
          <a href="listing.cfm?item_topic=Programming Languages&qc_type=theme_list&filter=Programming Languages&page_title=Programming Languages&order=desc">Programming Languages</a>
        </li>
		
		
		<div  id="cf_window1292622902001" class="yuiextdlg">
	
	<div  id="morethemes_title" class="x-dlg-hd">
		
	 </div>
	<div  id="morethemes_body" class="x-dlg-bd">
		
		
	 </div>
 </div>

		<li>
		   <a class="morethemes" id="morethemes" name="morethemes" href="javascript:ColdFusion.Window.show('morethemes')">Full List of Topics</a>
        </li>
      </ul>

      <h4>Columns</h4>
      <ul>
        <li>
          <a href="listing.cfm?typefilter=Thebikeshed&sort=publication_date&order=desc&qc_type=Thebikeshed&article_type=&item_topic=all&filter_type=topic&page_title=The Bikeshed&filter=all">The Bikeshed</a>
        </li>
        <li>
          <a href="listing.cfm?typefilter=Kodevicious&sort=publication_date&order=desc&qc_type=Kodevicious&article_type=&item_topic=all&filter_type=topic&page_title=Kode Vicious&filter=all">Kode Vicious</a>
        </li>
        <li>
          <a href="listing.cfm?typefilter=curmudgeon&sort=publication_date&order=desc&qc_type=curmudgeon&article_type=&item_topic=all&filter_type=topic&page_title=Curmudgeon&filter=all">Curmudgeon</a>
	    </li>
        <li>
          <a href="listing.cfm?typefilter=Opinion&sort=publication_date&order=desc&qc_type=opinion&article_type=&item_topic=all&filter_type=topic&page_title=Opinion&filter=all">Opinion</a>
        </li>
      </ul>

	  <h4>Discussions</h4>
		<ul>
			<li>
                 <a href="listing.cfm?typefilter=ctoroundtable&sort=publication_date&order=desc&qc_type=ctoroundtable&article_type=&item_topic=all&filter_type=topic&page_title=CTO Roundtables&filter=all">CTO Roundtables</a>
            </li>
			<li>
                 <a href="listing.cfm?typefilter=casestudy&sort=publication_date&order=desc&qc_type=casestudy&article_type=&item_topic=all&filter_type=topic&page_title=Case Studies&filter=all">Case Studies</a>
            </li>
			<li>
                  <a href="listing.cfm?qc_type=interviews&page_title=Interviews">Interviews</a>
            </li>
		</ul>

	<div>
	<h4>Latest Comments</h4>
<ul>



 
 
	 
		  
	 

	

		

			
			

			

			

			

			

			

			
				<li style='font-size:0.87em;margin-top:8px;'>
				- &quot;Josh,

This type of caching and acceleration, while interestingV...&quot;
				<a href='/detail.cfm?id=1900007'>Bound by the Speed of Light</a>
				</li>
			

		

  
	 
		  
		

	

		

			
			

			

			

			

			

			

			
				<li style='font-size:0.87em;margin-top:8px;'>
				- &quot;kv, you should look into doing a riverbed demo.  the products ak...&quot;
				<a href='/detail.cfm?id=1900007'>Bound by the Speed of Light</a>
				</li>
			

		

  
	 
		  
	 

	

		

			
			

			

			

			

			

			

			
				<li style='font-size:0.87em;margin-top:8px;'>
				- &quot;I feel that Cloud Computing eliminates half of the obstacles th....&quot;
				<a href='/detail.cfm?id=988407'>Why Writing Your Own Search Engine Is Hard</a>
				</li>
			

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
	 
		  
		

	

		

  
	 
		  
	 

	

		

  
</ul>

	</div>

	  <h4>Archive</h4>
      <ul>
        <li>
          
		  <a href="issuedetail.cfm?issue=1898147">Current Issue</a>
		  
        </li>
        <li>
          <a href="pastissues.cfm">Past Issues</a>
        </li>
		 <li>
          <a href="listing.cfm">Articles</a>&nbsp;(Full Listing)
        </li>
      </ul>

      <h4>other acm Links</h4>
      <ul>
        <li>
          <a href="http://cacm.acm.org/">CACM</a>
        </li>
        <li>
          <a href="technews.cfm">ACM TechNews</a>
        </li>
        <li>
          <a href="dcupdates.cfm">Washington Updates</a>
        </li>
        <li>
          <a href="risksforum.cfm">RISKS Forum</a>
        </li>
      </ul>

    </div>

		<div  id="layoutsu">
	
	
		  <div  id="cf_layoutarea1292622902004" style="overflow:auto;">
		
		
	      <div id="emailsignup" class="promo divider">

	      <h5>
	        <span>Sign up for QueueNews</span>
	      </h5>
	      <p>Our free weekly newsletter showcases all of ACM Queue's latest articles and columns.</p>
		  <form id="form-emailsignup" action="newssignup.cfm" method="post" target="_blank" onsubmit="return ColdFusion.Ajax.checkForm(this, _CF_checkCFForm_1,'cf_layoutarea1292622902004')">
	        <fieldset>
<!--
	          <label for="add_email">Your Email</label>
-->
	          Your Email:
	          <input name="add_email" type="text" class="text"  id="add_email"  />

	          <input class="text" id="list_name" name="list_name" type="hidden" value="QUEUENEWS" />
	          <button type="submit" value="Sign Up">
	            <span>Sign Up</span>
	          </button>
	        </fieldset>
	      </form>


	      <h5>
	        <span>Sign up for Queue-Updates</span>
	      </h5>
	      <p>Stay up to date on the latest developments at ACM Queue, including announcements about contests, interviews, and more.</p>
		  <form id="form-emailsignup" action="newssignup.cfm" method="post" target="_blank" onsubmit="return ColdFusion.Ajax.checkForm(this, _CF_checkCFForm_2,'cf_layoutarea1292622902004')">
	        <fieldset>
<!--
	          <label for="add_email">Your Email</label>
-->
	          Your Email:
	          <input name="add_email" type="text" class="text"  id="add_email"  />

	          <input class="text" id="list_name" name="list_name" type="hidden" value="QUEUE-UPDATES" />
	          <button type="submit" value="Sign Up">
	            <span>Sign Up</span>
	          </button>
	        </fieldset>
	      </form>


		 </div>

		 
	 </div>

		
 </div>

		<div>
			

<div class="section">

<div class="promo divider">

<!-- Sharepoint Feb 7-9 -->
<a href='http://www.sptechcon.com' target='_new'>
<img src="/ads/SPTechCon125x125.JPG" width="125" height="125" alt="Sharepoint Technology Conference" />
</a>

<!-- Android Feb 7-9 -->
<a href='http://www.andevcon.com' target='_new'>
<img src="/ads/Android125x125.jpg" width="125" height="125" alt="Android Developers Conference" />
</a>

<!-- O'Reilly Strata Feb 7-9 -->
<a href='http://strataconf.com/strata2011?cmp=mp-conf-st11-acm-q-banner-ad' target='_new'>
<img src="/ads/Strata125x125.jpg" width="125" height="125" alt="O'Reilly Strata Conference" />
</a>

<!-- Enterprise Connect Feb 7-9 -->
<a href='http://enterpriseconnect.com/orlando/?_mc=CNWTVR15' target='_new'>
<img src="/ads/EnterpriseConnect125x125.gif" width="125" height="125" alt="Enterprise Connect Conference" />
</a>



</div>

</div>




		</div>
    </div>

    <div>
        <div id="lead">


          
		  
		  <span id="leadbreak"></span>
          
          &nbsp; &nbsp; &nbsp;
		  <a class="descriptor" href="issuedetail.cfm?issue=1059791">view issue</a>
		  
          <h1 style='font-size: 1.3em; font-weight:bold;'>A Call to Arms<span></span>
          <br />
		  
          <a href="http://portal.acm.org/ft_gateway.cfm?id=1059805&type=pdf">
            <img src="img/icon_pdf.png" alt="Download PDF version of this article" />
          </a>
		  

		<!-- // Check for existence of associated MP3 file-->
		

		  </h1>


		  <div class="meta">
				
				
        		<p>
        		
        		<span>by <span>Jim Gray, Mark Compton</span> |</span>
            	
           		<span><nobr>April 21, 2005</nobr></span>
				</p>
				
				 <p>Topic:
	        		<span>Databases</span></p>
				
       	  </div>
          <!-- /.meta -->

           <!-- these get hooked up to js events -->		
<script type="text/javascript">
	addthis_pub             = 'acm'; 
	addthis_logo            = 'http://queue.acm.org/img/logo_queue_small.gif';
	addthis_logo_background = '#ffffff';
	addthis_logo_color      = '000000';
	addthis_brand           = 'ACM Queue';
	addthis_options         = 'favorites, email, slashdot, delicious, digg, technorati, blinklist, furl, reddit, myspace, facebook, google, live, more';
</script>
 <div id="wrap-content_action_bar">
      <ul id="useractions">
        <li>
          <a href="#content-comments">View&nbsp;Comments</a>
        </li>
        <li id="user-print">
          <a href="#">Print</a>
        </li>
		<li>
			
			<!-- ADDTHIS BUTTON BEGIN -->
			<a href="http://www.addthis.com/bookmark.php" onmouseover="return addthis_open(this, '', 'http://queue.acm.org/detail.cfm?id=1059805', '[TITLE]')" onmouseout="addthis_close()" onclick="return addthis_sendto()"><img src="http://s9.addthis.com/button1-share.gif" width="125" height="16" border="0" alt="" /></a>
			<script type="text/javascript" src="http://s7.addthis.com/js/152/addthis_widget.js"></script>
			<!-- ADDTHIS BUTTON END -->
			
		</li>
      </ul>
</div>

		
		
        </div>
	<!--lead -->

	<div id="primary">

<!-- EMail Link-->


		<div id="content">
			<div id="wrap-supplement">
				
					
















<div id="content-related">

	<h3>Recently on Slashdot</h3>

<br />

- <a href='http://developers.slashdot.org/story/10/10/31/2127201/Mr-Pike-Tear-Down-This-ASCII-Wall'>Please Step Away from the ASR-33!</a>

<br />

- <a href='http://developers.slashdot.org/story/10/06/14/2225251/Knuth-Got-It-Wrong'>You're Doing it Wrong</a>

<br />

- <a href='http://hardware.slashdot.org/story/10/06/02/2022229/Visualizing-System-Latency'>Visualizing System Latency</a>


<!--
<br />

- <a href='http://tech.slashdot.org/story/10/05/02/0120213/Robust-Timing-Over-the-Internet'>Principles of Robust Timing over the Internet</a>
- <a href='http://hardware.slashdot.org/story/10/02/25/2138238/ARM-Designer-Steve-Furber-On-Energy-Efficient-Computing'>A Conversation with Steve Furber</a>
-->




	<br /><br />

     <h3>Related Content</h3>

	   
	   <div class="block">
       		<div class="excerpt">
	          <h4>
	            <a href="detail.cfm?id=1868432">The Case Against Data Lock-in</a>
   		      </h4>
         		  
	          	  <p>Want to keep your users? Just make it easy for them to leave.</p>

			  <div class="meta">
	        		<p>
	            	<span>Brian W Fitzpatrick, JJ Lueck</span>
	            	</p>
	          </div>
	          <!-- /.meta -->
	        </div>
   	  </div>
	  
	   <div class="block">
       		<div class="excerpt">
	          <h4>
	            <a href="detail.cfm?id=1667562">Data in Flight</a>
   		      </h4>
         		  
	          	  <p>How streaming SQL technology can help solve the Web 2.0 data crunch.</p>

			  <div class="meta">
	        		<p>
	            	<span>Julian Hyde</span>
	            	</p>
	          </div>
	          <!-- /.meta -->
	        </div>
   	  </div>
	  
	   <div class="block">
       		<div class="excerpt">
	          <h4>
	            <a href="detail.cfm?id=1655240">Other People's Data</a>
   		      </h4>
         		  
	          	  <p>Companies have access to more types of external data than ever before. How can they integrate it most effectively?</p>

			  <div class="meta">
	        		<p>
	            	<span>Stephen Petschulat</span>
	            	</p>
	          </div>
	          <!-- /.meta -->
	        </div>
   	  </div>
	  
	   <div class="block">
       		<div class="excerpt">
	          <h4>
	            <a href="detail.cfm?id=1563874">The Pathologies of Big Data</a>
   		      </h4>
         		  
	          	  <p>Scale up your datasets enough and all your apps will come undone. What are the typical problems and where do the bottlenecks generally surface?</p>

			  <div class="meta">
	        		<p>
	            	<span>Adam Jacobs</span>
	            	</p>
	          </div>
	          <!-- /.meta -->
	        </div>
   	  </div>
	  

	   
	   
			  <div class="meta">
			  	  <a href="listing.cfm?item_topic=Databases&qc_type=theme_list&filter=Databases&page_title=Databases&order=desc"> <img alt="Databases"
                      class="floatRight"  src="focus_img/data.jpg " /></a>
			  </div>
	   		  
	   <h3>Browse this Topic:</h3>


		

	  <div class="block">
       		<div class="excerpt">
			  
			  <div class="meta">
			  	 
				  	   <h4><a href="listing.cfm?item_topic=Databases&qc_type=theme_list&filter=Databases&page_title=Databases&order=desc">Databases</a><br><br><br>
					   </h4>
			  </div>
	   		  
	       </div>
       </div>
 </div>
 
				
			</div>
			









	
	
		
		
		
	

<h1>A Call to Arms</h1><h2>Long anticipated, the arrival of radically restructured database architectures   is now finally at hand. </h2><h3>JIM GRAY, MICROSOFT <br>  MARK COMPTON, CONSULTANT</h3><p>We live in a time of extreme change, much of it precipitated by an avalanche   of information that otherwise threatens to swallow us whole. Under the mounting   onslaught, our traditional relational database constructs&#8212;always cumbersome   at best&#8212;are now clearly at risk of collapsing altogether. </P><P>  In fact, rarely do you find a DBMS anymore that doesn&#8217;t make provisions   for online analytic processing. Decision trees, Bayes nets, clustering, and   time-series analysis have also become part of the standard package, with allowances   for additional algorithms yet to come. Also, text, temporal, and spatial data   access methods have been added&#8212;along with associated probabilistic logic,   since a growing number of applications call for approximated results. Column   stores, which store data column-wise rather than record-wise, have enjoyed a   rebirth, mostly to accommodate sparse tables, as well as to optimize bandwidth.</P><P>  Is it any wonder classic relational database architectures are slowly sagging   to their knees?</P><P>  But wait&#8230; there&#8217;s more! A growing number of application developers   believe XML and XQuery should be treated as our primary data structure and access   pattern, respectively. At minimum, database systems will need to accommodate   that perspective. Also, as external data increasingly arrives as streams to   be compared with historical data, stream-processing operators are of necessity   being added. Publish/subscribe systems contribute further to the challenge by   inverting the traditional data/query ratios, requiring that incoming data be   compared against millions of queries instead of queries being used to search   through millions of records. Meanwhile, disk and memory capacities are growing   significantly faster than corresponding capabilities for reducing latency and   ensuring ample bandwidth. Accordingly, the modern database system increasingly   depends on massive main memory and sequential disk access.</P><P>  This all will require a new, much more dynamic query optimization strategy as   we move forward. It will have to be a strategy that&#8217;s readily adaptable   to changing conditions and preferences. The option of cleaving to some static   plan has simply become untenable. Also note that we&#8217;ll need to account   for intelligence increasingly migrating to the network periphery. Each disk   and sensor will effectively be able to function as a competent database machine.   As with all other database systems, each of these devices will also need to   be self-managing, self-healing, and always-up.</P><P>  No doubt, you&#8217;re starting to get the drift here. As must be obvious by   now, we truly have our work cut out for us to make all of this happen. That   said, we don&#8217;t have much of a choice&#8212;external forces are driving   these changes.</P><P> <strong>WELCOME TO THE REVOLUTIONS</strong></P><P>  The rise, fall, and rise of object-relational databases. We&#8217;ve enjoyed   an extended period of relative stasis where our agenda has amounted to little   more than &#8220;implement SQL better&#8221;&#8212;Michael Stonebraker, professor   at UC Berkeley and developer of Ingres, calls this the &#8220;polishing-the-round-ball&#8221;   era of database research and implementation. Well, friends, those days are over   now because databases have become the vehicles of choice for delivering integrated   application development environments. </P><P>  That&#8217;s to say that data and procedures are being joined at long last&#8212;albeit   perhaps by a shotgun wedding. The Java or common language runtimes have been   married to relational database engines so that the traditional EJB-SQL outside-inside   split has been eliminated. Now Beans or business logic can run inside the database.   Active databases are the result, and they offer tremendous potential&#8212;both   for good and for ill. (More about this as the discussion proceeds.) Our most   immediate challenge, however, stems from traditional relational databases never   being designed to allow for the commingling of data and algorithms.</P><P>  The problem starts, of course, with Cobol, with its data division and procedure   division&#8212;and the separate committees that were formed to define each.   Conway&#8217;s law was at work here: &#8220;Systems reflect the organizations   that built them.&#8221; So, the database community inherited the artificial   data-program segregation from the Cobol DBTG (Database Task Group). In effect,   databases were separated from their procedural twin at birth and have been struggling   ever since to reunite&#8212;for nearly 40 years now.</P><P>  The reunification process began in earnest back in the mid-1980s when stored   procedures were added to SQL (with all humble gratitude here to those brave,   hardy souls at Britton-Lee and Sybase). This was soon followed by a proliferation   of object-relational databases. By the mid-1990s, even many of the most notable   SQL vendors were adding objects to their own systems. Even though all of these   efforts were fine in their own right&#8212;and despite a wave of over-exuberant   claims of &#8220;object-oriented databases uber alles&#8221; by various industry   wags&#8212;each one in turn proved to be doomed by the same fundamental flaw:   the high risks inherently associated with all de novo language designs.</P><P>  It also didn&#8217;t help that most of the languages built into the early object-relational   databases were absolutely dreadful. Happily, there now are several good object-oriented   languages that are well implemented and offer excellent development environments.   Java and C# are two good examples. Significantly, one of the signature characteristics   of this most recent generation of OO environments is that they provide a common   language runtime capable of supporting good performance for nearly all languages.   </P><P>  The really big news here is that these languages have also been fully integrated   into the current crop of object-relational databases. The runtimes have actually   been added to the database engines themselves such that one can now write database   stored procedures (modules), while at the same time defining database objects   as classes within these languages. With data encapsulated in classes, you&#8217;re   suddenly able to actually program and debug SQL, using a persistent programming   environment that looks reassuringly familiar since it&#8217;s an extension of   either Java or C#. And yes, pause just a moment to consider: SQL programming   comes complete with version control, debugging, exception handling, and all   the other functionality you would typically associate with a fully productive   development environment. SQLJ, a nice integration of SQL and Java, is already   available&#8212;and even better ideas are in the pipeline.</P><P>  The beauty of this, of course, is that the whole inside-the-database/outside-the-database   dichotomy that we&#8217;ve been wrestling with over these past 40 years is becoming   a thing of the past. Now, fields are objects (values or references); records   are vectors of objects (fields); and tables are sequences of record objects.   Databases, in turn, are transforming into collections of tables. This objectified   view of database systems gives tremendous leverage&#8212;enough to enable many   of the other revolutions we&#8217;re about to discuss. That&#8217;s because,   with this new perspective, we gain a powerful way to structure and modularize   systems, especially the database systems themselves.</P><P>  A clean, object-oriented programming model also increases the power and potential   of database triggers, while at the same time making it much easier to construct   and debug triggers. This can be a two-edged sword, however. As the database   equivalent of rules-based programming, triggers are controversial&#8212;with   plenty of detractors as well as proponents. Those who hate triggers and the   active databases they enable will probably not be swayed by the argument that   a better language foundation is now available. For those who are believers in   active databases, however, it should be much easier to build systems.</P><P>  None of this would even be possible were it not for the fact that database system   architecture has been increasingly modularized and rationalized over the years.   This inherent modularity now enables the integration of databases with language   runtimes, along with all the various other ongoing revolutions that are set   forth in the pages that follow&#8212;every last one of them implemented as extensions   to the core data manager. </P><P>  TPlite rides again. Databases are encapsulated by business logic, which&#8212;before   the advent of stored procedures&#8212;always ran in the TP (transaction processing)   monitor. It was situated right in the middle of classic triple-tier presentation/application/data   architectures.</P><P>  With the introduction of stored procedures, the TP monitors themselves were   disintermediated by two-tier client/server architectures. Then, the pendulum   swung back as three-tier architectures returned to center stage with the emergence   of Web servers and HTTP&#8212;in part to handle protocol conversion between   HTTP and the database client/server protocols and to provide presentation services   (HTML) right on the Web servers, but also to provide the execution environment   for the EJB or COM business objects. </P><P>  As e-commerce has continued to evolve, most Web clients have transformed such   that today, in place of browsers blindly displaying whatever the server delivers,   you tend to find client application programs&#8212;often in JavaScript&#8212;that   have much of the presentation logic and that use XML to communicate with the   server. Although most e-commerce clients continue to screen-scrape so as to   extract data from Web pages, there is growing use of XML Web services as a way   to deliver data to fat-client applications. Just so, even though most Web services   today continue to be delivered by classic Web servers (Apache and Microsoft   IIS, for example), database systems are starting to listen to port 80 and directly   offer SOAP invocation interfaces. In this brave new world, you can take a class&#8212;or   a stored procedure that has been implemented within the database system&#8212;and   publish it on the Internet as a Web service (with the WSDL interface definition,   DISCO discovery, UDDI registration, and SOAP call stubs all being generated   automatically). So, the &#8220;TPlite&#8221; client/server model is making a   comeback, if you want it.</P><P>  Application developers still have the three-tier and n-tier design options available   to them, but now two-tier is an option again. For many applications, the simplicity   of the client/server approach is understandably attractive. Still, security   concerns&#8212;bearing in mind that databases offer vast attack surfaces&#8212;will   likely lead many designers to opt for three-tier server architectures that allow   only Web servers in the demilitarized zone and database systems to be safely   tucked away behind these Web servers on private networks. </P><P>  Still, the mind spins with all the possibilities our suddenly broadened horizons   seem to offer. For one thing, is it now possible&#8212;or even likely&#8212;that   Web services will end up being the means by which we federate heterogeneous   database systems? This is by no means certain, but it is intriguing enough to   have spawned a considerable amount of research activity. Among the fundamental   questions in play are: What is the right object model for a database? What is   the right way to represent information on the wire? How do schemas work on the   Internet? Accordingly, how might schemas be expected to evolve? How best to   find data and/or databases over the Internet?</P><P>  In all likelihood, you&#8217;re starting to appreciate that the ride ahead is   apt to get a bit bumpy. Strap on your seatbelt. You don&#8217;t even know the   half of it yet.</P><P>  Making sense of workflows. Because the Internet is a loosely coupled federation   of servers and clients, it&#8217;s just a fact of life that clients will occasionally   be disconnected. It&#8217;s also a fact that they must be able to continue functioning   throughout these interruptions. This suggests that, rather than tightly coupled,   RPC-based applications, software for the Internet must be constructed as asynchronous   tasks; they must be structured as workflows enabled by multiple autonomous agents.   To get a better feel for these design issues, think e-mail, where users expect   to be able to read and send mail even when they&#8217;re not connected to the   network.</P><P>  All major database systems now incorporate queuing mechanisms that make it easy   to define queues, to queue and de-queue messages, to attach triggers to queues,   and to dispatch the tasks that the queues are responsible for driving. Also,   with the addition of good programming environments to database systems, it&#8217;s   now much easier and more natural to make liberal use of queues. The ability   to publish queues as Web services is just another fairly obvious advantage.   But we find ourselves facing some more contentious matters because&#8212;with   all these new capabilities&#8212;queues inevitably are being used for more than   simple ACID (atomic, consistent, isolated, durable) transactions. Most particularly,   the tendency is to implement publish/subscribe and workflow systems on top of   the basic queuing system. Ideas about how best to handle workflows and notifications   are still controversial&#8212;and the focus of ongoing experimentation.</P><P>  The key question facing researchers is how to structure workflows. Frankly,   a general solution to this problem has eluded us for several decades. Because   of the current immediacy of the problem, however, we can expect to see plenty   of solutions in the near future. Out of all that, some clear design patterns   are sure to emerge, which should then lead us to the research challenge: characterizing   those design patterns. </P><P>  Building on the data cube abstraction. Early relational database systems used   indices as table replicas to enable vertical partitioning, associative search,   and convenient data ordering. Database optimizers and executors use semi-join   operations on these structures to run common queries on covering indices, thus   realizing huge performance improvements.</P><P>  Over the years, these early ideas evolved into materialized views (often maintained   by triggers) that extended well beyond simple covering indices to enable accelerated   access to star and snowflake data organizations. In the 1990s, we took another   step forward by identifying the &#8220;data cube&#8221; OLAP (online analytic   processing) pattern whereby data is aggregated along many different dimensions   at once. Researchers developed algorithms for automating cube design and implementation   that have proven to be both elegant and efficient&#8212;so much so that cubes   for multi-terabyte fact tables can now be represented in just a few gigabytes.   Virtually all major database engines already rely upon these algorithms. But   that hardly signals an end to innovation. In fact, a considerable amount of   research is now being devoted to this area, so we can look forward to much better   cube querying and visualizing tools. </P><P>  One step closer to knowledge. To see where we stand overall on our evolutionary   journey, it might be said that along the slow climb from data to knowledge to   wisdom, we&#8217;re only now making our way into the knowledge realm. The advent   of data mining represented our first step into that domain.</P><P>  Now the time has come to build on those earliest mining efforts. Already, we&#8217;ve   discovered how to embrace and extend machine learning through clustering, Bayes   nets, neural nets, time-series analysis, and the like. Our next step is to create   a learning table (labeled T for this discussion). The system can be instructed   to learn columns x, y, and z from attributes a, b, and c&#8212;or, alternatively,   to cluster attributes a, b, and c or perhaps even treat a as a time stamp for   b. Then, with the addition of training data into learning table T, some data-mining   algorithm builds a decision tree or Bayes net or time-series model for our dataset.   The training data that we need can be obtained using the database systems&#8217;   already well-understood create/insert metaphor and its extract-transform-load   tools. On the output side, we can ask the system at any point to display our   data model as an XML document so it can be rendered graphically for easier human   comprehension&#8212;but the real power is that the model can be used as both   a data generator (&#8220;Show me likely customers,&#8221;) and as a tester (&#8220;Is   Mary a likely customer?&#8221;). That is, given a key a, b, c, the model can   return the x, y, z values&#8212;along with the associated probabilities of each.   Conversely, T can evaluate the probability of some given value being correct.   The significance in all this is that this is just the start. It is now up to   the machine-learning community to add even better machine-learning algorithms   to this framework. We can expect great strides in this area in the coming decade.   </P><P>  The research challenges most immediately ahead have to do with the need for   better mining algorithms, as well as for better techniques for determining probabilistic   and approximate answers (we&#8217;ll consider this further in a moment).</P><P>  Born-again column stores. Increasingly, one runs across tables that incorporate   thousands of columns, typically because some particular object in the table   features thousands of measured attributes. Not infrequently, many of the values   in these tables prove to be null. For example, an LDAP object requires only   seven attributes, while defining another 1,000 optional attributes.</P><P>  Although it can be quite convenient to think of each object as a row in a table,   actually representing them that way would be highly inefficient&#8212;both in   terms of space and bandwidth. Classic relational systems generally represent   each row as a vector of values, even in those instances where the rows are null.   Sparse tables created using this row-store approach tend to be quite large and   only sparsely populated with information.</P><P>  One approach to storing sparse data is to plot it according to three characteristics:   key, attribute, and value. This allows for extraordinary compression, often   as a bitmap, which can have the effect of reducing query times by orders of   magnitude&#8212;thus enabling a wealth of new optimization possibilities. Although   these ideas first emerged in Adabase and Model204 in the early 1970s, they&#8217;re   currently enjoying a rebirth. </P><P>  The challenge for researchers now is to develop automatic algorithms for the   physical design of column stores, as well as for efficiently updating and searching   them. </P><P>  Dealing with messy data types. Historically, the database community has insulated   itself from the information retrieval community, preferring to remain blissfully   unaware of everything having to do with messy data types such as time and space.   (Mind you, not everyone in the database community has stuck his or her head   in the sand&#8212;just most of us.) As it turns out, of course, we did have   our work cut out for us just dealing with the &#8220;simple stuff&#8221;&#8212;numbers,   strings, and relational operators. Still, there&#8217;s no getting around the   fact that real applications today tend to contain massive amounts of textual   data and frequently incorporate temporal and spatial properties. </P><P>  Happily, the integration of persistent programming languages and environments   as part of database architectures now gives us a relatively easy means for adding   the data types and libraries required to provide textual, temporal, and spatial   indexing and access. Indeed, the SQL standard has already been extended in each   of these areas. Nonetheless, all of these data types&#8212;most particularly,   for text retrieval&#8212;require that the database be able to deal with approximate   answers and employ probabilistic reasoning. For most traditional relational   database systems, this represents quite a stretch. It&#8217;s also fair to say   that, before we&#8217;re able to integrate textual, temporal, and spatial data   types seamlessly into our database frameworks, we still have much to accomplish   on the research front. Currently, we don&#8217;t have a clear algebra for supporting   approximate reasoning, which we&#8217;ll need not only to support these complex   data types, but also to enable more sophisticated data-mining techniques. This   same issue came up earlier in our discussion of data mining&#8212;data mining   algorithms return ranked and probability-weighted results. So there are several   forces pushing data management systems into accommodating approximate reasoning.   </P><P>  Handling the semi-structured data challenge. Inconvenient though it may be,   not all data fits neatly into the relational model. Stanford University professor   Jennifer Widom observes that we all start with the schema &lt;stuff/&gt;, and   then figure out what structure and constraints to add. It&#8217;s also true   that even the best-designed database can&#8217;t include every conceivable constraint   and is bound to leave at least a few relationships unspecified.</P><P>  How best to deal with that reality is a question that has sparked a huge controversy   within the database community. On one side of the debate are the radicals who   believe cyberspace should be treated as one big XML document that can be manipulated   with XQuery++. The reactionaries, on the other hand, believe that structure   is your friend&#8212;and that, by extension, semistructured data is nothing   more than a pluperfect mess best avoided. Both camps are well represented&#8212;and   often stratified by age. It&#8217;s easy to observe that the truth almost certainly   lies somewhere between these two polar views, but it&#8217;s also quite difficult   to see exactly how this movie will end. </P><P>  One interesting development worth noting, however, has to do with the integration   of database systems and file systems. Individuals who keep thousands of e-mail   messages, documents, photos, and music files on their own personal systems are   hard-pressed to find much of anything anymore. Scale up to the enterprise level,   where the number of files is in the billions, and you&#8217;ve got the same   problem on steroids. Traditional folder hierarchy schemes and filing practices   are simply no match for the information tsunami we all face today. Thus, a fully   indexed, semistructured object database is called for to enable search capabilities   that offer us decent precision and recall. What does this all signify? Paradoxically   enough, it seems that file systems are evolving into database systems&#8212;which,   if nothing else, goes to show just how fundamental the semistructured data problem   really is. Data management architects still have plenty of work ahead of them   before they can claim to have wrestled this problem to the mat. </P><P>  Historically aware stream processing. Ours is a world increasingly populated   by streams of data generated by instruments that monitor environments and the   activities taking place in those environments. The instances are legion, but   here are just a few examples: telescopes that scan the heavens; DNA sequencers   that decode molecules; bar-code readers that identify and log passing freight   cars; surgical unit monitors that track the life signs of patients in post-op   recovery rooms; cellphone and credit-card scanning systems that watch for signs   of potential fraud; RFID scanners that track products as they flow through supply-chain   networks; and smart dust that has been programmed to sense its environment.</P><P>  The challenge here has less to do with the handling of all that streaming data&#8212;although   that certainly does represent a significant challenge&#8212;than with what is   involved in comparing incoming data with historical information stored for each   of the objects of interest. The data structures, query operators, and execution   environments for such stream-processing systems are qualitatively different   from what people have grown accustomed to in classic DBMS environments. In essence,   each arriving data item represents a fairly complex query against the existing   database. The encouraging news here is that researchers have been building stream-processing   systems for quite some time now, with many of the ideas taken from this work   already starting to appear in mainstream products.</P><P>  Triggering updates to database subscribers. The emergence of enterprise data   warehouses has spawned a wholesale/retail data model whereby subsets of vast   corporate data archives are published to various data marts within the enterprise,   each of which has been established to serve the needs of some particular special   interest group. This bulk publish/distribute/subscribe model, which is already   quite widespread, employs just about every replication scheme you can imagine.   </P><P>  Now the trend in application design is to install custom subscriptions at the   warehouse&#8212;sometimes millions of them at a time. What&#8217;s more, realtime   notification is being requested as part of each of these subscriptions. Whenever   any data pertaining to the subscription arrives, the system is asked to immediately   propagate this information to the subscriber. Hospitals want to know if a patient&#8217;s   life signs change, travelers want to know if their flight is delayed, finance   applications ask to be informed of any price fluctuations, inventory applications   want to be told of any changes in stock levels, just as information retrieval   applications want to be notified whenever any new content has been posted.</P><P>  It turns out that publish/subscribe systems and stream-processing systems are   actually quite similar in structure. First, the millions of standing queries   are compiled into a dataflow graph, which in turn is incrementally evaluated   to determine which subscriptions are affected by a change and thus must be notified.   In effect, updated data ends up triggering updates to each subscriber that has   indicated an interest in that particular information. The technology behind   all this draws heavily on the active database work of the 1990s, but you can   be sure that work continues to evolve. In particular, researchers are still   looking for better ways to support the most sophisticated standing queries,   while also optimizing techniques for handling the ever-expanding volume of queries   and data.</P><P>  Keeping query costs in line. All of the changes discussed so far are certain   to have a huge impact on the workings of database query optimizers. The inclusion   of user-defined functions deep inside queries, for one thing, is sure to complicate   cost estimation. In fact, real data with high skew has always posed problems.   But we&#8217;ll no longer be able to shrug these off because in the brave new   world we&#8217;ve been exploring, relational operators make up nothing more   than the outer loop of nonprocedural programs and so really must be executed   in parallel and at the lowest possible cost. </P><P>  Cost-based, static-plan optimizers continue to be the mainstay for those simple   queries that can be run in just a few seconds. For more complex queries, however,   the query optimizer must be capable of adapting to varying workloads and fluctuations   in data skew and statistics, while also planning in a much more dynamic fashion&#8212;changing   plans in keeping with variations in system load and data statistics. For petabyte-scale   databases, the only solution may be to run continuous data scans, with queries   piggybacked on top of the scans. </P><P>  The arrival of main-memory databases. Part of the challenge before us results   from the insane pace of growth of disk and memory capacities, substantially   outstripping bandwidth capacity and the current capabilities for minimizing   latency. It used to take less than a second to read all of RAM and less than   20 minutes to read everything stored on a disk. Now, a multi-gigabyte RAM scan   takes minutes, and a terabyte disk scan can require hours. It&#8217;s also becoming   painfully obvious that random access is 100 times slower than sequential access&#8212;and   the gap is widening. Ratios such as these are different from those we grew up   with. They demand new algorithms that let multiprocessor systems intelligently   share some massive main memory, while optimizing the use of precious disk bandwidth.   Database algorithms, meanwhile, need to be overhauled to account for truly massive   main memories (as in, able to accommodate billions of pages and trillions of   bytes). In short, the era of main-memory databases has finally arrived. </P><P>  Smart devices: Databases everywhere. We should note that at the other end of   the spectrum from shared memory, intelligence is moving outward to telephones,   cameras, speakers, and every peripheral device. Each disk controller, each camera,   and each cellphone now combines tens of megabytes of RAM storage with a very   capable processor. Thus, it&#8217;s quite feasible now to have intelligent disks   and other intelligent peripherals that provide for either database access (via   SQL or some other nonprocedural language) or Web service access. The evolution   from a block-oriented interface to a file interface and then on to a set of   service interfaces has been the defining goal of database machine advocates   for three decades now. In the past, this required special-purpose hardware.   But that&#8217;s not true any longer because disks now are armed with fast general-purpose   processors, thanks to Moore&#8217;s law. Database machines will likely enjoy   a rebirth as a consequence. </P><P>  In a related development, people building sensor networks have discovered that   if you view each sensor as a row in a table (where the sensor values make up   the fields in that row), it becomes quite easy to write programs to query the   sensors. What&#8217;s more, current distributed query technology, when augmented   by a few new algorithms, proves to be quite capable of supporting highly efficient   programs that minimize bandwidth usage and are quite easy to code and debug.   Evidence of this comes in the form of the tiny database systems that are beginning   to appear in smart dust&#8212;a development that&#8217;s sure to shock and awe   anyone who has ever fooled around with databases. </P><P>  Self-managing and always-up. Indeed, if every file system, every disk, every   phone, every TV, every camera, and every piece of smart dust is to have a database   inside, then those database systems will need to be self-managing, self-organizing,   and self-healing. The database community is justly proud of the advances it   has already realized in terms of automating system design and operation. The   result is that database systems are now ubiquitous&#8212;your e-mail system   is a simple database, as is your file system, and so too are many of the other   familiar applications you use on a regular basis. As you can probably tell from   the list of new and emerging features enumerated in this article, however, databases   are getting to be much more sophisticated. All of which means we still have   plenty of work ahead to create distributed data stores robust enough to ensure   that information never gets lost and queries are always handled with some modicum   of efficiency.</P><P> <strong>STAYING ON TOP OF THE INFORMATION AVALANCHE</strong></P><P>  People and organizations are being buried under an unrelenting onslaught of   information. As a consequence, everything you thought was true about database   architectures is being re-thought.</P><P>  Most importantly, algorithms and data are being unified by integrating familiar,   portable programming languages into database systems, such that all those design   rules you were taught about separating code from data simply won&#8217;t apply   any longer. Instead, you&#8217;ll work with extensible object-relational database   systems where nonprocedural relational operators can be used to manipulate object   sets. Coupled with that, database systems are well on their way to becoming   Web services&#8212;and this will have huge implications in terms of how we structure   applications. Within this new mind-set, DBMSs become object containers, with   queues being the first objects that need to be added. It&#8217;s on the basis   of these queues that future transaction processing and workflow applications   will be built. </P><P>  Clearly, there&#8217;s plenty of work ahead for all of us. The research challenges   are everywhere&#8212;and none is trivial. Yet, the greatest of these will have   to do with the unification of approximate and exact reasoning. Most of us come   from the exact-reasoning world&#8212;but most of our clients are now asking   questions that require approximate or probabilistic answers.</P><P>  In response, databases are evolving from SQL engines to data integrators and   mediators that offer transactional and nonprocedural access to data in many   different forms. This means database systems are effectively becoming database   operating systems, into which various subsystems and applications can be readily   plugged.</P><P> Getting from here to there will involve many more challenges than those touched   upon here. But I do believe that most of the low-hanging fruit is clustered   around the topics outlined here, with advances realized in those areas soon   touching virtually all areas of application design. </P><P> <strong>LOVE IT, HATE IT? LET US KNOW</strong></P><P>  feedback@acmqueue.com or www.acmqueue.com/forums</P><P> <strong>Acknowledgments</strong></P><P>  Talks given by David DeWitt, Michael Stonebraker, and Jennifer Widom at CIDR   (Conference on Innovative Data Systems Research) inspired many of the ideas   presented in this article. </P><P> <strong>JIM GRAY </strong>is a Distinguished Engineer in Microsoft&#8217;s   Scalable Servers Research Group and is also responsible for managing Microsoft&#8217;s   Bay Area Research Group. He has been honored as an ACM Turing Award recipient   for his work on transaction processing. To this day, Gray&#8217;s primary research   interests continue to concern database architectures and transaction processing   systems. Currently, he&#8217;s working with the astronomy community, helping   to build online databases, such as http://terraservice.net and http://skyserver.sdss.org.   Once all of the world&#8217;s astronomy data is on the Internet and accessible   as a single distributed database, Gray expects the Internet to become the world&#8217;s   best telescope.</P><P> <strong>MARK COMPTON</strong>, who now runs a marketing communications consulting   group called Hired Gun Communications, has been working in the technology market   for nearly 20 years. Before going out on his own, he headed up marketing programs   at Silicon Graphics, where he was the driving force behind the branding program   for the company&#8217;s Indigo family of desktop workstations. Over a four-year   period in the mid-1980s, he served as editor-in-chief of Unix Review, at the   time considered the leading publication for Unix software engineers.</P><P>  &copy; 2005 ACM 1542-7730/05/0400 $5.00</p>


 <p>
 
 	
	    <img class="floatLeft" src="img/q stamp_small.jpg" width="26" height="45" alt="acmqueue"><br><br>
	
	<em>Originally published in Queue vol. 3, no. 3</em>&#8212;
 	<br>
	see this item in the <a href="http://portal.acm.org/citation.cfm?id=1059805">ACM Digital Library</a> 
 
  </p>


<!-- EMail Link-->


			
            <p class="totop"><a href="#">Back to top</a></p>
			
		  </div>
		  <!-- /content -->
		   



<div class="bibliography">
	<h5>About the Author</h5>
	<ul  class="authbios">
   
	   <li><span></span>
	   	   For additional information see the ACM Digital Library Author Page for: <a href="http://portal.acm.org/author_page.cfm?id=81100403088">Jim Gray</a><br />&nbsp;
	    </li>
	
	</ul>
</div>


		   
		    <!-- tags -->
<!-- /content-tags -->
<div id="content-comments" class="panel">

	<div  id="layout1">
	
	
<div  id="cf_layoutarea1292622902005" style="overflow:auto;">
		
		



 <h3>Comments</h3>
   <ul id="comments">
   	 
	 
		 
			  			
		 
		 <li class="alt">
     		  <p class="author">
           		 <span>Angsuman Chakraborty</span>
           			 | 
          			  Sun, 02 Aug 2009 05:28:49 UTC </p>
          			  <p>An excellent article and still very relevant.</p>
     	 </li>
      
 </ul>


<a name="discussion"></a>
<form name="edit_form" id="edit_form" action="postcomment.cfm" method="post" onsubmit="return ColdFusion.Ajax.checkForm(this, _CF_checkedit_form,'cf_layoutarea1292622902005')">
<fieldset>











	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




	
	<input type="hidden" name="formfield1234567891" id="formfield1234567891" value="">
	



	
	<input type="hidden" name="formfield1234567892" id="formfield1234567892" value="">
	



	
	
	
	
	
	
	
	<input type="hidden" name="formfield1234567893" value="39841423,19905709">



	
	<span style="display:none">Leave this field empty <input type="text" name="formfield1234567894" value=""></span>

<p>Post a Comment:
</p>
<div>
<div class="field">
<label for="username">Name</label>
<span class="fieldRequired" title="Required">(Required)</span>
<div class="formHelp"></div>
<div></div>
<div>
<input name="Creator" type="text" title="Name"  alt="Submitter"  size="40"  id="username"  />
</div>
</div>
<div class="field">
<label for="email">E-Mail</label>
<span class="fieldRequired" title="Required">(Required)
</span>
<div class="formHelp"></div>
<div></div>
<input name="email" id="email"  type="text" size="40"  />
</div>
</div>



<div class="field">
<label for="body_text">Comment</label>
<span class="fieldRequired" title="Required">(Required - 4,000 character limit - HTML syntax is <strong>not</strong> allowed and <b>will be removed</b>)</span>
<div></div>
<textarea name="body_text" rows="8" id="body_text" cols="40" html="No" ></textarea>
</div>

<div class="formControls">
<input type="Hidden" name="id" value="1059805">
<input name="discussion_reply:method" id="discussion_reply:method"  type="submit" value="Post" class="context"  />
</div>
</fieldset>
</form>



	 </div>

 </div>
	
</div>
<!-- /content-comments -->
		   
		    <span class="clear"></span>
       </div>
      <!-- /primary -->
     </div>

	 

	 <span class="clear"></span>
  </div>
  <!-- /wrapper -->

  <div id="portal-footer">
      <div id="footer">
        <ul>
          <li>
            <a href="whatisqueue.cfm">About Queue</a>
          </li>
          <li>
            <a href="author_guidelines.cfm">Author Guidelines</a>
          </li>
          <li>
            <a href="editorialboard.cfm">Editorial Board</a>
          </li>
          <li>
            <a href="whyjoinacm.cfm">Join ACM</a>
          </li>
          <li>
            <a href="http://www.acm-media.org">Advertising</a>
          </li>
        </ul>
        <ul>
          <li>
            <a href="rssfeeds.cfm">RSS Feeds</a>
          </li>
          <li>
            <a href="privacypolicy.cfm">Privacy Policy</a>
          </li>
          <li>
            <a href="contactus.cfm">Contact us</a>
          </li>
          <li>
            <a href="feedback.cfm">LOVE IT, HATE IT? LET US KNOW</a>
          </li>
        </ul>
        <p class="copyright">&#169; 2010 ACM, Inc. All Rights
        Reserved.</p>
     </div>
     <!-- /footer -->
 </div>


<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-6562869-1");
pageTracker._initData();
pageTracker._trackPageview();
</script>


</body>
</html>
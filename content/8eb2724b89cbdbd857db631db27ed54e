<HTML><HEAD><TITLE>C Coroutines</TITLE></HEAD><BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->



<B>CORO(2)</B>                    C Coroutines                   <B>CORO(2)</B>



</PRE>
<H2>NAME</H2><PRE>
       co_create, co_call, co_resume, co_delete, co_exit_to,
       co_exit - C coroutine management



</PRE>
<H2>SYNOPSIS</H2><PRE>
       <B>#include &lt;coro.h&gt;</B>

       <B>struct coroutine {</B>
           <B>...</B>
           <B>struct coroutine *caller;</B>
           <B>struct coroutine *resumeto;</B>
           <B>void *user;</B>
           <B>...</B>
       <B>};</B>

       <B>extern struct coroutine *co_current;</B>
       <B>extern struct coroutine co_main[];</B>

       <B>struct coroutine *co_create(void *</B><U>func</U><B>, void *</B><U>stack</U><B>, int</B> <U>stacksize</U><B>);</B>
       <B>void co_delete(struct coroutine *</B><U>co</U><B>);</B>
       <B>void *co_call(struct coroutine *</B><U>co</U><B>, void *</B><U>data</U><B>);</B>
       <B>void *co_resume(void *</B><U>data</U><B>);</B>
       <B>void *co_exit_to(struct coroutine *</B><U>co</U><B>, void *</B><U>data</U><B>);</B>
       <B>void *co_exit(void *</B><U>data</U><B>);</B>


</PRE>
<H2>DESCRIPTION</H2><PRE>
       The <B>coro</B> library implements the low level functionality
       for coroutines.  For a definition of the term <B>coroutine</B>
       see <U>The Art of Computer Programming</U> by <U>Donald E. Knuth</U>.
       In short, you may think of coroutines as a very simple
       cooperative multitasking environment where the switch from
       one task to another is done explicitly by a function call.
       And, coroutines are fast.  Switching from one coroutine to
       another takes only a couple of assembler instructions more
       than a normal function call.

       This document defines an API for the low level handling of
       coroutines i.e. creating and deleting coroutines and
       switching between them.  Higher level functionality
       (scheduler, etc.) is not covered.


   <B>Functions</B>
       The following functions are defined:

       <B>co_create</B>
              This function creates a new coroutine.  <U>func</U> is the
              entry point of the coroutine.  It will be called
              with one arg, a <B>void *</B>, which holds the data given
              to the first <B>co_call</B> call.  If <U>func</U> terminates, an
              implicit <B>co_resume</B> with the function's return value
              is executed and the next <B>co_call</B>/<B>co_resume</B> reenters
              the function at the top.



GNU                         1.1.0.pre2                          1





<B>CORO(2)</B>                    C Coroutines                   <B>CORO(2)</B>


              <U>stack</U> is the base of the stack this coroutine will
              use and <U>stacksize</U> its size in bytes.  You may pass
              a <B>NULL</B> pointer for <U>stack</U> in which case the memory
              will be allocated by <B>co_create</B> itself.  Both, <U>stack</U>
              and <U>stacksize</U> are aligned to system requirements.
              A <U>stacksize</U> of less then 128 bytes will be
              rejected.  You have to make sure, that the stack is
              large enough for your coroutine and possible signal
              handlers (see below).  The stack will not grow!
              (Exception: the <B>co_main</B> coroutine uses the standard
              system stack which may still grow.)

              On success, a handle (<B>struct coroutine *</B>) for a new
              coroutine is returned, otherwise <B>NULL</B>.


       <B>co_delete</B>
              This function deletes the given coroutine <U>co</U>.  If
              the stack for this coroutine was allocated by
              <B>co_create</B> it will be freed.  After a coroutine han­
              dle was passed to <B>co_delete</B> it is invalid and may
              not be used any more.

              It is invalid for a coroutine to delete itself with
              this function.


       <B>co_call</B>
              This function passes execution to the given corou­
              tine <U>co</U>.  The <U>data</U> pointer is transferred to the
              other coroutine.  The current coroutine is sus­
              pended until another one restarts it with a <B>co_call</B>
              or <B>co_resume</B> call.  At that moment the <B>co_call</B>
              returns with the data pointer received from the
              other coroutine.

              Calling oneself returns immediately with the given
              <U>data</U>.


       <B>co_resume</B>
              This function passes execution back to the corou­
              tine which either initially started this one or
              restarted it after a prior <B>co_resume</B>.  The <U>data</U>
              pointer and the return value is the same as for
              <B>co_call</B>.


       <B>co_exit_to</B>
              This function does the same a <B>co_delete(co_current)</B>
              followed by a <B>co_call</B> would do.  That is, it
              deletes itself and then passes execution and the
              <U>data</U> pointer to another coroutine <U>co</U>.




GNU                         1.1.0.pre2                          2





<B>CORO(2)</B>                    C Coroutines                   <B>CORO(2)</B>


       <B>co_exit</B>
              This function does the same a <B>co_delete(co_current)</B>
              followed by a <B>co_resume</B> would do.  That is, it
              deletes itself and then passes execution and the
              <U>data</U> pointer back to the coroutine which either
              initially started this one or restarted it after a
              prior <B>co_resume</B>.


   <B>Global variables</B>
       Two global read only variables are defined:

       <B>co_current</B>
              This variable always holds the handle of the cur­
              rently active coroutine.  It may be used to access
              the public fields of the <B>struct coroutine</B>.


       <B>co_main</B>
              This identifier may be used as a handle for the
              initial, automagically created coroutine that per­
              formed the first <B>co_call</B> call.  Don't try to
              <B>co_delete</B> it *g*.


   <B>Public struct coroutine fields</B>
       The following elements of the <B>struct coroutine</B> may be used
       by applications:

       <B>struct coroutine *caller;</B>
              This is the handle of the previously active corou­
              tine.  Only valid while the coroutine is active.

       <B>struct coroutine *resumeto;</B>
              This is the handle of the coroutine where <B>co_resume</B>
              and <B>co_exit</B> would switch to.  Only valid while the
              coroutine is active.

       <B>void *user;</B>
              This field is reserved for applications.  It is set
              to <B>NULL</B> by <B>co_create</B> and isn't touched until a
              <B>co_delete</B> invalidates the structure.


   <B>Notes</B>
       Some interactions with other parts of the system are cov­
       ered here.

       <B>Signals</B>
              First, a signal handler is not defined to run in
              any specific coroutine.  The contents of the
              <B>co_current</B> and <B>co_main</B> variables is undefined and
              you may not call <B>any</B> coroutine function.  The only
              way to leave the signal handler is by a return



GNU                         1.1.0.pre2                          3





<B>CORO(2)</B>                    C Coroutines                   <B>CORO(2)</B>


              statement.

              Second, the signal handler may run with the stack
              of any coroutine, even with the stack of library
              internal coroutines which have an undefined stack
              size (just enough to perform a kernel call).  Using
              and alternate stack for signal processing (see
              <B>sigaltstack(2)</B>) is recommended!

              Conclusion: avoid signals like a plague.  The only
              thing you may do reliable is setting some global
              variables and return.  Simple kernel calls may work
              too, but nowadays it's pretty hairy to tell, which
              function really is a kernel call.  (Btw, all this
              applies to normal C programs, too.  The coroutines
              just add one more problem *g*)

       <B>setjmp/longjmp</B>
              The use of <B>setjmp</B>/<B>longjmp</B> is limited to jumping
              inside one coroutine.  Never try to jump from one
              coroutine to another with <B>longjmp</B>.

       <B>Passing local data</B>
              With coroutines there is a new way to generate dan­
              gling references.  If one coroutine passes a
              pointer to local data (storage class auto) to
              another coroutine this pointer <B>may</B> become invalid
              at the moment that coroutine is restarted or
              deleted.  Especially, passing a pointer to auto
              data to <B>co_exit</B>/<B>co_exit_to</B> is only valid, if the
              stack wasn't allocated by <B>co_create</B>.

       <B>Minimalism</B>
              The only necessary function would be <B>co_create</B>,
              <B>co_delete</B>, and <B>co_call</B>.  The other functions
              (<B>co_resume</B>, <B>co_exit</B>, and <B>co_exit_to</B>) could easily
              be implemented in a portable way.  But they seemed
              fundamental enough that I added them to the core
              library.



</PRE>
<H2>DIAGNOSTICS</H2><PRE>
       Some fatal errors are caught by the library.  If one
       occurs, a short message is written to file descriptor 2
       (stderr) and a segmentation violation is generated.

       <B>coro: coroutine deletes itself</B>
              A coroutine has called <B>co_delete</B> with it's own han­
              dle.

       <B>coro: resume to deleted coroutine</B>
              A coroutine has deleted itself with <B>co_exit</B> or
              <B>co_exit_to</B> and the coroutine that was activated by
              the exit tried a <B>co_resume</B>.



GNU                         1.1.0.pre2                          4





<B>CORO(2)</B>                    C Coroutines                   <B>CORO(2)</B>


       <B>coro: stale coroutine called</B>
              Someone tried to active a coroutine that has
              already been deleted.  This error is only detected,
              if the stack of the deleted coroutine is still res­
              ident in memory.



</PRE>
<H2>SEE ALSO</H2><PRE>
       A good book about coroutines *g*



</PRE>
<H2>BUGS</H2><PRE>
       There are no known bugs.  But, this library is still in
       development.  Especially, it's only implemented for
       x86/Linux and FreeBSD yet.  Later implementations for
       other architectures may require some redefinitions.

       Obbug: These routines should be in libc *g*

       Bug reports and comments to <B>froese@gmx.de</B>.





































GNU                         1.1.0.pre2                          5


</PRE>
</B0DY></HTML>

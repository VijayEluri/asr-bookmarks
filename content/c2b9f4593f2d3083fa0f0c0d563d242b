<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>Sparklines for Java</title>
<!-- Layout stolen from the layout reservoir at bluerobot.com -->
<link rel="stylesheet" type="text/css" href="reservoir.css" />
<link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
</head>
<body>
<h1 id="Header">Sparklines for Java</h1>

<div class="Content">
  <h2>Introduction</h2>
  <p>Sparklines are "intense, simple, wordlike graphics."  They are detailed in <a href="http://www.edwardtufte.com/tufte/">Edward Tufte</a>'s latest book, <a href="http://www.amazon.com/gp/product/0961392177/sr=8-1/qid=1152502831/ref=pd_bbs_1/104-7955273-7691925?ie=UTF8">Beautiful Evidence</a> and also in his <a href="http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR&topic_id=1&topic=">message board</a>.</p>

  <p>Here's one showing my unique visitor history on my <a href="http://jdk.representqueens.com/">Javadoc search site</a> for the past several days <img src="http://static.representqueens.com/graphs/jdk.visitors.png" />, or maybe you prefer a line graph: <img src="http://static.representqueens.com/graphs/jdk.visitors-alt.png" />.</p>

  <h2>Software</h2>
  <p>Sparklines for Java is released under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License</a>.</p>
 
  <p>The package contains a Servlet that can be added to a web project to create sparklines based on request parameters.  It also includes a taglib for easily formatting the required parameters.  There's also an API to directly create a <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/image/BufferedImage.html">BufferedImage</a> in any Java code.
  </p>

 <p>The first release (1.0) generated embedded images using data: URIs.  Unfortunately, these are only really supported in Firefox, and to a lesser extent Safari and Opera.  These are still supported, but have been moved to a "spark_em" taglib (also included with the distribution).  For more information on using these, please see the <a href="/spark/archive/1.0/">archived release page</a>.
 </p>

 <p><a href="changelog.html">Changelog</a></p>


<h3>Download</h3>
 <p>Released under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License</a>.</p>
 <p>
   <ul>
    <li><p>Binary package &ndash; <a href="/spark/release/spark-1.2.jar">spark-1.2.jar</a> (3/11/07).</p></li>
    <li><p>Source package &ndash; <a href="/spark/release/spark-1.2-src.tar.gz">spark-1.2-src.tar.gz</a> (3/11/07).</p></li>
   </ul>
  </p>
  
<h3>Subversion repository</h3>
<p>You can access the online repository:
  <pre>
  svn checkout http://java-spark.googlecode.com/svn/trunk/ java-spark
  </pre>
</p>

 <p>You can also search/browse the source tree online from the <a href="http://code.google.com/p/java-spark/source">Google hosted code page</a>.</p>

<h2>Support</h2>
  <p>
    <a href="http://groups.google.com/group/java-spark">Sparklines for Java Google Group</a>
  </p>
  <p>
    You can also reach me at spark [at] representqueens [dot] com for any comments, suggestions, bugs, etc.
  </p>

<h2>Installation</h2>
 <p>You'll need to include the spark.jar in your web project.  Additionally, you'll need to add a mapping in web.xml for the SparkController:</p>

  <pre>
    &lt;servlet&gt;
      &lt;servlet-name&gt;SparkLines&lt;/servlet-name&gt;
      &lt;servlet-class&gt;com.representqueens.spark.service.SparkController&lt;/servlet-class&gt;
    &lt;/servlet&gt;
  </pre>

<p>and then the servlet-mapping:</p>
  <pre>
    &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SparkLines&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/spark&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
  </pre>
<p>"/spark" is the default path in the taglib.  If you need to use another mapping, that's fine, you can specify this when using the tag.</p>

  <h2>JSTL examples</h2>
  <pre>
    &lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;
    &lt;%@ taglib prefix="spark" uri="http://www.representqueens.com/taglibs/spark" %&gt;
    &lt;c:set var="test" value="5, 35, 22, 19, 16, 10, 4, 33, 9, 12, 27, 36, 22" /&gt;
    &lt;img src="&lt;spark:bar name="test" color="red" /&gt;" /&gt;
  </pre>


<p>This will generate HTML source:</p>

  <pre>
    &lt;img src="/x/spark?type=bar&color=red&data=5,35,22,19,16,10,4,33,9,12,27,36,22" /&gt;
  </pre>

<p>The default path is "/spark" (from above).  The "/x" happens to be my current context, and is prepended automatically.</p>

<p>Though the web.xml mapping, this will hit the servlet controller and return a png image...  Something like this:<img src="spark-bar.png" />
</p>

<p>If you need to specify an alternate path (you mapped the servlet to another URL), there are two ways to do this.  First you can specify it as part of the taglib, like this:</p>
  <pre>
    &lt;img src="&lt;spark:bar path="/spark2" name="test" color="red" /&gt;" /&gt;
  </pre>
<p>Or, you can specify this in a page variable, like this:</p>
  <pre>
    &lt;c:set var="sparkPath" value="/spark3" /&gt;
    &lt;img src="&lt;spark:line name="test" color="red" /&gt;" /&gt;
  </pre>
<p>Note that you should not include the context path... This is automatically prepended.</p>

<p>
The <code>name</code> attribute specifies the key to find the data (Uses <a href="http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/jsp/JspContext.html#findAttribute(java.lang.String)">JspContext.findAttribute</a>).  It expects the value to be either a List&lt;Number&gt;, a Number[], or a String of comma separated int values.  It's the only manditory attribute.
</p>
<p>
The other attributes are <tt>width, height, spacing, color, highColor, lastColor, output</tt>.  You can replace "bar" with "line" to get a linegraph (note: highColor and lastColor are currently not supported for line graphs).
</p>
<p>
The color attributes can either be a color name (a field name from <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Color.html">java.awt.Color</a>), or a HTML hex color (e.g. #ff0000 for red).
</p>

<h2>Java Examples</h2>
<pre>
final Number[] data = new Integer[] { 5, 22, 16, 8, 30, 9, 12, 27, 19, 22 };

// width, height, spacing
final SizeParams params = new SizeParams(50, 12, 1);

final BufferedImage i =
  BarGraph.createGraph(data, params,
                       Color.blue.brighter(),
                       Color.blue.darker(),
                       Color.magenta);

ImageIO.write(i, "png", new File(args[0]));
</pre>
<p>Would produce something like: <img src="http://static.representqueens.com/graphs/jdk.visitors-ex.png" /></p>
<p>Line graphs are similar, although we currently only support a single color:</p>
<pre>
final BufferedImage i = LineGraph.createGraph(data, params, Color.blue.darker());
</pre>
<p>produces: <img src="http://static.representqueens.com/graphs/jdk.visitors-ex-alt.png" /></p>

<p><a href="http://www.representqueens.com/spark/release/spark-1.2/docs/">Sparklines Javadocs</a></p>

<h2>Author</h2>
<p>Written by <a href="http://www.ogrodnek.com/larry">Larry Ogrodnek</a> &lt;ogrodnek [at] gmail&gt;.</p>

</div>
<script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-272885-2";
urchinTracker();
</script>
<script type="text/javascript">
//<![CDATA[
  document.write('<scr'+'ipt src="http://crazyegg.com/pages/scripts/28780.js?'+(new Date()).getTime()+'" type="text/javascript"></'+'script>');
//]]>
</script
</body>
</html>

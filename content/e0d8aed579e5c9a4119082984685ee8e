<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>RTA: DB-like API for Daemons</title>
<meta name="keywords" content="embedded Linux UI database API">
<meta name="description" content= "How to talk to a running Linux process">
<style type="text/css">
<!--
body {
	background-color: #f2f3f5;
}
.style2 {font-size: 9px}
-->
</style>
<link href="../../text.css" rel="stylesheet" type="text/css">
</head>

<body style="margin-left: 0px; margin-top: 0px;  margin-bottom: 0px;
      margin-right: 0px;">
<table width="100%" border="0" align="center" cellpadding="0" cellspacing="0"
      style="background-image:url(../../images/shaded_container.jpg)">
  <tr>
    <td><img src="../../images/pad_left.jpg" alt="header"
             width="134"  height="77"></td>
    <td width="464"><img src="../../images/header_right.jpg" alt="header"
             width="464" height="77"></td>
    <td><img src="../../images/pad_right.jpg" alt="header"
             width="100%"  height="77"></td>
  </tr>
<!-- Above should not change from page to page --->

  <tr>
    <td width="134" valign="top">
      <a href="../../index.html"><img src="../../images/btn_home.jpg"
         alt="the book" width="134" height="24" border="0"></a><br>
      <a href="../../book/book.html"><img src="../../images/btn_thebook.jpg"
         alt="the book" width="134" height="24" border="0"></a><br>
      <a href="../../projects/projects.html"><img src="../../images/btn_projects.jpg"
         alt="projects" width="134" height="24" border="0"></a>
          <span class="small">
            &nbsp;<a href="../rta/index.html">Run Time Access</a><br>
            &nbsp;<a href="../logmuxd/index.html">Event Handler</a><br>
          </span>
      <a href="../../articles/articles.html"><img src="../../images/btn_articles.jpg"
         alt="articles" width="134" height="24" border="0"></a>
      <a href="../../contact.html"><img src="../../images/btn_contact.jpg"
         alt="contact" width="134" height="24" border="0"></a>
      <a href="../../downloads/downloads.html"><img src="../../images/btn_downloads.jpg"
         alt="downloads" width="134" height="24" border="0"></a>
    </td>

    <td colspan=2><table cellpadding="10"><tr><td>

<table width="100%" summary="" align="center" bgcolor="#ccdfef">
  <tbody>
    <tr>
      <td valign="top" align="left" width="40%">
      <ul>
        <li><a href="index.html">Introduction</a></li>
        <li><a href="FAQ.html">FAQ</a></li>
        <li><a href="apiref.html">API Spec</a></li>
        <li><a href="download.html">Download</a></li>
        <li><a href="quickstart.html">Quick Start</a></li>
        <li><a href="livedemo.html">Live Demo</a></li>
      </ul>
      </td>
      <td align="left" valign="middle">
      <h2>Run Time Access</h2>
      </td>
    </tr>
  </tbody>
</table>
<br>
<h2>Introduction</h2>
<p><b><font face="san-serif">RTA</font></b> is a library that you
can attach to your program to expose your program's internal arrays
and data structures as if they were tables in a database.  The
database interface uses a subset of the Postgres protocol and is
compatible with the Postgres bindings for <b>C</b>, <b>PHP</b>, and
the <b>Postgres</b> command line tool, <b>psql</b>.</p>
<ul>
<li><a href="#problem">The Problem</a></li>
<li><a href="#solution">The RTA Solution</a></li>
<li><a href="#db">A Database Interface</a></li>
<li><a href="#plus">Advantages</a></li>
<li><a href="#minus">Some Effort...</a></li>
</ul>
<br>
<h2><a name="problem">The Problem</a></h2>
<p>One of the problems facing Linux is the lack of run time access
to status, statistics, and configuration of a service once the
service has started. We assume that to configure an application we
will be able to ssh into the box, vi the /etc configuration file,
and do a 'kill -1' on the process. Real time status and statistics
are things Linux programmers don't even think to ask for. The need
for run time access is particularly pronounced for network
appliances where ssh is not available or might not be allowed.</p>
<table summary="" align="center">
<caption>The Bad Unix Model</caption>
<tr>
<td><img src="BadUnixModel.png" alt=""></td>
</tr>
</table>
<p>Another problem for appliance designers is that more than one
type of user interface may be required. Sometimes a customer
requires that no configuration information be sent over an Ethernet
line which transports unsecured user data. In such a case the
customer may turn off the web interface and require that
configuration, status, and statistics be sent over an RS-232 serial
line. Other popular interfaces include the VGA console, SNMP MIBs,
and LDAP.</p>
<br>
<h2><a name="solution">The RTA Solution</a></h2>
<p>The RTA package helps solve both of these problems by giving run
time access to the data structures and arrays inside your running
program. With minimal effort, you make your program's data
structures appear as tables in a Postgres database. </p>
<table summary="" align="center">
<caption>The Good RTA Model</caption>
<tr>
<td><img src="GoodrtaModel.png" alt=""></td>
</tr>
</table>
<p>For example, say you have a structure for TCP connections
defined as:</p>
<pre>
   struct tcpconn {
     int   fd;       // conn's file descriptor
     int   lport;    // local port number
     int   dport;    // destination port number
     long  nsbytes;  // number of sent bytes
     long  nrbytes;  // number of received bytes
     long  nread;    // number of reads on the socket
     long  nwrite;   // number of writes on the socket
   };
</pre>
<p>You might then define an array of these structures as:</p>
<pre>
    struct tcpconn Conns[20];
</pre>
<p>This array of structs could also be considered a table with
seven columns and twenty rows. RTA maps this table into a Postgres
database.</p>
<br>
<h2><a name="db">A Database Interface</a></h2>
<p>The RTA package gives your program a socket interface like that
of a Postgres database. It allows any programming language with a
Postgres binding to query your table of TCP connections....</p>
<pre>
    SELECT lport, dport FROM Conns WHERE fd != -1;
    UPDATE Conns SET dport = 0 WHERE fd = -1;
</pre>
<p>Only two commands, SELECT and UPDATE, are implemented, but they
give you tremendous power to interact with your program. The RTA
SQL implementation includes a WHERE clause and both LIMIT and
OFFSET. Say you want to allocate one <tt>tcpconn</tt> by setting
the file descriptor to a non-negative number. The UPDATE part of
the command would be 'UPDATE Conns SET fd=newfd'. To change only a
row where the file descriptor is -1, we add 'WHERE fd=-1'. We want
to change only one row so we add 'LIMIT 1'. The final command would
be:</p>
<pre>
    UPDATE Conns SET fd=newfd WHERE fd=-1 LIMIT 1
</pre>
<br>
<br>
<h2><a name="plus">Advantages</a></h2>
<p>The advantages of separating the user interface programs from
the daemon proper fall into the broad categories of design, coding,
debug, and capabilities.</p>
<p>From a design point of view, the division forces you to decide
early in the design what exactly is offered as part of the UI
without worrying how it is displayed. The thought process required
to design the tables forces you to think through the real design of
your application.  The tables might form the internal functional
specification of your application.</p> 
<p>While coding, the table definitions are what the daemon
engineers build to and what the UI engineers build from.  The
division of UI and daemon means you can hire UI experts and daemon
experts independently and they can code independently which might
help bring the product to market sooner. Since there are Postgres
bindings for PHP, Tcl/Tk, Perl, and "C", your developers can use
the right tool for the job.</p>
<p>Debug is faster and easier because both the UI and the daemon
engineers can simulate the other half easily. For example, the UI
engineers could run their UI programs against a real Postgres DB
which has the same tables the daemon will have. Testing the daemon
can be easier and more complete since it is easy to build test scripts
to simulate the UI, and it is  easy to examine internal status and
statistics while a test runs. The ability to force an internal state
or condition helps test corner cases which are sometimes difficult
to do in a lab setup.</p>
<p>The capability of your product can be expanded with RTA. Your
customers will really appreciate being able to see detailed status
and statistics while the program is running. Separating the UIs
from the daemon means you can have a wider variety and a greater
number of UI programs. SNMP, command line, web, LDAP, ... the list
goes on. This flexibility will come in handy if (when!) a customer
asks for a custom UI.</p>
<p>RTA offers several other features you might want in a package of
this type:</p>
<ul>
<li>Application data model reflected by the API data model</li>
<li>Remote access to the application</li>
<li>Use of standards and existing software by the application</li>
<li>Few new protocols and APIs to learn</li>
<li>Discovery mechanisms for the application</li>
<li>Few constraints on the application</li>
<li>Resource locking</li>
<li>CPU and memory efficiency</li>
</ul>
<br>
<br>
<h2><a name="minus">Some Effort...</a></h2>
<p>Some effort is required. In order to make your arrays and
structures visible, you need to tell RTA about them.  Table
information includes things like the name, start address, number
of rows and the length of each row.  (Remember, a "table" is an
array of structures, a "row" is one structure in that array,
and a "column" refers to one element in the structure.)  Column
information includes things like the associated table, the column
name, the column's data type, and whether we want any special
functions called when the column is read or written. Please see
 the Quick Start or the API reference for more details.</p>

      </td></tr></table>

<!-- Below should not change from page to page --->
    </td>
  </tr>
</table>
</body>
</html>

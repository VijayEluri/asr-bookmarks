






<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang='en'>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<script type='text/JavaScript' src='/js/cookie_get.js'></script>
<title>HPROF: A Heap/CPU Profiling Tool in J2SE 5.0</title>
<meta http-equiv="content-language" content="en">
<meta name="collection" content="reference">
<meta name="keywords" content="hprof, profiling, profiler, sampling, timing, heap analysis">
<meta name="description" content="Having performance problems with your Java Application?
Using too much Java heap space and don't know why?
Sometimes simple software tools are all that's needed.  This article discusses those tools.">
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="archive" content="FALSE">
<meta name="date" content="2004-11-17">
<link rel="stylesheet" href="/css/default_developer.css" />
<script language="JavaScript" type="text/javascript" src="/js/popUp.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/sniff.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucontent.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/menucode.js"></script>
<script language="javascript1.2" type="text/javascript" src="/js/developer.js"></script>
</head>
<!--stopindex-->
<body leftmargin="0" topmargin="0" marginheight="0" marginwidth="0" rightmargin="0" bgcolor="#ffffff" onload="prepmenus(); done=true">
<a name="top"></a>
<!-- BEGIN GENERIC MASTHEAD -->
<!-- BEGIN A1 COMPONENT V.0 -->
<div class="a1 a1r2">
<div class="a1v0">
<a href="#skip2content" class="skiplink">Skip to Content</a>
<span class="toolbarlinks">
<a href="/global/mh/suncom/index.html">Sun</a>
<a href="/global/mh/java/">Java</a>
<a href="/global/mh/solaris/">Solaris</a>
<a href="/global/mh/communities/" class="dividelink">Communities</a>
<a href="http://developers.sun.com/global/my_profile.html">My SDN Account</a>

</span>
</div>
</div>
<!-- END A1 COMPONENT V.0 -->

<!-- BEGIN A2 COMPONENT V.1 -->
<div class="a2w0">
<div class="a2" id="a2v1">
<div class="a2w1"><div class="a2w2"><div class="a2w3"><div class="a2w4">
<div class="a2topiclinks">
<div class="a2search">
<form action="http://search.sun.com/main/index.jsp" accept-charset="utf-8" method="GET">
<input type="hidden" name="charset" value="utf-8">
<input type="hidden" name="col" value="main-developer-all">
<span class="rightarrowwhite">&raquo;</span>&nbsp;<a href="http://developers.sun.com/global/search_tips.html">search tips</a>&nbsp;
<input class="searchfield" name="qt" class="medium" size="7" onFocus="if( this.value==this.defaultValue ) this.value='';" value="Search">
<input id="searchbttn" type="image" border="0" src="/im/a2_bttn_search.gif" alt="Submit Search">
</form>
</div>
<a href="http://www.sun.com" title="Home Page" id="sunlogo"><img src="/im/a.gif" alt="Home Page" width="98" height="58" border="0" /></a>
<a href="http://developers.sun.com" title="Sun Developer Network"><img src="/im/a.gif" id="venuespacer" alt="Sun Developer Network" width="400" height="33" border="0" /></a>
<ul id="mtopics">
<li id="mtopic1"><a id="glink1" class="tpclink a2menu" title="See All APIs" href="/global/mh/api/index.html">APIs</a></li>
<li id="mtopic2"><a id="glink2" class="tpclink a2menu" title="See All Downloads" href="/global/mh/downloads/index.html">Downloads</a></li>
<li id="mtopic3"><a id="glink3" class="tpclink a2menu" title="See All Products" href="/global/mh/products/index.html">Products</a></li>
<li id="mtopic4"><a id="glink4" class="tpclink a2menu" title="See All Support" href="/global/mh/support/index.html">Support</a></li>
<li id="mtopic5"><a id="glink5" class="tpclink a2menu" title="See All Training" href="/global/mh/training/index.html">Training</a></li>
<li id="mtopic6"><a id="glink6" class="tpclink a2menu" title="See All Participate" href="/global/mh/participate/index.html">Participate</a></li>
</ul>
</div>
</div></div></div></div>
</div></div>
<!-- END A2 COMPONENT V.1 -->
<!-- END GENERIC MASTHEAD -->
<!-- BEGIN BREADCRUMB -->
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="vatop">
<tr>
<td>      
<div class="breadcrumb">
<a href="http://developers.sun.com/">SDN Home</a>
 &gt; <a href="http://developers.sun.com/prodtech/index.html">Products & Technologies</a> &gt; <a href="http://java.sun.com/index.jsp">Java Technology</a> &gt; <a href="http://java.sun.com/reference/index.html">Reference</a> &gt; <a href="http://java.sun.com/reference/techart/index.html">Technical Articles and Tips</a> &gt; <a href="http://java.sun.com/developer/technicalArticles/index.html">Developer Technical Articles & Tips</a> &gt; <a href="http://java.sun.com/developer/technicalArticles/Programming/index.html">Programming & Debugging</a> &gt;
</div>
</td>
<td align="right" nowrap="nowrap"><div class="breadcrumb">
</div></td></tr>
<tr><td colspan="2"><img src="/im/a.gif" width="770" height="1" border="0" alt=" " /></td></tr>
</table>
<span class="sp5">&nbsp;</span><br />
<!-- END BREADCRUMB -->
<!-- BEGIN PAGETITLE -->
<div class="pagetitle2">Article</div>
<div class="smallpagetitle"><h1>HPROF: A Heap/CPU Profiling Tool in J2SE 5.0</h1></div>
<!-- END PAGETITLE -->
<!-- BEGIN WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<table border="0" cellpadding="10" cellspacing="0" width="100%">
<tr><td width="100%" valign="top">
<!-- BEGIN CENTRAL COLUMN COMPONENTS -->
<!--startindex-->
<!-- ============ -->
<!-- MAIN CONTENT -->
<!-- ============ -->
<a name="skip2content"></a>
<!--  BEGIN VCD4 PFV  -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr>
<td class="smaller" valign="top"><em></em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom"><div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a><br></td>
</tr></table></div>
</td></tr>
</table>
<!--  END VCD4 PFV -->
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tr><td class="smaller" valign="top"><em>
By <a href="#author">Kelly O'Hair</a>, November 18, 2004
</em></td>
<td width="10">&nbsp;</td>
<td align="right" valign="bottom">
<div class="sitelinks" style="padding:0px;">
<table border="0" cellpadding="0" cellspacing="0">
<tr>
<!--
<td valign="bottom" align="right"><img src="/im/ic_email.gif" width="14" height="12" border="0" hspace="4" vspace="1" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">E-mail</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right">&nbsp;</td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="/jsp_utils/PrintPage.jsp" target="printFriendlyView" onclick="openPopup('','printFriendlyView',710,650,'no',1,1,0,0,0,0); return true;"><img src="/im/ic_print.gif" width="14" height="12" alt="Print-friendly Version" border="0" hspace="4" />Print-friendly Version</a></td>
<td>&nbsp;&nbsp;</td>
<td valign="bottom" align="right"><img src="/im/ic_download_thin.gif" width="9" height="14" hspace="4" border="0" alt=" " /></td>
<td valign="bottom" class="smaller" nowrap="nowrap"><a href="#{link placeholder}">Download</a></td>
-->
</tr>
</table>
</div>
</td></tr>
</table>
<div class="contentdivider"><table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr></table></div>
<!--  END VCD4 BYLINE AND TOOLS  -->
<!-- BEGIN MAIN CONTENT -->
<p>
<a href="/developer/technicalArticles/">Articles Index</a>
</p>
<p>
The Java 2 Platform Standard Edition (J2SE) has always provided a simple command line profiling tool called HPROF for heap and cpu profiling. HPROF is actually a JVM native agent library which is dynamically loaded through a command line option, at JVM startup, and becomes part of the JVM process. By supplying HPROF options at startup, users can request various types of heap and/or cpu profiling features from HPROF. The data generated can be in textual or binary format, and can be used to track down and isolate performance problems involving memory usage and inefficient code. The binary format file from HPROF can be used with tools such as <a href="https://hat.dev.java.net" target="_blank">HAT</a> to browse the allocated objects in the heap.
</p>
<p>
In J2SE Version 5.0, HPROF has been implemented on the new Java Virtual Machine Tool Interface (<a href="/j2se/5.0/docs/guide/jvmti">JVM TI</a>).
</p>
<div><b>HPROF Startup</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
HPROF is capable of presenting CPU usage, heap allocation statistics, and monitor contention profiles. In addition, it can also report complete heap dumps and states of all the monitors and threads in the Java virtual machine. HPROF can be invoked by:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre><strong>java -agentlib:hprof[<i>=options</i>] ToBeProfiledClass<br></strong></pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
-OR-
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre><strong>java -Xrunhprof[:<i>options</i>] ToBeProfiledClass</strong></pre>
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
Depending on the type of profiling requested, HPROF instructs the virtual machine to send it the relevant JVM TI events and processes the event data into profiling information. For example, the following command obtains the heap allocation profile:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>
<strong>java -agentlib:hprof=heap=sites ToBeProfiledClass</strong>
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
Following is the complete list of options that can be passed to HPROF:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre><strong>java -agentlib:hprof=help</strong></pre>
<blockquote>
<pre><br>     HPROF: Heap and CPU Profiling Agent (JVM TI Demonstration Code)<br><br>hprof usage: java -agentlib:hprof=[help]|[&lt;option&gt;=&lt;value&gt;, ...]<br><br>Option Name and Value  Description                    Default<br>---------------------  -----------                    -------<br>heap=dump|sites|all    heap profiling                 all<br>cpu=samples|times|old  CPU usage                      off<br>monitor=y|n            monitor contention             n<br>format=a|b             text(txt) or binary output     a<br>file=&lt;file&gt;            write data to file             java.hprof[.txt]<br>net=&lt;host&gt;:&lt;port&gt;      send data over a socket        off<br>depth=&lt;size&gt;           stack trace depth              4<br>interval=&lt;ms&gt;          sample interval in ms          10<br>cutoff=&lt;value&gt;         output cutoff point            0.0001<br>lineno=y|n             line number in traces?         y<br>thread=y|n             thread in traces?              n<br>doe=y|n                dump on exit?                  y<br>msa=y|n                Solaris micro state accounting n<br>force=y|n              force output to &lt;file&gt;         y<br>verbose=y|n            print messages about dumps     y<br><br>Obsolete Options<br>----------------<br>gc_okay=y|n<br><br>Examples<br>--------<br>  - Get sample cpu information every 20 millisec, with a stack depth of 3:<br>      java -agentlib:hprof=cpu=samples,interval=20,depth=3 classname<br>  - Get heap usage information based on the allocation sites:<br>      java -agentlib:hprof=heap=sites classname<br><br>Notes<br>-----<br>  - The option format=b cannot be used with monitor=y.<br>  - The option format=b cannot be used with cpu=old|times.<br>  - Use of the -Xrunhprof interface can still be used, e.g.<br>       java -Xrunhprof:[help]|[&lt;option&gt;=&lt;value&gt;, ...]<br>    will behave exactly the same as:<br>       java -agentlib:hprof=[help]|[&lt;option&gt;=&lt;v!<br> alue&gt;, ...]<br><br>Warnings<br>--------<br>  - This is demonstratio<br>n code for the JVM TI interface and use of BCI,<br>    it is not an official product or formal part of the J2SE.<br>  - The -Xrunhprof interface will be removed in a future release.<br>  - The option format=b is considered experimental, this format may change<br>    in a future release.</pre>
</blockquote>
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
By default, heap profiling information (sites and dump) is written out to <code>java.hprof.txt</code> (ascii). The output in most cases will contain ID's for traces, threads,and objects. Each type of ID will typically start with a different number than the other ID's. For example, traces might start with 300000.
</p>
<p>
Normally the default (<code>force=y</code>) will clobber any existing information in the output file, so if you have multiple VMs running with HPROF enabled, you should use <code>force=n</code>, which will append additional characters to the output filename as needed.
</p>
<p>
The interval option only applies to <code>cpu=samples</code> and controls the time that the sampling thread sleeps between samples of the thread stacks.
</p>
<p>
The msa option only applies to Solaris and causes the Solaris Micro State Accounting to be used.
</p>
<p>
The interval, msa, and force options are new HPROF options in J2SE 1.5.
</p>
<div><b>Example Usage</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
We could create an application, but let's instead pick on an existing Java application in the J2SE, <code>javac</code>. With <code>javac</code> I need to pass Java options in with -J. If you were running Java directly, you would not use the -J prefix.
</p>
<p>
There is also a way to pass in J2SE 5.0 Java options with an environment variable JAVA_TOOL_OPTIONS, but with all environment variables you need to be careful that you don't impact more VMs than you intend.
</p>
<div><b>Heap Allocation Profiles (heap=sites)</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
Following is the heap allocation profile generated by running the Java compiler (<code>javac</code>) on a set of input files. Only parts of the profiler output file (java.hprof.txt) are shown here.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>Command used: javac -J-agentlib:hprof=heap=sites Hello.java<br><br>SITES BEGIN (ordered by live bytes) Fri Oct 22 11:52:24 2004<br>          percent          live          alloc'ed  stack class<br> rank   self  accum     bytes objs     bytes  objs trace name<br>    1 44.73% 44.73%   1161280 14516  1161280 14516 302032 java.util.zip.ZipEntry<br>    2  8.95% 53.67%    232256 14516   232256 14516 302033 com.sun.tools.javac.util.List<br>    3  5.06% 58.74%    131504    2    131504     2 301029 com.sun.tools.javac.util.Name[]<br>    4  5.05% 63.79%    131088    1    131088     1 301030 byte[]<br>    5  5.05% 68.84%    131072    1    131072     1 301710 byte[]
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
A crucial piece of information in heap profile is the amount of allocation that occurs in various parts of the program. The <code>SITES</code> record above tells us that 44.73% of the total space was allocated for <code>java.util.zip.ZipEntry</code> objects at a particular SITE (a unique stack trace of a fixed depth). Note that the amount of live data matches the total allocated numbers, which means that a garbage collection may have happened shortly before HPROF iterated over the heap. Normally the amount of live data will be less than or equal to the total allocation that has occurred at a given site.
</p>
<p>
A good way to relate allocation sites to the source code is to record the dynamic stack traces that led to the heap allocation. Following is another part of the <code>java.hprof.txt</code> file that illustrates the stack traces referred to by the top two allocation sites in the output shown above.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre><br>TRACE 302032:<br>        java.util.zip.ZipEntry.&lt;init&gt;(ZipEntry.java:101)<br>        java.util.zip.ZipFile$3.nextElement(ZipFile.java:435)<br>        java.util.zip.ZipFile$3.nextElement(ZipFile.java:413)<br>        com.sun.tools.javac.jvm.ClassReader.openArchive(ClassReader.java:1442)<br>TRACE 302033:<br>        com.sun.tools.javac.util.List.&lt;init&gt;(List.java:43)<br>        com.sun.tools.javac.util.List.&lt;init&gt;(List.java:51)<br>        com.sun.tools.javac.util.ListBuffer.append(ListBuffer.java:98)<br>        com.sun.tools.javac.jvm.ClassReader.openArchive(ClassReader.java:1442)</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
Each frame in the stack trace contains class name, method name, source file name, and the line number. The user can set the maximum number of frames collected by the HPROF agent (depth option). The default depth is 4. Stack traces reveal not only which methods performed heap allocation, but also which methods were ultimately responsible for making calls that resulted in memory allocation.
</p>
<p>
The above stack traces are shared with all the running threads, if it was necessary to separate the stack traces of different threads the thread option would need to be used. This will increase the space used and the number of stack traces in the output file.
</p>
<p>
If the depth of the stacks wasn't deep enough, the depth option could be used to increase the stack depth. Currently, recursion is not treated specially, so getting the caller information on very deep recursion stacks can be difficult. The larger the depth, the more space is needed to save the stack traces.
</p>
<p>
So what does the above information tell us? For <code>javac</code>, having lots of
<code>ZipEntry</code> and <code>List</code> class instances makes sense, so other than the fact that <code>javac</code> relies heavily on these classes there isn't much else to say. Normally you want to watch out for large accumulations of objects, allocated at the same location, that seem excessive.
</p>
<p>
Don't expect the above information to reproduce on identical runs with applications that are highly multi-threaded.
</p>
<p>
This option can impact the application performance due to the data gathering (stack traces) on object allocation and garbage collection.
</p>
<div><b>Heap Dump (heap=dump)</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
A complete dump of the current live objects in the heap can be obtained with:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>Command used: javac -J-agentlib:hprof=heap=dump Hello.java</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
This is a very large output file, but can be viewed and searched in any editor. But a better way to look at this kind of detail is with <a href="#HAT">HAT</a>. All the information of the above <code>heap=sites</code> option is included, plus the specific details on every object allocated and the references to all objects.
</p>
<p>
This option causes the greatest amount of memory to be used because it stores details on every object allocated, it can also impact the application performance due to the data gathering (stack traces) on object allocation and garbage collection.
</p>
<div><b>CPU Usage Sampling Profiles (cpu=samples)</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
HPROF can collect CPU usage information by sampling threads. Following
is part of the output collected from a run of the <code>javac</code> compiler.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>
Command used: javac -J-agentlib:hprof=cpu=samples Hello.java<br><br>CPU SAMPLES BEGIN (total = 126) Fri Oct 22 12:12:14 2004<br>rank   self  accum   count trace method<br>   1 53.17% 53.17%      67 300027 java.util.zip.ZipFile.getEntry<br>   2 17.46% 70.63%      22 300135 java.util.zip.ZipFile.getNextEntry<br>   3  5.56% 76.19%       7 300111 java.lang.ClassLoader.defineClass2<br>   4  3.97% 80.16%       5 300140 java.io.UnixFileSystem.list<br>   5  2.38% 82.54%       3 300149 java.lang.Shutdown.halt0<br>   6  1.59% 84.13%       2 300136 java.util.zip.ZipEntry.initFields<br>   7  1.59% 85.71%       2 300138 java.lang.String.substring<br>   8  1.59% 87.30%       2 300026 java.util.zip.ZipFile.open<br>   9  0.79% 88.10%       1 300118 com.sun.tools.javac.code.Type$ErrorType.&lt;init&gt;<br>  10  0.79% 88.89%       1 300134 java.util.zip.ZipFile.ensureOpen
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
The HPROF agent periodically samples the stack of all running threads to record the most frequently active stack traces. The <code>count</code> field above indicates how many times a particular stack trace was found to be active (not how many times a method was called). These stack traces correspond to the CPU usage hot spots in the application. This option does not require BCI or modifications of the classes loaded and of all the options causes the least disturbance of the application being profiled.
</p>
<p>
The interval option can be used to adjust the sampling time or the time that the sampling thread sleeps between samples.
</p>
<p>
So what does the above information tell us? First, statistically it's a pretty poor sample, only 126 samples, compiling a larger Java source file would probably yield better information, or better yet a large batch of Java sources. Second, this data pretty much matches the heap=sites data in that we know that <code>javac</code> relies heavily on the <code>ZipFile</code> class, which makes sense. It appears that any performance improvements in <code>ZipFile</code> will probably improve the performance of <code>javac</code>. The stack traces of interest here are:
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>
<code>TRACE 300027:<br>
java.util.zip.ZipFile.getEntry(ZipFile.java:Unknown line)<br>
java.util.zip.ZipFile.getEntry(ZipFile.java:253)<br>
java.util.jar.JarFile.getEntry(JarFile.java:197)<br>
java.util.jar.JarFile.getJarEntry(JarFile.java:180)<br>
TRACE 300135:<br>
java.util.zip.ZipFile.getNextEntry(ZipFile.java:Unknown line)<br>
java.util.zip.ZipFile.access$700(ZipFile.java:35)<br>
java.util.zip.ZipFile$3.nextElement(ZipFile.java:419)<br>
java.util.zip.ZipFile$3.nextElement(ZipFile.java:413)</code>
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
Don't expect the above information to reproduce on identical runs with highly multi-threaded applications, especially when the sample count is low.
</p>
<div><b>CPU Usage Times Profile (cpu=times)</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
HPROF can collect CPU usage information by injecting code into every method entry and exit, keeping track of exact method call counts and the time spent in each method. This uses Byte Code Injection (BCI) and runs considerably slower than cpu=samples. Following is part of the output collected from a run of the <code>javac</code> compiler.
</p>
<!-- BEGIN VCD7 CODE SAMPLE COMPONENT  -->
<table border="0" cellpadding="10" cellspacing="0" width="100%" class="grey4">
<tr><td>
<pre>
Command used: javac -J-agentlib:hprof=cpu=times Hello.java<br><br>CPU TIME (ms) BEGIN (total = 103099259) Fri Oct 22 12:21:23 2004<br>rank   self  accum   count trace method<br>   1  5.28%  5.28%       1 308128 com.sun.tools.javac.Main.compile<br>   2  5.16% 10.43%       1 308127 com.sun.tools.javac.main.Main.compile<br>   3  5.15% 15.58%       1 308126 com.sun.tools.javac.main.Main.compile<br>   4  4.07% 19.66%       1 308060 com.sun.tools.javac.main.JavaCompiler.compile<br>   5  3.90% 23.56%       1 306652 com.sun.tools.javac.comp.Enter.main<br>   6  3.90% 27.46%       1 306651 com.sun.tools.javac.comp.Enter.complete<br>   7  3.74% 31.21%       4 305626 com.sun.tools.javac.jvm.ClassReader.listAll<br>   8  3.74% 34.95%      18 305625 com.sun.tools.javac.jvm.ClassReader.list<br>   9  3.24% 38.18%       1 305831 com.sun.tools.javac.comp.Enter.classEnter<br>  10  3.24% 41.42%       1 305827 com.sun.tools.javac.comp.Enter.classEnter<br>  11  3.24% 44.65%       1 305826 com.sun.tools.javac.tree.Tree$TopLevel.accept<br>  12  3.24% 47.89%       1 305825 com.sun.tools.javac.comp.Enter.visitTopLevel<br>  13  3.23% 51.12%       1 305725 com.sun.tools.javac.code.Symbol.complete<br>  14  3.23% 54.34%       1 305724 com.sun.tools.javac.jvm.ClassReader.complete<br>  15  3.23% 57.57%       1 305722 com.sun.tools.javac.jvm.ClassReader.fillIn<br>  16  1.91% 59.47%      16 305611 com.sun.tools.javac.jvm.ClassReader.openArchive<br>  17  1.30% 60.78%     330 300051 java.lang.ClassLoader.loadClass<br>  18  1.28% 62.06%     330 300050 java.lang.ClassLoader.loadClass<br>  19  1.22% 63.28%     512 300695 java.net.URLClassLoader.findClass<br>  20  1.21% 64.48%     512 300693 java.net.URLClassLoader$1.run<br>  21  1.09% 65.57%   14516 305575 java.util.zip.ZipFile$3.nextElement<br>  22  0.98% 66.55%   14516 305574 java.util.zip.ZipFile$3.nextElement<br>  23  0.96% 67.52%       1 304560 com.sun.tools.javac.main.JavaCompiler.instance<br>  24  0.96% 68.48%       1 304559 com.sun.tools.javac.main.JavaCompiler.&lt;init&gt;<br>  25  0.71% 69.19%     256 302078 java.net.URLClassLoader.access$100
</pre>
</td></tr></table>
<span class="sp20"> </span><br /><br />
<!-- END VCD7 CODE SAMPLE COMPONENT  --> 
<p>
Here the count represents the true count of the times this method was entered, and the percentages represent a measure of thread time spent in those method.
</p>
<p>
The traces normally don't include line numbers but can be added with the <code>lineno</code> option.
</p>
<p>
Looking at the above data, it appears that even though some of the ZipFile$3 class methods are called over 14,000 times, they don't seem to be consuming vast amounts of CPU time. Again, this is probably represents a poor sample and I would not put much time into analyzing the above information.
</p>
<a name="HAT"></a>
<div><b>Using HAT with HPROF</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
<a  href="https://hat.dev.java.net/" target="_blank">HAT</a> (Heap Analysis Tool) is a browser based tool that uses the HPROF binary format to construct web pages so you can browse all the objects in the heap, and see all the references to and from objects.
</p>
<div><b>A Bit of HPROF History</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div> 
<p>
Previous releases of J2SE (1.2 through 1.4) contained an HPROF agent built on the experimental JVMPI. JVMPI worked fairly reliably in the old 1.2 Classic VM, but it was unreliable and difficult to maintain with the newer HotSpot VM and the different garbage collectors in the 1.3 and 1.4 releases. The newer JVM TI in J2SE 5.0 replaces both JVMDI and JVMPI. In the 5.0 release, JVMPI is still available, and the older HPROF JVMPI based agent from 1.4.2 can actually be used with 5.0, but it isn't recommended. The new HPROF, in J2SE 5.0, is (with minor exceptions) a fully functional replacement for the old HPROF but source wise was close to being a complete rewrite. All the old options are available, and the output format is basically the same. So if you are used to the old HPROF output, or you have tools that read any HPROF format, you won't see many differences and hopefully you will see fewer problems that you have seen in the past with the JVMPI-based HPROF. The source to HPROF is available with the full JDK download in the <code>demo/jvmti/hprof</code> installation directory.
</p>
<div><b>How Does HPROF Work?</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
HPROF is a dynamically-linked native library that uses JVM TI and writes out profiling information either to a file descriptor or to a socket in ascii or binary format. This information can be further processed by a profiler front-end tool or dumped to a file. It generates this information through calls to JVM TI, event callbacks from JVM TI, and through Byte Code Insertion (BCI) on all class file images loaded into the VM. JVM TI has an event called <code>JVMTI_EVENT_CLASS_FILE_LOAD_HOOK</code> which gives HPROF access to the class file image and an opportunity to modify that class file image before the VM actually loads it. Sound scary? It is, don't take BCI lightly. In the case of HPROF the BCI operations only instrument and don't change the behavior of the bytecodes. Use of JVM TI was pretty critical here for HPROF to do BCI because we needed to do BCI on ALL the classes, including early classes like <code>java.lang.Object</code>. Of course, the instrumentation code needs to be made inoperable until the VM has reached a stage where this inserted code can be executed, normally the event <code>JVMTI_EVENT_VM_INIT</code>.
</p>
<p>
The amount of BCI that HPROF does depends on the options supplied, cpu=times triggers insertions into all method entries and exits, and the heap options trigger BCI on the <code>&lt;init&gt;</code> method of <code>java.lang.object</code> and any '<code>newarray</code>' opcodes seen in any method. This BCI work is actually done through the shared library <code>java_crw_demo</code>, which accepts a set of options, a class file image, and returns a new class file image. The <code>java_crw_demo</code> library is part of the sources delivered with the J2SE 5.0 in the <code>demo/jvmti</code> directory.
</p>
<p>
Currently HPROF injects calls to static Java methods which in turn call a native method that is in the HPROF agent library itself. This was an early design choice to limit the extra Java code introduced during profiling. So the combination of the requested JVM TI events, and the created BCI events, provides the basics for HPROF to work. 
</p>
<p>
The cpu=samples option doesn't use BCI, HPROF just spawns a separate thread that sleeps for a fixed number of micro seconds, and wakes up and samples all the running thread stacks using JVM TI.
</p>
<p>
The cpu=times option attempts to track the running stack of all threads, and keep accurate CPU time usage on all methods. This option probably places the greatest strain on the VM, where every method entry and method exit is tracked. Applications that make many method calls will be impacted more than others.
</p>
<p>
The heap=sites and heap=dump options are the ones that need to track object allocations. These options can be memory intensive (less so with hprof=sites) and applications that allocate many objects or allocate and free many objects will be impacted more with these options. On each object allocation, the stack must be sampled so we know where the object was allocated, and that stack information must be saved. HPROF has a series of tables allocated in the C or <code>malloc()</code> heap that track all it's information. HPROF currently does not allocate any Java objects.
</p>
<div><b>Summary</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
As you can see, the HPROF agent can be used to generate a wide variety of profiles. But as the above examples using <code>javac</code> demonstrate, make sure you have a large enough sampling to know that your data makes sense.
</p>
<p>
Brave C/JNI programmers could even take the source to HPROF (it's available in the J2SE SDK download in the <code>demo/jvmti/hprof</code> directory) and customize it or create their own special profiling tool.
</p>
<div><b>Additional Information</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<ul>
<li><a
href="http://java.sun.com/developer/technicalArticles/Programming/jvmpitransition/">The JVMPI Transition to JVM TI</a></li>
<li><a
href="http://java.sun.com/developer/technicalArticles/Programming/jvmti/">Creating a Debugging and Profiling Agent with JVM TI,</a></li>
<li><a href="http://java.sun.com/j2se/1.5/pdf/jdk50_ts_guide.pdf">Troubleshooting Guide for J2SE 5.0</a> (pdf)</li>
<li><a
href="http://profiler.netbeans.org/" target="_blank">The NetBeans Profiler Project</a></li>
<li><a href="https://hat.dev.java.net/">Heap Analysis Tool</a></li>
<li><a
href="http://java.sun.com/j2se/5.0/docs/guide/jvmti/index.html">JVM TI Reference</a></li>
<li><a
href="http://developers.sun.com/sunstudio/articles/perftools_tip.html">A Quick Start Guide To The Performance Tools</a></li>
</ul>
<div><b><a name="author"></a>About the Author</b></div>
<div class="contentdivider">
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="grey4">
<tr><td><img src="/im/a.gif" width="1" height="4" border="0" alt=" " /></td></tr>
</table>
</div>
<p>
Kelly O'Hair is a Senior Staff Engineer in Sun Microsystems' Java Serviceability group. He has been at Sun for over 11 years having worked on dbx, Java WorkShop, fastjavac, Java on Solaris, native compiler Dwarf debug format generation, and the Native Connector Tool that allows Java easy access to native shared libraries. More recently Kelly has been working with the JVM TI interface, making sure this new interface is well tested, documented, and easy to use. He holds an M.S. degree in Computing Science from University of California, Davis and a B.A. in Mathematics from California State University, Long Beach.
</p>
<!-- BEGIN RATE AND REVIEW G16 var1 -->
<script type="text/javascript">
<!-- Hide script from older browsers
// Popup window function
function onRateSubmitHandler()
{
var w = window.open("","rr","width=800,height=600,status=no,toolbar=no,scrollbars=yes"); 
w.setTimeout("window.close();", 30000 );
return true;
}
// End of javascript 
-->
</script>
<form name="form" method="post" action="https://www2.sun.de/dc/servlets/incoming" onSubmit="return onRateSubmitHandler()" target="rr">
<input type="hidden" name="errcount" value="1" />
<input type="hidden" name="ref" value="http://www2.sun.de/dc/forms/reg_xh_2610_243.jsp">
<input type="hidden" name=""  value="">
<table width="100%" cellspacing="0" cellpadding="1" border="0" class="dkgrey" style="margin-top:7px"><tr><td>
<table width="100%" cellspacing="0" cellpadding="4" border="0" class="white">
<tr><td class="dkgrey1"><b>Rate and Review</b></td></tr>
<tr><td>Tell us what you think of the content of this page.</td></tr>
<tr><td><b>
<input type="radio" name="custom_3" value="Excellent"> Excellent&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Good"> Good&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Fair"> Fair&nbsp;&nbsp;
<input type="radio" name="custom_3" value="Poor"> Poor&nbsp;&nbsp;
</b></td></tr>
<tr><td>
<b>Comments:</b><br><textarea name="custom_2" cols="60" rows="3" wrap="virtual"></textarea></td></tr>
<tr><td>
<b>Your email address (no reply is possible without an address):</b><br>
<a href="http://sun.com/privacy/" target="_new">Sun Privacy Policy</a><br>
<input type="text" name="custom_1" value="" size="35" maxlength="60"> <br>
Note: We are not able to respond to all submitted comments.</td></tr>
<tr><td>
<input type="submit" border="0" class="buttonblue" value="&nbsp;Submit &raquo;&nbsp;" onmouseover="this.style.color='#fbe249';" onmouseout="this.style.color='#FFF';">
<input type="hidden" name="custom_0" value="Kelly O'Hair">
<input type="hidden" name="custom_4" value="HPROF, a heap/cpu profiling tools in J2SE 5.0">
<input type="hidden" name="custom_5" value="http://java.sun.com/developer/technicalArticles/Programming/HPROF.html">
<input type="hidden" name="cf_Form_Name" value="Rate and Review - article feedback" />
<input type="hidden" name="cf_Form_Location" value="Registrations" />
<input type="hidden" name="cf_iso2" value="XH" />
<input type="hidden" name="charset" value="ISO-8859-1">
</td></tr></table></td></tr>
</table></form>
<!-- END RATE AND REVIEW G16 var1-->
<!-- =================== -->
<!-- END OF MAIN CONTENT -->
<!-- =================== -->
<!--stopindex-->
<!-- END CENTRAL COLUMN COMPONENTS -->
</td><td valign="top">
<!-- BEGIN RIGHT COLUMN COMPONENTS -->
<!-- END RIGHT COLUMN COMPONENTS -->
</td></tr>
<!-- BEGIN SPACER ROW -->
<tr><td><img src="/im/a.gif" width="560" height="1" border="0" alt=" " /></td><td><img src="/im/a.gif" width="170" height="1" border="0" alt=" " /></td></tr>
<!-- END SPACER ROW -->
</table>
<!-- END WRAPPER TABLE, 2 COLUMN, MAIN/RIGHT -->
<!-- BEGIN PC1 COMPONENT V.2 -->
<div class="pc1 pc1v2" style="margin:0 10px">
<div class="pc1w1"><div class="pc1w2"><div class="pc1w3 cornerBL"><div class="pc1w4">
<p>Oracle is reviewing the Sun product roadmap and will provide guidance to customers in accordance with Oracle's standard product communication policies. Any resulting features and timing of release of such features as determined by Oracle's review of roadmaps, are at the sole discretion of Oracle. All product roadmap information, whether communicated by Sun Microsystems or by Oracle, does not represent a commitment to deliver any material, code, or functionality, and should not be relied upon in making purchasing decisions. It is intended for information purposes only, and may not be incorporated into any contract.</p>
</div></div></div></div>
</div>
<!-- END PC1 COMPONENT V.2 -->
<!-- BEGIN G9 VARIATION 0 -->
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_engine.js"></script>
<script language="javascript" type="text/javascript" charset="UTF-8" src="/js/op/oo_conf_en-US.js"></script>
<!-- END G9 VARIATION 0 -->
<!-- BEGIN VNV5 FOOTER  -->
<table border="0" cellpadding="0" cellspacing="10" width="100%">
<tr>
<td>
<table border="0" cellpadding="0" cellspacing="0" width="100%" class="vatop">
<tr>
<td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
<tr>
<td><img src="http://developers.sun.com/im/a.gif" width="190" height="1" border="0" alt="" /><br />
<a href="http://www.oracle.com/index.html"><img src="/im/logo_oracle_footer.gif" width="93" height="29" border="0" alt="" vspace="5"/></a></td>
<td width="100%" valign="top"><img src="/im/a.gif" width="350" height="1" border="0" alt="" /><br />
<div class="footer">
<a href="http://developers.sun.com/global/aboutsun.html">About Sun</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/aboutsdn.html">About This Site</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/newsletters.html">Newsletters</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/contact.html">Contact Us</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/employment.html">Employment</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/howtobuy.html">How to Buy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/licensing.html">Licensing</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/termsofuse.html">Terms of Use</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/privacy.html">Privacy</a> &nbsp;|&nbsp;
<a href="http://developers.sun.com/global/trademarks.html">Trademarks</a>
<br /><span class="sp10">&nbsp;</span><br />
<br /><span class="sp10">&nbsp;</span><br />
<!-- <span id="copyDate" class="cssDate"></span>--> &copy; 2010, Oracle Corporation and/or its affiliates
</div></td>
<td><img src="/im/a.gif" width="40" height="1" border="0" alt="" /></td>
<td valign="top"><div class="footer"><b><a href="http://developers.sun.com/global/aboutsdn.html">A Sun Developer Network Site</a></b></div>
<div class="footer">
<img src="/im/a.gif" width="170" height="1" border="0" alt="" /><br />
Unless otherwise licensed, code in all technical manuals herein (including articles, FAQs, samples) is provided under this <a href="http://developers.sun.com/global/berkeley_license.html">License</a>.
<br /><span class="sp5">&nbsp;</span><br />
<a href="http://developers.sun.com/global/rss_sdn.html"><img src="/im/ic_feed_16x.gif" width="16" height="16" align="top" border="0" alt="XML" /></a>&nbsp;<a href="http://developers.sun.com/global/content_feeds.html">Sun Developer RSS Feeds</a>
</div></td></tr>
<tr><td colspan="4" valign="top" class="grey3"><img src="/im/a.gif" width="1" height="2" border="0" alt="" /></td></tr>
</table>
</td></tr>
</table>
<!-- END VNV5 FOOTER -->
<script language="JavaScript" src="/js/omi/jsc/s_code_remote.js"></script></body>
</html>




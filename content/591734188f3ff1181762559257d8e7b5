<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">
<HTML LANG="en">
 <HEAD>
  <TITLE>Frink</TITLE>
  <META NAME="keywords" CONTENT="Frink, unit conversion, unit converter,
   units of measure, convert, conversion, converter, converting, units,
   currency conversion, calculator, historical, currency, conversion,
   programming language, interval arithmetic, interval computations">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
  <META HTTP-EQUIV="Default-Style" CONTENT="APE Airy"> 
  <LINK REL="StyleSheet" HREF="apeairy.css" TYPE="text/css"
        TITLE="APE Airy">
  <LINK REL="Alternate StyleSheet" HREF="spaceship.css" TYPE="text/css"
        TITLE="Spaceship">
  <LINK REL="Alternate StyleSheet" HREF="style.css" TYPE="text/css"
        TITLE="APE Classic">
  <LINK REL="Alternate StyleSheet" HREF="style2.css" TYPE="text/css"
        TITLE="Compact" MEDIA="screen,print,handheld"> 
  <LINK REL="StyleSheet" HREF="style2.css" TYPE="text/css"
        TITLE="Print" MEDIA="print,handheld"> 
  <LINK REL="icon" HREF="/images/futureboyicon.png" TYPE="image/png">
 </HEAD>
 
 <BODY>
  <H1>Frink</H1>
  <P CLASS="CENTER">
   <A HREF="whatsnew.html">What's&nbsp;New</A> *
   <A HREF="faq.html">FAQ</A> *
   <A HREF="#JavaWebStart">Download</A> *
   <A HREF="FrinkApplet.html">Frink&nbsp;Applet</A> *
   <A HREF="/fsp/frink.fsp">Web&nbsp;Interface</A> *
   <A HREF="/fsp/samples.fsp">Sample&nbsp;Programs</A> *
   <A HREF="fspdocs.html">Frink&nbsp;Server&nbsp;Pages</A> *
   <A HREF="android.html">Frink&nbsp;on&nbsp;Android</A> *
   <A HREF="donate.html">Donate</A>
  </P>

  <H2><A NAME="AboutFrink">About Frink</A></H2>
  <P>
   Frink is a practical calculating tool and programming language designed to
   make physical calculations simple, to help ensure that answers come out
   right, and to make a tool that's really useful in the real world.  It
   tracks units of measure (feet, meters, kilograms, watts, etc.) through all
   calculations, allowing you to mix units of measure transpa
  rently, and helps
   you easily verify that your answers make sense.  It also contains a large
   <A HREF="/frinkdata/units.txt">data file</A> of physical quantities,
   freeing you from having to look them up, and freeing you to make
   effortless calculations without getting bogged down in the mechanics.
  </P>

  <P>
   Perhaps you'll get the best idea of what Frink can do if you skip down to
   the <A HREF="#SampleCalculations">Sample Calculations</A> further on this
   document.  Come back up to the top when you're done.
  </P>

  <P>
   Frink was named after one of my personal heroes, and great scientists of
   our time, the brilliant Professor John Frink.  Professor Frink noted,
   decades ago:
  </P>

  <BLOCKQUOTE>
   <P>
    <I>"I predict that within 100 years, computers will be twice as powerful,
     ten <B>thousand</B> times larger, and so expensive that only the five
     richest kings of Europe will own them."</I>
   </P>
  </BLOCKQUOTE>

  <H2><A NAME="Features">Features</A></H2>
  <P>
   For those with a short attention span like me, here are some of the
   features of Frink.
  </P>

  <UL>
   <LI><A HREF="#HowFrinkIsDifferent">Tracks units of measure</A> (feet,
    meters, tons, dollars, watts, etc.) through all calculations and allows
    you to add, subtract, multiply, and divide them effortlessly, and makes
    sure the answer comes out correct, even if you mix units like gallons and
    liters.

   <LI><A HREF="#NumericTypes">Arbitrary-precision math</A>, including huge
    integers and floating-point numbers, rational numbers (that is, fractions
    like 1/3 are kept without loss of precision,) complex numbers, and
    intervals.

   <LI><A HREF="#CommonFunctions">Advanced mathematical functions</A>
    including trigonometric functions (even for complex numbers,) <A
     HREF="#NumberTheory">factoring and primality testing</A>, and <A
     HREF="#AllYourBaseConversions">base conversions</A>.

   <LI><A HREF="#Conversions">Unit Conversion</A> between thousands of unit
     types with a <EM>huge</EM> built-in <A HREF="/frinkdata/units.txt">data
      file</A>.

   <LI><A HREF="#DateTimeHandling">Date/time math</A> (add offsets to dates,
    find out intervals between times,) timezone conversions, and
    user-modifiable date formats.

   <LI><A HREF="#TextTranslation">Translates</A> between several human
    languages, including English, French, German, Spanish, Portuguese, Dutch,
    Korean, Japanese, Russian, Chinese, Swedish, and Arabic.

   <LI>Calculates historical buying power of the <A
     HREF="#HistoricalUSPriceData">U.S. dollar</A> and <A
     HREF="#HistoricalBritishPriceData">British pound</A>.

   <LI>Calculates <A HREF="#InternationalExchangeRates">exchange rates</A>
    between most of the world's currencies.

   <LI>Powerful Perl-like <A HREF="#RegularExpressions">regular expression</A>
    capabilities and text processing.

   <LI>Supports <A HREF="#UnicodeInFrink">Unicode</A> throughout, allowing
    processing of almost all of the world's languages.

   <LI>Supports <A HREF="#IntervalArithmetic">Interval Arithmetic</A> (also
    known as <EM>Interval Computations</EM>) in calculations, allowing you to
    automagically calculate error bounds and uncertainties in all of your
    calculations.

   <LI>Reads <A HREF="#InputAndOutput">HTTP and FTP-based URLs</A> as easily
    as reading local files, allowing fetching of live web-based data.

   <LI>Runs on most major operating systems (anything with Java 1.1 or later,)
    as an <A HREF="FrinkApplet.html">applet</A>, through a <A
     HREF="/fsp/frink.fsp">web-based interface</A>, on a <A
     HREF="#Wireless">wireless Palm VII</A>, on an HDML- or WML-based <A
     HREF="#Wireless">webphone</A>, and on <A HREF="#SmallDevices">many mobile
     phones and hand-held devices</A>.

   <LI>Installs itself on your system in seconds using <A
     HREF="#JavaWebStart">Java Web Start</A> and automatically keeps itself
    updated when new versions of Frink are released.

   <LI>Runs with a <A HREF="#UserInterfaceOptions">Graphical User
     Interface</A> (Swing, AWT, and <A HREF="android.html">Android</A>) or a
     command-line interface. 

   <LI>User interface has a <A HREF="#ProgrammingMode">Programming Mode</A>
    which allows you to write, edit, save, and run extremely powerful programs
    even on a handheld device.

   <LI>Frink has a simple but powerful system for drawing <A
     HREF="#Graphics">graphics</A> which are resizable, support transparency
    and anti-aliasing, and can be printed or written to image files.  Graphics
    can also have exact lengths, so that a 3-centimeter line is three
    centimeters long when printed.

   <LI>Powers <A HREF="fspdocs.html">Frink Server Pages</A>, a system for
    providing dynamic web pages powered by Frink.

   <LI>Frink is a full-fledged programming language with <A
     HREF="#Arrays">arrays</A>, <A HREF="#Dictionaries">dictionaries</A>,
    <A HREF="#Sets">sets</A>,
    <A HREF="#Functions">functions</A>, <A HREF="#Loops">loops</A>, even
    object-oriented programming and <A
     HREF="#SelfEvaluation">self-evaluation</A>.

   <LI>Frink allows <A HREF="#ObjectOrientedProgramming">Object-Oriented
     Programming</A>, which allows you to create complex data structures that
    are still easy to use.

   <LI><A HREF="#JavaIntrospection">Java Introspection</A> layer allows you to
    call any Java code from within Frink.

   <LI>Frink can also be <A HREF="#EmbeddingFrink">embedded in a Java
     program</A>, giving your Java programs all the power of Frink.

   <LI>Did I mention it's free?  If you find it useful, please <A
     HREF="donate.html">donate</A> something.  I'd really appreciate it!
  </UL>

  <H2><A NAME="GetNotified">Get Notified</A></H2>
  <P>
   Frink changes almost every day.  If your version of Frink is more than a
   few days old, you're probably out of date!  The latest versions are always
   available here.  Keep an eye on the <A HREF="whatsnew.html">What's New</A>
   page to see new features and keep abreast of its rapid developments.  If
   you'd like to be informed of new releases via e-mail, subscribe to the "<A
   HREF="http://freshmeat.net/projects/frinklang/" TARGET="_blank">Frink
   Language</A>" project at freshmeat.net.  (Link opens in new window.)
  </P>

  <H2><A NAME="Donate">Donate</A></H2>
  <P>
   You can download and use Frink free of charge.  If you find Frink useful,
   there are lots of ways you can <A HREF="donate.html">donate to its further
   development.</A> I'd really appreciate it!
  </P>

  <H2><A NAME="MailingList">Mailing List</A></H2>
  <P>
   If you'd like to discuss Frink with others, you might want to join the
   <A HREF="http://groups.yahoo.com/group/frink/" TARGET="_blank">mailing
    list</A>.  (Hosted by Yahoo! Groups.  Link opens in new window.)
  </P>

  <form method="get" action="http://groups.yahoo.com/subscribe/frink"
   TARGET="_blank">
   <table cellspacing="0" cellpadding="2" border="0" bgcolor="#ffffcc"
    SUMMARY="Useless formatting table for Yahoo Groups">
     <tr>
      <th colspan="2" align="center">
       Subscribe to Frink
      </th>
     </tr>
     <tr>
      <td>
       <LABEL FOR="user">Enter Email Address:</LABEL>
       <input type="text" id="user" name="user" size="20"
        onFocus="if (value=='enter email address') value='';">
      </td>
      <td>
       <input type="image" alt="Click here to join Frink group at Yahoo"
        name="Click here to join Frink group at Yahoo"
        src="images/joinyahoo.gif">
      </td>
     </tr>
   </table>
  </form>

  <H2><A NAME="PresentationsAndPapers">Presentations and Papers</A></H2>
  <P>
   You can read (and watch using RealPlayer) my presentation <A
   HREF="LL4.html" TARGET="_blank"><I>Frink -- A Language for Understanding the
   Physical World</I></A> that I gave on Frink at the Lightweight Languages 4
   conference at MIT.  This discusses some of the design decisions of Frink,
   how it has evolved, implementation details, and future directions for the
   language.
  </P>
  
  <!--TOC begin-->
  <H2>Table of Contents</H2>

  <UL>
   <LI CLASS="dense"><A HREF="#AboutFrink">About Frink</A>
   <LI CLASS="dense"><A HREF="#Features">Features</A>
   <LI CLASS="dense"><A HREF="#GetNotified">Get Notified</A>
   <LI CLASS="dense"><A HREF="#MailingList">Mailing List</A>
    
   <LI CLASS="dense">Using Frink
    <UL>
     <LI CLASS="dense"><A HREF="#TryAsYouRead">Try as you read</A>
     <LI CLASS="dense"><A HREF="#JavaWebStart">Download Using Java Web Start</A>
     <LI CLASS="dense"><A HREF="#UserInterfaceOptions">User Interface Options</A>
      <UL>
       <LI CLASS="dense"><A HREF="#SwingUserInterface">Swing User Interface</A>
       <LI CLASS="dense"><A HREF="#AWTUserInterface">AWT User Interface</A>
      </UL>
     <LI CLASS="dense"><A HREF="#FrinkAsAnApplet">Frink As An Applet</A>
     <LI CLASS="dense"><A HREF="#MinimalistWebInterface">Minimalist Web Interface</A>
     <LI CLASS="dense"><A HREF="#Wireless">Wireless</A>
     <LI CLASS="dense"><A HREF="#BrowserShortcuts">Browser Shortcuts</A>
     <LI CLASS="dense"><A HREF="#SearchPlugins">Search Plugins</A>
     <LI CLASS="dense"><A HREF="#BrowserKeywords">Browser Keywords</A>
    </UL>
   <LI CLASS="dense"><A HREF="#DownloadingFrink">Downloading Frink</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SmallDevices">Small Devices</A>
     <LI CLASS="dense"><A HREF="#DashboardWidget">Dashboard Widget</A>
     <LI CLASS="dense"><A HREF="#GoogleGadget">Google Gadget</A>
    </UL>
   <LI CLASS="dense"><A HREF="#ExperimentalVersions">Experimental Versions</A>
   <LI CLASS="dense"><A HREF="#ProgrammingMode">Programming Mode</A>
   <LI CLASS="dense"><A HREF="#RunningFrink">Running Frink</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SampleStartScripts">Sample Start Scripts</A>
     <LI CLASS="dense"><A HREF="#CommandLineOptions">Command-Line Options</A>
     <LI CLASS="dense"><A HREF="#GUIOptions">GUI Options</A>
     <LI CLASS="dense"><A HREF="#PerformanceTips">Performance Tips</A>
     <LI CLASS="dense"><A HREF="#ProxyConfiguration">Proxy Configuration</A>
    </UL>
   <LI CLASS="dense"><A HREF="#HowFrinkIsDifferent">How Frink is Different</A>
   <LI CLASS="dense"><A HREF="#NumericTypes">Numeric Types</A>
   <LI CLASS="dense"><A HREF="#DataLibraries">Data Libraries</A>
   <LI CLASS="dense"><A HREF="#IntegratedHelp">Integrated Help</A>
   <LI CLASS="dense"><A HREF="#EditingFrink">Editing Frink</A>
   <LI CLASS="dense"><A HREF="#Conversions">Conversions</A>
    <UL>
     <LI CLASS="dense"><A HREF="#MultipleConversions">Multiple Conversions</A>
    </UL>
   <LI CLASS="dense"><A HREF="#MathOperators">Math Operators</A>
   <LI CLASS="dense"><A HREF="#Variables">Variables</A>
    <UL>
     <LI CLASS="dense"><A HREF="#DeclaringVariables">Declaring Variables</A>
     <LI CLASS="dense"><A HREF="#ConstraintsOnVariables">Constraints on
       Variables</A>
      <UL>
       <LI CLASS="dense"><A HREF="#ConstrainingByDimensions">Constraining by Dimensions</A>
       <LI CLASS="dense"><A HREF="#ConstrainingToBuiltInTypes">Constraining to
         Built-in Types</A>
       <LI CLASS="dense"><A HREF="#ConstrainingByObjectType">Constraining by
         Object Type</A>
       <LI CLASS="dense"><A HREF="#ConstraintFunctions">Constraint Functions</A>
      </UL>
     <LI CLASS="dense"><A HREF="#TestingVariables">Testing Variables</A>
    </UL>
    <UL>
     <LI CLASS="dense"><A HREF="#UnicodeInFrink">Unicode in Frink</A>
    </UL>
   <LI CLASS="dense"><A HREF="#SettingDisplayUnits">Setting Display Units</A>
   <LI CLASS="dense"><A HREF="#SettingPrecision">Setting Precision</A>
   <LI CLASS="dense"><A HREF="#SettingNumberFormats">Setting Number Formats</A>
   <LI CLASS="dense"><A HREF="#Functions">Functions</A>
    <UL>
     <LI CLASS="dense"><A HREF="#MultiLineFunctions">Multi-line Functions</A>
     <LI CLASS="dense"><A HREF="#DefaultValues">Default Values</A>
     <LI CLASS="dense"><A HREF="#MultipleReturnValues">Multiple Return Values</A>
     <LI CLASS="dense"><A HREF="#RecursiveFunctions">Recursive Functions</A>
     <LI CLASS="dense"><A HREF="#ConstrainingFunctionArguments">Constraining Function Arguments</A>
    </UL>
   <LI CLASS="dense"><A HREF="#IfThenElse">If/Then/Else</A>
   <LI CLASS="dense"><A HREF="#Truth">Truth</A>
   <LI CLASS="dense"><A HREF="#Loops">Loops</A>
    <UL>
     <LI CLASS="dense"><A HREF="#WhileLoop">While Loop</A>
     <LI CLASS="dense"><A HREF="#DoWhileLoop">Do...While Loop</A>
     <LI CLASS="dense"><A HREF="#ForLoop">For Loop</A>
    </UL>
   <LI CLASS="dense"><A HREF="#SelfEvaluation">Self-Evaluation</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SecurityRestrictionsOnEval">Security Restrictions on eval[]</A>
    </UL>
   <LI CLASS="dense"><A HREF="#Arrays">Arrays</A>
    <UL>
     <LI CLASS="dense"><A HREF="#ArrayMethods">Array Methods</A>
    </UL>
   <LI CLASS="dense"><A HREF="#Input">Input</A>
   <LI CLASS="dense"><A HREF="#Output">Output</A>
   <LI CLASS="dense"><A HREF="#BooleanOperators">Boolean Operators</A>
   <LI CLASS="dense"><A HREF="#Dictionaries">Dictionaries</A>
   <LI CLASS="dense"><A HREF="#Sets">Sets</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SetFunctions">Set Functions</A>
    </UL>
   <LI CLASS="dense"><A HREF="#CommonFunctions">Common Functions</A>
    <UL>
     <LI CLASS="dense"><A HREF="#RoundingFunctions">Rounding Functions</A>
     <LI CLASS="dense"><A HREF="#NumberTheory">Number Theory</A>
     <LI CLASS="dense"><A HREF="#OtherFunctions">Other Functions</A>
     <LI CLASS="dense"><A HREF="#CryptographicFunctions">Cryptographic Functions</A>      
     <LI CLASS="dense"><A HREF="#AllYourBaseConversions">All Your Base Conversions...</A>
    </UL>
   <LI CLASS="dense"><A HREF="#Strings">Strings</A>
    <UL>
     <LI CLASS="dense"><A HREF="#UnicodeInStrings">Unicode in Strings</A>
     <LI CLASS="dense"><A HREF="#UnicodeCharacterCodes">Unicode Character Codes</A>
     <LI CLASS="dense"><A HREF="#UpperLowerCase">Upper/Lower Case</A>
     <LI CLASS="dense"><A HREF="#Substrings">Substrings</A>
     <LI CLASS="dense"><A HREF="#OtherStringFunctions">Other String Functions</A>
     <LI CLASS="dense"><A HREF="#MultiLineStrings">Multi-Line Strings</A>
     <LI CLASS="dense"><A HREF="#StringInterpolation">String Interpolation</A>
    </UL>
   <LI CLASS="dense"><A HREF="#TextTranslation">Text Translation</A>
    <UL>
     <LI CLASS="dense"><A HREF="#TranslationPairs">Translation Pairs</A>
     <LI CLASS="dense"><A HREF="#TranslatorProgram">Translator Program</A>
    </UL>
   <LI CLASS="dense"><A HREF="#DateTimeHandling">Date/Time Handling</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SpecifyingTimezones">Specifying Timezones</A>
     <LI CLASS="dense"><A HREF="#ListingTimezones">Listing Timezones</A>
     <LI CLASS="dense"><A HREF="#SettingDefaultTimezone">Setting Default Timezone</A>
     <LI CLASS="dense"><A HREF="#SloppyTimeSpecifications">Sloppy Time Specifications</A>
     <LI CLASS="dense"><A HREF="#CurrentTime">Current Time</A>
     <LI CLASS="dense"><A HREF="#TimezoneConversions">Timezone Conversions</A>
     <LI CLASS="dense"><A HREF="#DateTimeArithmetic">Date/Time Arithmetic</A>
     <LI CLASS="dense"><A HREF="#NotesOnDates">Notes on Dates</A>
    </UL>
   <LI CLASS="dense"><A HREF="#DefiningNewDateTimeFormats">Defining New Date/Time Formats</A>
    <UL>
     <LI CLASS="dense"><A HREF="#OtherDateFormats">Other Date Formats</A>
     <LI CLASS="dense"><A HREF="#DynamicalTime">Dynamical Time</A>
     <LI CLASS="dense"><A HREF="#InternationalAtomicTime">International Atomic
      Time (TAI)</A>
     <LI CLASS="dense"><A HREF="#OtherTimeSystems">Other Time Systems</A>
    </UL>
   <LI CLASS="dense"><A HREF="#RegularExpressions">Regular Expressions</A>
    <UL>
     <LI CLASS="dense"><A HREF="#IteratingMatches">Iterating Matches</A>
    </UL>
   <LI CLASS="dense"><A HREF="#SearchAndReplace">Search and Replace</A>
    <UL>
     <LI CLASS="dense"><A HREF="#SubstitutionWithExpressions">Substitution with Expressions</A>
    </UL>
   <LI CLASS="dense"><A HREF="#JoiningAndSplittingArrays">Joining and Splitting Arrays</A>
   <LI CLASS="dense"><A HREF="#InputAndOutput">Input and Output</A>
    <UL>
     <LI CLASS="dense"><A HREF="#ReadingLines">Reading Lines</A>
     <LI CLASS="dense"><A HREF="#ReadingEntireFiles">Reading Entire Files</A>
     <LI CLASS="dense"><A HREF="#SpecifyingAlternateEncodings">Specifying Alternate Encodings</A>
     <LI CLASS="dense"><A HREF="#EmailHarvesting">E-mail Harvesting</A>
     <LI CLASS="dense"><A HREF="#StrippingHTML">Stripping HTML</A>
     <LI CLASS="dense"><A HREF="#URLManipulation">URL Manipulation</A>
    </UL>
   <LI CLASS="dense"><A HREF="#AnonymousFunctions">Anonymous Functions</A>
   <LI CLASS="dense"><A HREF="#Sorting">Sorting</A>
   <LI CLASS="dense"><A HREF="#IncludingOtherFiles">Including Other Files</A>
   <LI CLASS="dense"><A HREF="#ObjectOrientedProgramming">Object-Oriented
     Programming</A>
   <LI CLASS="dense"><A HREF="#Graphics">Graphics</A>
    <UL>
     <LI CLASS="dense"><A HREF="#IntroductionToGraphics">Introduction to
       Graphics</A>
     <LI CLASS="dense"><A HREF="#Coordinates">Coordinates</A>
     <LI CLASS="dense"><A HREF="#ShapesAndColors">Shapes and Colors</A>
     <LI CLASS="dense"><A HREF="#AdvancedShapes">Advanced Shapes</A>
     <LI CLASS="dense"><A HREF="#GraphicsWithText">Graphics with Text</A>
     <LI CLASS="dense"><A HREF="#ShowingGraphics">Showing Graphics</A>
     <LI CLASS="dense"><A HREF="#Images">Images</A>
     <LI CLASS="dense"><A HREF="#Animation">Animation</A>
     <LI CLASS="dense"><A HREF="#SampleGraphicsPrograms">Sample Graphics Programs</A>
    </UL>
   <LI CLASS="dense"><A HREF="#TemperatureScales">Temperature Scales</A>
   <LI CLASS="dense"><A HREF="#OtherDataSources">Other Data Sources</A>
    <UL>
     <LI CLASS="dense"><A HREF="#HistoricalUSPriceData">Historical U.S. Price Data</A>
     <LI CLASS="dense"><A HREF="#HistoricalBritishPriceData">Historical British Price Data</A>
     <LI CLASS="dense"><A HREF="#InternationalExchangeRates">International Exchange Rates</A>
    </UL>
   <LI CLASS="dense"><A HREF="#JavaIntrospection">Java Introspection</A>
    <UL>
     <LI CLASS="dense"><A HREF="#CreatingJavaObjects">Creating Java Objects</A>
     <LI CLASS="dense"><A HREF="#CallingStaticJavaMethods">Calling Static Java Methods</A>
     <LI CLASS="dense"><A HREF="#AccessingStaticJavaFields">Accessing Static Java Fields</A>
    </UL>
   <LI CLASS="dense"><A HREF="#IntervalArithmetic">Interval Arithmetic</A>
    <UL>
     <LI CLASS="dense"><A HREF="#IntervalArithmeticExample">Interval Arithmetic Example</A>
     <LI CLASS="dense"><A HREF="#IntervalComparisonOperators">Interval Comparison Operators</A>
     <LI CLASS="dense"><A HREF="#IntervalArithmeticStatus">Interval Arithmetic
       Status</A>
     <LI CLASS="dense"><A HREF="#DateTimeIntervals">Date/Time Intervals</A>
    </UL>
   <LI CLASS="dense"><A HREF="#EmbeddingFrink">Embedding Frink</A>
   <LI CLASS="dense"><A HREF="#SampleCalculations">Sample Calculations</A>
    <UL>
     <LI CLASS="dense"><A HREF="#MassAndVolume">Mass and Volume</A>
     <LI CLASS="dense"><A HREF="#Liquor">Liquor</A>
     <LI CLASS="dense"><A HREF="#MoreLiquor">More Liquor</A>
     <LI CLASS="dense"><A HREF="#MovieMagic">Movie Magic</A>
     <LI CLASS="dense"><A HREF="#FiscalCalculations">Fiscal Calculations</A>
     <LI CLASS="dense"><A HREF="#Ouch">Ouch!</A>
     <LI CLASS="dense"><A HREF="#SnipingEBayAuctions">Sniping eBay Auctions</A>
     <LI CLASS="dense"><A HREF="#JunkyardWars">Junkyard Wars</A>
     <LI CLASS="dense"><A HREF="#BodyHeat">Body Heat</A>
     <LI CLASS="dense"><A HREF="#MicrowaveCookery">Microwave Cookery</A>
     <LI CLASS="dense"><A HREF="#Superman">Why is Superman so Lazy?</A>
     <LI CLASS="dense"><A HREF="#FartJokes">Fart Jokes</A>
     <LI CLASS="dense"><A HREF="#AdvancedFarting">Advanced Farting</A>
     <LI CLASS="dense"><A HREF="#MoreIncorrectFacts">More Incorrect Facts</A>
      <UL>
       <LI CLASS="dense"><A HREF="#QE2">QE2</A>
       <LI CLASS="dense"><A HREF="#HamburgersAndCars">Hamburgers and Cars</A>
       <LI CLASS="dense"><A HREF="#GetTheProvisions">"Get The Provisions..."</A>
       <LI CLASS="dense"><A HREF="#Typing">Typing</A>
      </UL>
     <LI CLASS="dense"><A HREF="#BiblicalReferences">Biblical References</A>
     <LI CLASS="dense"><A HREF="#Emc2">E=mc<SUP>2</SUP></A>
     <LI CLASS="dense"><A HREF="#DaysOld">Days Old</A>
     <LI CLASS="dense"><A HREF="#ModelSolarSystem">Model Solar System</A>
     <LI CLASS="dense"><A HREF="#MCO">Saving Hundreds of Millions of Dollars</A>
    </UL>
   <LI CLASS="dense"><A HREF="#ChangingSyntax">Changing Syntax</A>
   <LI CLASS="dense"><A HREF="#Acknowledgements">Acknowledgements</A>
   <LI CLASS="dense"><A HREF="#DonateToFrink">Donate to Frink</A>
  </UL>
  <!--TOC end-->

  <H2>Using Frink</H2>
  <H3><A NAME="TryAsYouRead">Try as you read</A></H3>
  <P>
   If you want to try the calculations as you're reading,
   <A HREF="/fsp/frink.fsp" TARGET="_blank">click here to open the web-based
    interface in a new window.</A>  The web-based interface gives hints for
   new users, which may make it the easiest way to learn how to use Frink.
  </P>
  
  <P>
   If you have a frames-enabled browser, and you don't see a Frink sidebar to
   the left, you can also <A HREF="frinkframe.html">click here to try Frink in
    a sidebar</A> as you read this.  (The sidebar mode doesn't give as many
   hints, though.)
  </P>

  <H3><A NAME="JavaWebStart">Download using Java Web Start</A></H3>

  <P>
   For the incredibly impatient (who have a recent version of Java installed):
  </P>

  <B><A HREF="/frinkjar/frink.jnlp">Click here to install Frink using Java
    Web Start.</A></B>

  <P>
   Read on if you're slightly more patient, or if this doesn't work for you.
  </P>

  <P>
   This method of installation requires Java Web Start, which is installed
   with recent versions of Java.  Using Java Web Start is a great way to run
   Frink if you don't need to run programs from the command-line.  (But you
   <EM>can</EM> still write and run programs from the GUI using Java Web
   Start!)  If you do want to run programs from the command-line, see the <A
   HREF="#DownloadingFrink">Downloading Frink</A> section below.  Java Web
   Start will allow you to automatically get the latest version of Frink and
   will update Frink automatically when new versions are available.
  </P>

  <H4>Installation Steps</H4>
  <OL>
   <LI>If you <EM>don't</EM> have a recent version of Java, you can <A
     TARGET="_blank" HREF="http://java.com/">get it from Sun.</A>
    (Link opens in new window.)
     
   <LI>(<I>Optional</I>) If you've never installed anything with Java Web
   Start, please read and understand the <A TARGET="_blank"
   HREF="faq.html#AboutSecurityWarnings">FAQ entry about the security warnings
   you'll see</A> (link opens in new window) and your alternate download
   options.

   <LI>Click one of the options below to install Frink with either interface
    (see the screenshots below):
    <UL>
     <LI><A HREF="/frinkjar/frink.jnlp">Swing Interface</A>
      Prettier.  Requires Java 1.5.0 or later.

     <LI>New, experimental <A HREF="/frinkjar/frinkwithlibs.jnlp">Swing
       Interface with standard libraries</A>.  This is a version of Frink that
      contains a variety of <A HREF="/fsp/frinklibs.fsp">standard
       libraries</A> and useful programs.  It's a larger download, but the
      standard libraries change somewhat infrequently and will only get
      downloaded when changes are made.
      
     <LI><A HREF="/frinkjar/frinkawt.jnlp">AWT Interface</A> -
      Not as pretty as the Swing mode, but will run on older JVMs.
    </UL>
    <P>
     You can install both, actually, with no problems.
    </P>
  </OL>

  <P>
   If you've read those <A TARGET="_blank"
   HREF="faq.html#AboutSecurityWarnings">security notes</A>, and understood
   what the security messages are telling you, and the warnings are still too
   scary, (and you don't want to send me the $400 it would cost me to remove
   at least one of them,) and you'd rather download a limited version of Frink
   that runs in the most restrictive security sandbox (breaking some
   features), then <A HREF="/frinkjar/frinklimited.jnlp">click here to install
   a limited version of Frink.</A> Again, please read those <A TARGET="_blank"
   HREF="faq.html#AboutSecurityWarnings">security notes</A> to see what
   features will be unavailable if you choose this option.  You can always get
   the full version of Frink later if you need those features.
  </P>

  <P>
   If someone wants to send me the $400 necessary to get a VeriSign "Code
   Signing Cerificate", I'll sign it just for you.  It won't work any
   differently.)
  </P>

  <P>
   If you have an old version of Java Web Start, Frink will probably show up
   in the "Downloaded Applications" section of the Java Web Start panel which
   isn't immediately visible.  Use the <CODE>View</CODE> menu option to select
   the Downloaded Applications tab.  It will also let you create a Frink
   shortcut on your desktop or in your start menu.  The defaults in Java Web
   Start before version 1.4.2 are set oddly so that the <EM>second</EM> time
   you run Frink, it will ask you if you want to make a shortcut.
  </P>

  <P>
   If you're using Linux, and Sun's Java release, only Java version 1.5 beta
   and later will install shortcuts onto your desktop and start menu.  Highly
   recommended.
  </P>
  
  <H2><A NAME="UserInterfaceOptions">User Interface Options</A></H2>
  
  <H3><A NAME="SwingUserInterface">Swing User Interface</A></H3>
  
  <P>
   The Swing version allows mixed fonts and colors.  Due to some performance
   bugs in Sun's Swing implementation (like large paragraphs taking several
   minutes to paint every time you resize or scroll,) it can be problematic.
   As of 2008-08-25, the capabilities of the Swing and AWT interfaces are
   about the same.
  </P>
  
  <P>
   <IMG SRC="images/swing.png" WIDTH=500 HEIGHT=400
        ALT="Swing GUI Screenshot">
  </P>
  
  <H3><A NAME="AWTUserInterface">AWT User Interface</A></H3>

  <P>
   The AWT user interface has several modes.  The two-line conversion mode and
   <A HREF="#ProgrammingMode">programming mode</A> are shown below.  Small
   devices usually can't run Swing, but all Java platforms should be able to
   run AWT.
  </P>
  
  <P>
   <IMG SRC="images/awtconvert.png" WIDTH=500 HEIGHT=400
    ALT="AWT Two-line conversion screenshot">
  </P>

  <P>
   <IMG SRC="images/awtprogram.png" WIDTH=500 HEIGHT=400
        ALT="AWT Programming Mode screenshot">
  </P>


  <H3><A NAME="FrinkAsAnApplet">Frink As An Applet</A></H3>
  <P>
   If your web browser supports Java 1.3.1 or later, try the <A
   HREF="FrinkApplet.html">Java Applet-based interface</A>.  It looks and
   works just like the GUI above, but it requires you to be connected to the
   internet and must download for each session.

   Your browser must support Java 1.3.1 or later, or you will need to get <A
    TARGET="_blank" HREF="http://java.com/">download a newer version of Java
    from Sun.</A>  It is extremely highly recommended that you have Java 1.5.0
   update 2 or later.  This has been tested with Internet Explorer, Netscape
   4.x, Netscape 6+, Mozilla (Windows and Linux), and Opera.
  </P>

  <P>
   If you don't have a recent version of Java, you can <A TARGET="_blank"
    HREF="http://java.com/">get it from Sun.</A> (Link opens in
   new window.)
  </P>
  
  <P>
   (The certificate is just signed by me, so you'll get a warning.
   Network access is necessary to use the network portions of Frink... like
   currency calculations, translations, etc.  If you deny network access, the
   non-network parts of Frink will work just fine.  If someone wants to send
   me the $400 necessary to get a VeriSign "Code Signing Cerificate", I'll
   sign it just for you.  It won't work any differently.)
  </P>
  
  <H3><A NAME="MinimalistWebInterface">Minimalist Web Interface</A></H3>
  <P>
   If the applet doesn't work for you, try the
   <A HREF="/fsp/frink.fsp">minimalist web interface.</A>
   The minimalist interface is intentionally very spare but it
   should allow you to use the latest version of the Frink engine.  It is now
   powered by <A HREF="fspdocs.html">Frink Server Pages</A>.
  </P>

  <P>
   In this web interface, you can enter any Frink expression in the "From:"
   box.  If you also enter a value in the "To:" box, it is treated as the
   right-hand side of a conversion expression (that is, to the right of the
   conversion operator <CODE>-&gt;</CODE> )
  </P>

  <P>
   Thus, to convert 10 meters to feet, you can enter
   <CODE CLASS="input">10&nbsp;meters</CODE> in the "From" box and
   <CODE CLASS="input">feet</CODE> in the "To" box, or, equivalently, type
   <CODE CLASS="input">10&nbsp;meters&nbsp;-&gt;&nbsp;feet</CODE> in the
   "From" box and leave the "To" box empty.  It does exactly the same thing.
  </P>

  <H3><A NAME="Wireless">Wireless</A></H3>
  <P>
   If you have a wireless Palm VII, <A HREF="Frink.pqa">download the Frink web
    clipping application (PQA)</A> to use Frink anywhere, anytime.
  </P>

  <P>
   <IMG SRC="images/palm.png" WIDTH="219" HEIGHT="333"
        ALT="Palm VII Screenshot">
  </P>

  <P>
   If you have a webphone that speaks
   <ACRONYM title="Handheld Device Markup Language">HDML</ACRONYM>, or
   <ACRONYM title="Wireless Markup Language">WML</ACRONYM>, 
   point it at<BR>
   <CODE>http://futureboy.us/frink/</CODE><BR> for the world's most
   powerful pocket calculator!
  </P>

  <P>
   <IMG SRC="images/hdml.jpg" WIDTH="260" HEIGHT="624"
        ALT="HDML webphone screenshot">
  </P>

  <P>
   If the webphone version doesn't work right, it may be because I can't
   detect that your device is a webphone.  If that's the case, please use your
   webphone to visit:<BR>
   http://futureboy.us/info/<BR>
   And then <A HREF="mailto:eliasen@mindspring.com">send me an e-mail</A>
   (from anywhere) telling me about the problem and when you tested, and that
   should give me enough information to fix the problem.
  </P>

  <H3><A NAME="BrowserShortcuts">Browser Shortcuts</A></H3>
  <P>
   If your browser is <A HREF="http://www.mozilla.org/">Mozilla</A> or
   Netscape 6+,  <A HREF="javascript:addSidebar()">click here to add a Frink
   sidebar.</A>  (You may need to hit the <KBD>F9</KBD> key or go to <B>View |
    Show/Hide | Sidebar</B> to display the sidebar.)
  </P>

  <SCRIPT TYPE="text/javascript">
   function addSidebar()
   { 
      if ((typeof window.sidebar == "object") &&
          (typeof window.sidebar.addPanel == "function")) 
      { 
//         window.sidebar.addPanel ("Frink", "http://www.mindspring.com/~eliasen/home.html?redirtarget=frink/index.pl?sidebar=1", ""); 
           window.sidebar.addPanel ("Frink", "http://futureboy.us/fsp/sidebar.fsp", ""); 
      } 
      else 
      { 
         var rv = window.alert("This only works with Mozilla or Netscape 6+.  Sorry.");
      } 
   }

   function errorMsg()
   {
      alert("Netscape 6 or Mozilla is needed to install a sherlock plugin");
   }

   function addEngine(name,ext,cat)
   {
      if ((typeof window.sidebar == "object") && (typeof
      window.sidebar.addSearchEngine == "function"))
      {
         window.sidebar.addSearchEngine(
            "http://futureboy.us/frinkdocs/"+name+".src",
            "http://futureboy.us/frinkdocs/"+name+"."+ext,
            name,
            cat );
      }
      else
         errorMsg();
    }

   //-->
  </SCRIPT>

  <H3><A NAME="SearchPlugins">Search Plugins</A></H3>
  <P>
   If you're using Netscape, Firefox, Mozilla, or another browser that
   supports "Sherlock" search plugins, <A
    HREF="javascript:addEngine('Frink','png','Reference');">click
    here to add a Frink search plugin</A>.
  </P>

  <P>
   <A HREF="javascript:addEngine('Frink','png','Reference');"><IMG
     SRC="images/searchplugin.png" WIDTH="269" HEIGHT="147"
     ALT="Frink Browser Plugin Screenshot"></A>
  </P>

  <H3><A NAME="BrowserKeywords">Browser Keywords</A></H3>
  <P>
   Another cool way of having Frink readily available is to use your browser's
   custom keywords feature.  <A
   HREF="http://www.mozilla.org/docs/end-user/keywords.html">[Notes for
   Mozilla/Netscape 6+]</A> In short, you make a bookmark with a replaceable
   parameter like below.  For Mozilla/Netscape 6+, just right-click on the
   link below, choose "Bookmark this link" and then follow the steps below to
   give the link a keyword.
  </P>

  <P>
   <B>Frink calculation:</B>
   <CODE><A HREF="http://futureboy.us/fsp/frink.fsp?fromVal=%s"
            TITLE="Frink Shortcut">http://futureboy.us/fsp/frink.fsp?fromVal=%s</A></CODE><BR>
   <B>Unit Lookup:</B>
   <CODE><A HREF="http://futureboy.us/fsp/frink.fsp?lookup=%s"
            TITLE="Frink Lookup Shortcut">http://futureboy.us/fsp/frink.fsp?lookup=%s</A></CODE><BR>
  </P>

  <P>
   Now go to "Manage Bookmarks" and give the bookmark a keyword like
   <CODE>frink</CODE>.  Then, in your browser's URL bar, you simply type
   something like
  </P>
  
  <P CLASS="code">
   <CODE>frink 10 yards-&gt;meters</CODE>
  </P>

  <P>
   and there you are. (Now if you could only sew Frink into your clothes...)
  </P>

  <H2><A NAME="DownloadingFrink">Downloading Frink</A></H2>
  <P>
   If you're just using Frink for interactive calculations, or are happy using
   the built-in programming mode and you're not writing running programs from
   the command-line, see the 
   <A HREF="#JavaWebStart">Java Web Start</A> section above.
  </P>

  <P>
   If you're looking for an installer for handheld devices, see the <A
    HREF="#SmallDevices">Small Devices</A> section below.
  </P>

  <P>
   If you want to write full Frink programs <EM>and</EM> run them from
   the commmand-line, you will need to get your own copy of Frink, and
   have a Java 1.1 or later runtime environment on your machine,
   1.4.2+ is recommended as it's less buggy.  The date calculations in
   anything before Java 1.3 are rather bad,) you may download the
   latest executable <CODE>jar</CODE> file.  (Note that this changes
   almost daily as I do more work, so download often.)
  </P>

  <P>
   Otherwise, here are the steps to downloading Frink:
  </P>

  <UL>
   <LI>
    If you don't have a recent version of Java, you can <A TARGET="_blank"
     HREF="http://java.com/">get it from Sun.</A> (Link opens in
    new window.)

   <LI><A HREF="/frinkjar/frink.jar">Download frink.jar</A>.

   <LI>
    See the <A HREF="#RunningFrink">Running Frink</A> section below for
    directions for starting full Frink programs.
  </UL>

  <H3><A NAME="ExperimentalVersions">Experimental Versions</A></H3>
  <P>
   For those who want a standalone, all-in-one Frink download, there is an
   <EM>experimental, unsupported</EM> version of Frink compiled for Windows
   only using an experimental, unreleased version of the GNU compiler for Java
   (GCJ).  This only works in command-line mode, but requires no other
   downloads and may start up more quickly.  It is appropriate for quick
   calculations and command-line scripts.  Not all functions may work.  Let me
   know about parts that do or don't work for you.  It is compressed with UPX
   to reduce the file size (possibly at the cost of some startup time.)  This
   version starts up more quickly than the Sun JVM, but runs programs about
   5-6 times slower.
  </P>

  <UL>
   <LI><B>Experimental, Unsupported</B> executable for Windows: <A
      HREF="/frinkjar/frinkx.exe">frinkx.exe</A>.
  </UL>

  <P>(Unfortunately, it's compiled without optimization, because that pegs the
  CPU for over 72 minutes, and then blows out my system after trying to use
  over a gigabyte of virtual memory.  Anyone want to donate me a new computer
  with tons of memory?  Or try compiling it with -O3?)  For Windows, you can
  use this experimental <A
  HREF="http://www.thisiscool.com/gcc_mingw.htm#gcj43ecj">gcj 4.3
  eclipse-merge-branch</A> version.
  </P>
    
  <P>
   Hint:  If you install the gcj package linked above, or have a working GCJ
   (4.3 or later is required) for other platforms, the command line to
   compile with full optimization will be something like:
  </P>

  <P CLASS="code">
   <CODE>
    gcj -O3 -fomit-frame-pointer --main=frink.parser.Frink -o frinkx.exe <A HREF="/frinkjar/frink.jar">frink.jar</A>
   </CODE>
  </P>
   
  <H3><A NAME="SmallDevices">Small Devices</A></H3>
  <P>
   Frink can run entirely on handheld devices like the any phone running
   the Android platform, Sony Ericcson P800,
   P802, or P900 smartphone, the Nokia 92x0 Communicator (Nokia 9210,
   9210i, and 9290), and the Sharp Zaurus.
  </P>

  <P>
   The installer is built as part of the Frink release process, so these
   versions will be up-to-date with the latest Frink.  (The version numbers in
   the installers may not change, though.)
  </P>

  <P>
   Download the installer for the following platforms:
  </P>
  
  <UL>
   <LI><B><A HREF="/temp/frink.apk">Android</A></B> - All of Frink's
    functionality, including graphics, is available on the Android mobile
    phone platform.  See the <A HREF="android.html">Frink on Android</A> page
    for more information on using Frink on Android.  As Android is a stable,
    complete, widely-available, well-designed, multi-platform and multi-vendor
    environment, it will probably be the primary platform for Frink on
    handheld devices in the future.  Other proprietary platforms that require
    extensive porting and packaging for every phone model may go away.
       
   <LI><B><A HREF="../frinkjar/frink.sis">Sony Ericsson P800, P802 or P900, and
    Motorola A920 or A925</A></B> (and perhaps other Symbian 7.0 devices with
    the UIQ2 user interface.)
    
   <LI><B><A HREF="../frinkjar/frinkcrystal.sis">Nokia Communicator 92xx (Nokia
     9210, 9210i, and 9290)</A></B> (and perhaps other Symbian 6.0 devices
    with the "Crystal" (wide-screen) user interface).  You need 3 to 4
    megabytes of free memory to run Frink.

   <LI><B><A HREF="../frinkjar/frink_arm.ipk">Sharp Zaurus</A></B> (despite the
    filename, this isn't ARM-processor specific--it's pure Java, and might
    work on other platforms that use the <CODE>.ipk</CODE> package format.)
    Note:  I need help testing and improving this installation package.
    Please contact <A HREF="mailto:eliasen@mindspring.com">Alan Eliasen</A> if
    you have experience with Zaurus installer packages.  <I>Hint for
     helpers:</I>  an <CODE>.ipk</CODE> file is just a <CODE>.tar.gz</CODE>
    file, so you can open it up and poke around, but I don't have a Zaurus to
    test on.

   <LI><B>Experimental:</B> <B><A HREF="../frinkjar/frink80.jar">Nokia 9300,
      Nokia 9500 Communicator</A></B> (and perhaps other Symbian Series 80
    devices.)  I need help testing this one.  The Series 80 devices evidently
    crash when you try to add menubars, so some functions are impossible to
    access.  This is a jar file customized for Series 80, and not an
    <CODE>.sis</CODE> installer.
  </UL>

  <P>
   Notes about running Frink on other devices, including notes about why I
   probably <EM>won't</EM> provide releases for newer Symbian devices that
   require their "Symbian Signed" abomination, please see <A
   HREF="faq.html#WillFrinkRun">this FAQ entry</A>.
  </P>
  
  <P>
   If you have problems running any of these, please contact <A
    HREF="mailto:eliasen@mindspring.com">Alan Eliasen</A>.  Since I don't own
   any of these devices, I rely on others for testing and detailed bug
   reports.  (The emulators don't always work like the real devices!)  It's
   possible for bugs to slip in that work under normal testing, but cause
   problems on the limited/different JVMs on these devices.
  </P>

  <P>
   If anyone knows of a Symbian 6.0 device with the "Quartz" user interface
   that supports PersonalJava, please let me know and I can give you an
   installer to test.
  </P>

  <P>
   If you know of a device that supports PersonalJava 1.1 or better, including
   the <CODE>java.math</CODE> package and floating-point math, and you think
   Frink would run on this device and you would like to help test it, please
   <A HREF="mailto:eliasen@mindspring.com">suggest it to me.</A>.
  </P>

  <P>
   <IMG SRC="images/p800photo.jpg" WIDTH="287" HEIGHT="640"
    ALT="Photograph of Frink running on a real SonyEricsson P800 Smartphone">
  </P>

  <P>
   <IMG CLASS="top" SRC="images/epoq.png" WIDTH="261" HEIGHT="518"
    ALT="Screenshot of Frink on a SonyEricsson P800 Smartphone Emulator">
  </P>
   
  <P>
   <A HREF="images/nokiaemulator.png">
   <IMG SRC="images/nokiaemulator_th.png" WIDTH="400" HEIGHT="174"
        ALT="Screenshot of Frink on a Nokia 92xx Emulator"></A>
  </P>

  <H2><A NAME="DashboardWidget">Dashboard Widget</A></H2>
  <P>
   Frink is also available as a Dashboard Widget for Macintosh.
  </P>

  <P>
   [<A HREF="/frinkjar/FrinkWidget.zip">Download Widget</A>].
  </P>

  <P>
   You should have Java 1.5.0 update 2 or later to run this.  It'll work with
   other versions of Java, but they have known bugs.  If you don't have it, <A
   TARGET="_blank" HREF="http://java.com/">download a newer version of Java
   from Sun.</A> After installation of Java 1.5, you should immediately also
   go into your Java Control Panel/Java Preferences and make sure that Java is
   actually configured to <EM>use</EM> JDK 1.5.0 (also called J2SE 5.0) when
   launching applets and JNLP (Java Web Start) files!  <EM>It does not appear
   to use 1.5 automatically!</EM> (You may have to open the Preferences window
   twice on the Mac just to see the JNLP option selector, which is often empty
   on the first run!)
  </P>
    
  <P>
   Note that when Frink first starts up as a widget, it might appear to hang.
   This is because Sun's Java installation pops up a dialog box <EM>behind
   other windows</EM> that asks you if you want to trust the Frink applet.
   You may have to hunt for this window.  You can choose to "always trust" the
   application so you don't have this problem repeatedly.  This was supposedly
   fixed in Java 1.5, but it still seems flaky, because Java 1.5 seems not to
   be used by default.  Note the above paragraph which shows how to make sure
   your installation is actually <EM>using</EM> Java 1.5 or later.
  </P>

  <P>
   It should be noted that using the <A HREF="#JavaWebStart">Java Web
   Start</A> method of installation is in all respects superior to the widget:
   it updates itself automatically when Frink changes, is easily resizable,
   can create file associations, and more.  But the widget exists for all the
   kids who are crazy about the widgets.
  </P>

  <H2><A NAME="GoogleGadget">Google Gadget</A></H2>
  <P>
   If you use Google's customized homepage, you can add a Frink gadget to it
   by clicking the icon below:
  </P>

  <P>
   <a
    href="http://fusion.google.com/add?moduleurl=http%3A//futureboy.us/frinkdocs/FrinkGadget.xml"><img src="images/add-to-google-plus.gif" width="104" height="17" border="0" alt="Add to Google"></a>
  </P>

  <P>
   Alternately, you can add the following URL manually:
  </P>

  <P>
   http://futureboy.us/frinkdocs/FrinkGadget.xml
  </P>
   
  <H2><A NAME="ProgrammingMode">Programming Mode</A></H2>
  <P>
   If you want a unified environment to write, run, save, and load Frink
   programs, try the programming mode.  You can either start this mode
   explicitly (see the <A HREF="#RunningFrink">Running Frink</A> section
   below) or, from the AWT GUI, choose the menu option <CODE>Mode |
    Programming</CODE>.
  </P>

  <P>
   This mode is primarily designed to allow programming on small devices, but
   can run on any platform.
  </P>

  <P>
   <A HREF="images/progcrystal.jpg">
   <IMG CLASS="top" SRC="images/progcrystal_th.jpg" WIDTH="476" HEIGHT="197"
     ALT="Programming mode running on a Nokia 92xx Emulator"></A>
  </P>

  <P>
   <IMG CLASS="top" SRC="images/progmodeepoc.png" WIDTH="262" HEIGHT="516"
    ALT="Programming mode running on a SonyEricsson P800 Emulator">
  </P>

  <P>
   The <CODE>Data</CODE> menu option allows you to choose between the <A
   HREF="/frinkdata/units.txt">standard data file</A> and an alternate data
   file.  You'll usually want to use the standard data file, but on small
   devices, it can take a long time to start your program, and may use a fair
   amount of memory.  The standard data file is big.  In that case, you may
   want to make a pared-down (or even empty) units file and use that when
   running your programs.
  </P>

  <P>
   For now, selecting a different data file is not a persistent setting.  This
   setting will only remain in place until you exit Frink.
  </P>

  <H2><A NAME="RunningFrink">Running Frink</A></H2>
  <P>
   On many platforms, you can start Frink in the AWT GUI mode by simply
   double-clicking the <CODE>frink.jar</CODE> file.
  </P>

  <P>If you want to run Frink in command-line mode, here are a couple of
   sample scripts you can use to start Frink.  <EM>You will need to edit them
    to match the paths on your system!</EM>
  </P>

  <UL>
   <LI>(Windows batch file) <B><A HREF="/frinkjar/frink.bat">frink.bat</A></B>
   <LI>(Linux/Unix shell script) <B><A HREF="/frinkjar/frink">frink</A></B>
  </UL>

  <P>
   In the samples below, you may need to replace <CODE>java</CODE> or
   <CODE>javaw</CODE> with the full path to your Java Virtual Machine,
   whatever that may be.  Note that <CODE>javaw</CODE> is a Windows-only
   command that simply starts Java without opening a console window.  You'll
   probably replace this with <CODE>java</CODE> on other platforms.
  </P>
   
  <P>
   To run the jar file in text mode, use: <BR>
   <CODE CLASS="input">java -cp frink.jar frink.parser.Frink <I>[options]</I></CODE>
  </P>

  <P>
   To run the jar file with the AWT GUI which gives access to several modes,
   including programming mode, use: <BR>
   <CODE CLASS="input">javaw -cp frink.jar frink.gui.InteractivePanel
    <I>[options]</I></CODE>
  </P>

  <P>
   The AWT GUI is the default action for the jar file, so this is the same as
   saying:<BR>
    <CODE CLASS="input">javaw -jar frink.jar <I>[options]</I></CODE>
  </P>
  
  <P>
   To run the jar file with the Swing GUI, (shown above under
   <A HREF="#JavaWebStart">Java Web Start</A>,) use: <BR>
   <CODE CLASS="input">javaw -cp frink.jar frink.gui.SwingInteractivePanel <I>[options]</I></CODE>
  </P>

  <P>
   To run the jar file and start the AWT GUI in programming mode, use: <BR>
   <CODE CLASS="input">javaw -cp frink.jar frink.gui.ProgrammingPanel
    <I>[filename]</I></CODE>
  </P>

  <P>
   To run the jar file and start the Swing GUI in programming mode, use: <BR>
   <CODE CLASS="input">javaw -cp frink.jar frink.gui.SwingProgrammingPanel
    <I>[filename]</I></CODE>
  </P>
  
  <P>
   If a single filename is specified in programming mode, this file will be
   loaded into the interface.
  </P>

  <P>
   To run the AWT GUI in full-screen size (this is primarily for small
   devices,) use: <BR>
   <CODE CLASS="input">javaw -cp frink.jar frink.gui.FullScreenAWTStarter
    <I>[options]</I></CODE>
  </P>

  <P>
   Depending on your operating system, I recommend that you write a shell
   script, batch file, or create a shortcut to let you run this even more
   easily (see below for samples.)  To exit, use Ctrl-C, or send your
   platform's end-of-file character (usually Ctrl-Z or Ctrl-D), possibly
   followed by carriage return.  Or just close the window.
  </P>

  <P>
   See the <A HREF="#ProxyConfiguration">Proxy Configuration</A> below for
   additional options if you're running behind a HTTP or FTP proxy server.
  </P>

  <H3><A NAME="SampleStartScripts">Sample Start Scripts</A></H3>
  <P>
   In the samples below, adjust the paths to your <CODE>java</CODE> executable
   and your <CODE>frink.jar</CODE> file to match your system.  All samples
   will start in command-line mode.  See the <A HREF="#RunningFrink">Running
    Frink</A> section immediately above to start in different modes.
  </P>
     
  <P>
   Bourne shell:<BR>
   <CODE CLASS="input">
    #!/bin/sh<BR>
    java -cp <I>path/</I>frink.jar frink.parser.Frink "$@"
   </CODE>
  </P>

  <P>
   Windows batch file:<BR>
   <CODE CLASS="input">
    @java -cp <I>path</I>\frink.jar frink.parser.Frink %1 %2 %3 %4 %5 %6 %7 %8 %9
   </CODE>
  </P>

  <P>
   Also see the <A HREF="#PerformanceTips">Performance Tips</A> section below
   to see how to improve speed.
  </P>

  <H3><A NAME="CommandLineOptions">Command-Line Options</A></H3>
  <P>
   Arguments passed in on the command-line are treated as names of Frink
   programs to be executed.  Other command-line options are listed below.
  </P>
  
  <P>
   If you just want to have Frink calculate something and exit, you can pass
   arguments on the command line using the <CODE>-e <I>[string]</I></CODE>
   switch. Each command-line argument following the -e will be interpreted as
   a Frink expression, making it easy to run Frink from other applications:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">java -cp frink.jar frink.parser.Frink -e "78 yards -&gt; feet"</CODE><BR>
   <CODE CLASS="output">234.0 </CODE>
  </P>

  <P>
   Other command-line options:
  </P>
  
  <TABLE BORDER=1 CELLSPACING=5 SUMMARY="Command-line options">
    <TR><TH>Switch<TH>Description

    <TR><TD CLASS="lit">-f&nbsp;<I>filename</I></TD><TD><EM>Deprecated.</EM>
      Load and run the specified file.  If this option is specified, the
      program will <EM>not</EM> receive any following command-line arguments.
      <EM>The <CODE>-f</CODE> switch is no longer required or recommended
       unless you are loading multiple files.</EM> Normally, you will just
      specify the filename to load as the last command-line argument.</TD>
     
   <TR><TD CLASS="lit">-k</TD><TD>Remain in interactive mode after loading
      file or parsing command-line arguments.  This is very useful if you want
      to load definitions from a file and then go into an interactive
      session.</TD>

   <TR><TD CLASS="lit">-u&nbsp;<I>filename</I></TD><TD>Specify a different
      units file than the default.  This allows you to change the fundamental
      dimensions that you like to use, or change my definitions that you don't
      agree with.  You can download my 
      <A HREF="/frinkdata/units.txt">latest data file</A> (normally included
      in the <CODE>.jar</CODE> file) and modify it to suit your needs.</TD>

    <TR><TD CLASS="lit">--nounits<BR>-nu</TD><TD>Don't load a units file at all
      on startup.  This will improve startup time, but will break all programs
      that use any of the standard units.  No units of measure will be defined
      at all.

    <TR><TD CLASS="lit">-I&nbsp;<I>path</I></TD>
     <TD>Appends the specified path to the paths that will be searched when a
      <CODE>use</CODE> statement is encountered in a program.  This may be
      either an absolute or relative file path.  You may specify multiple
      <CODE>-I</CODE> arguments on the command-line, and the paths will be
      searched in the order they are specified.
     
    <TR><TD CLASS="lit">--encoding&nbsp;<I>str</I>

     <TD>Specify the character encoding of all following Frink program files.
     <EM>This option must precede the filename that it modifies.</EM> Frink
      programs can now be more directly written in any language and encoding
      system.  This switch is only necessary if your system's default encoding
      (as detected by Java) is different than that of the program file you're
      loading.

      <P>
       The encoding is a string representing any encoding that your version of
       Java supports, <I>e.g.</I> <CODE>"UTF-8"</CODE>,
       <CODE>"US-ASCII"</CODE>, <CODE>"ISO-8859-1"</CODE>,
       <CODE>"UTF-16"</CODE>, <CODE>"UTF-16BE"</CODE>,
       <CODE>"UTF-16LE"</CODE>.  Your release of Java may support more
       charsets, but all implementations of Java are required to support the
       above.  Check the release notes for your Java implementation to see if
       other charsets are supported.
      </P>

      <P>
       If you specify multiple files having different encodings using multiple
       <CODE>-f</CODE> directives, you can use something like
       <CODE>--encoding&nbsp;""</CODE> to set the encoding back to your
       system's default.
      </P>

      <P>
       This flag does <EM>not</EM> alter the behavior of files opened using
       commands like <CODE>read[]</CODE> or <CODE>lines[]</CODE>.  To change
       their behavior, use the
       <A HREF="#SpecifyingAlternateEncodings">two-argument versions of these
        commands.</A>
      </P>
     </TD>

   <TR><TD class="lit"><CODE>-v</CODE><BR><CODE>--version</CODE><TD>Print out
      the Frink version and exit.  (From inside a program, you can call the
      function <CODE>FrinkVersion[]</CODE> to return the current version.)

   <TR><TD class="lit">--sandbox<TD>Enables Frink's internal "sandbox" mode
    so you can run untrusted code.  This is different from Java's sandbox, in
    that it enables only Frink's notions of what should and shouldn't be 
    allowed.  It disallows programs to define functions and many other things,
    so it's rarely useful to the end-user, and hardly any programs will run
       this way.  It's really more for my testing.

   <TR><TD class="lit">--ignore-errors<TD>Ignores syntax errors when parsing a
    program and attempts to ignore those lines and recover and run the
    program.  Generally a very bad idea, but this flag was added to preserve
    old, excessively-permissive behavior.
  </TABLE>

  <P>
   Any command-line parameters after the name of the program to be executed
   are passed to the program as an array called <CODE>ARGS</CODE>.
  </P>

  <H3><A NAME="GUIOptions">GUI Options</A></H3>
  <P>
   You can specify the width or the height of the window for
   <CODE>frink.gui.InteractivePanel</CODE> or
   <CODE>frink.gui.FullScreenAWTStarter</CODE>.  You may specify width or 
   height or both.  For example:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">java -cp frink.jar frink.gui.InteractivePanel -width
      <I>500</I> -height <I>400</I></CODE>
  </P>

  <H3><A NAME="PerformanceTips">Performance Tips</A></H3>
  <P>
   There are several things you can do to make your Java Virtual Machine (JVM)
   run Frink more quickly:
  </P>

  <UL>
   <LI>If you're doing mostly large integer work (factoring, primality
    testing, other number theory,) where most of the runtime is spent in
    mathematical operations on very large integers, the <A
     HREF="http://www.kaffe.org/">Kaffe</A> Virtual Machine compiled with the
    incredibly fast <A HREF="http://www.swox.com/gmp/">GMP</A> numerical
    libraries works literally thousands of times faster than Sun's VM and its
    horribly na&iuml;ve algorithms.
    
    <P><B>Warning:</B> Make sure that GMP is compiled with the
     configure option <CODE>--enable-alloca=malloc-reentrant</CODE> or you'll
     blow out the stack and crash with very large integers.

    <P><B>Warning:</B> As of the 2004-07-18 release of Kaffe, you must now
     explicitly pass the <CODE>-Xnative-big-math</CODE> argument when running
     Kaffe in order to use the GMP libraries.
    
   <LI>For long-running programs, if you're using Sun's Java Virtual Machine
    (JVM), use the <CODE>-server</CODE> command-line switch to the
    <CODE>java</CODE> executable.  This starts the Server VM which optimizes
    more aggressively and often improves performance of long-running programs
    by a factor of 2, but at the expense of increased start-up time.  Note that
    the server VM may not be available if you just downloaded the Java Runtime
    Environment (JRE), and not the full Java Software Development Kit (SDK).

   <LI>If you're <EM>not</EM> starting long-running programs, and want the
    fastest start-up time, <EM>don't</EM> use the Server VM.
    
   <LI>Like all Java programs, Frink can often run much faster if you allow
    the JVM to use more memory at startup, leading to less-frequent garbage
    collection.  In Sun's implementation, this is achieved by passing the
    options <CODE>-Xmx<I>&lt;size&gt;</I></CODE> (for maximum Java heap size)
    and <CODE>-Xms<I>&lt;size&gt;</I></CODE> (for initial Java heap size) to
    the <CODE>java</CODE> executable.  The <I>size</I> arguments are something
    like <CODE>256M</CODE> for 256 megabytes.  Note that this is at the expense
    of other processes running on your system, and should be used sparingly
    because allocating too much memory may cause your system to swap
    excessively or run out of memory if set too high.
  </UL>

  <H3><A NAME="ProxyConfiguration">Proxy Configuration</A></H3>
  <P>
   If you use a HTTP or FTP proxy server, you need to add some options to your
   command lines (say, right after the word <CODE>java</CODE>) to use the
   proxy if you want certain functions to work.  HTTP and FTP are used for the
   following:

  <UL>
   <LI><A HREF="#TextTranslation">Language translations</A> (HTTP)
   <LI><A HREF="#InternationalExchangeRates">Currency/Exchange Rate
     conversions</A> (HTTP, will fall back to static file if unavailable)
   <LI><A HREF="#HistoricalBritishPriceData">Historical British price data</A> (HTTP)
   <LI><A HREF="#HistoricalUSPriceData">Historical values of the
     U.S. dollar</A> (FTP, will fall back to static file if unavailable)
  </UL>

  <P>
   The following are settings for Sun's distribution of Java 1.4.1.  You may
   need different options depending on your Java distribution.  See
   <A HREF="http://java.sun.com/j2se/1.4.1/docs/guide/net/properties.html">Sun's
    Networking Properties documentation</A> for more properties you may need
   if you're on a network that requires more proxy settings.
  </P>

  <P>
   HTTP proxy:<BR>
   <CODE CLASS="input">-Dhttp.proxyHost=<I>proxyname</I>
    -Dhttp.proxyPort=<I>portnum</I></CODE><BR>
  </P>

  <P>
   FTP proxy:<BR>
   <CODE CLASS="input">-Dftp.proxyHost=<I>proxyname</I>
    -Dftp.proxyPort=<I>portnum</I></CODE><BR>
  </P>

  <P>
   These settings should <EM>not</EM> be necessary when using the applet
   version or the Java Web Start version, as these inherit the proxy settings
   from your browser or the Java Web Start Application Manager respectively.
  </P>

  <H2><A NAME="HowFrinkIsDifferent">How Frink is Different</A></H2>
  <P>
   Frink is, first and foremost, designed to make it easy to figure out
   things.  If there's a unifying principle in Frink, it could be considered
   to be the <EM>normalization of information</EM>.  I'm trying to
   simplify and unify the representation of data so that you can perform all
   sorts of interesting operations on them.  Whatever that means.
  </P>

  <P>
   Frink is optimized for doing quick, off-the-cuff calculations with a
   minimum of typing, primarily so it can be used with handheld devices which
   can make text entry difficult (especially symbols).  This doesn't mean that
   Frink is unsuitable for doing large, very high accuracy calculations.  It
   does those well, too, and the complicated calculations look just like the
   simple ones.
  </P>

  <P>
   To give an example, Frink represents <EM>all</EM> numerical quantities as
   not simply a number, but a number and the units of measurement that
   quantity represents.  So you can enter things such as "3 feet" or "40
   acres" or "4 tons", and add, subtract, multiply, etc. these things
   together.  Frink will track the resulting quantities through all
   calculations, eliminating a large category of errors.  You can add feet,
   meters, or rods all in the same calculation and the details are handled
   transparently and correctly.
  </P>

  <P>
   It also knows the ways that these units are interrelated-- a length times a
   length is an area; length<SUP>3</SUP> is a volume (if you believe in the
   hypothetical Z axis); mass times distance times acceleration is energy.  If
   you know something in one system of measurement you can convert it to any
   other system of measurement.
  </P>

  <P>
   All units are standardized and normalized into combinations a small number
   of several "Fundamental Dimensions" that cannot be reduced any further.
   These are completely arbitrary and configurable but are currently:
  </P>
   
  <TABLE BORDER=1 CELLPADDING=3 SUMMARY="Fundamental Units">
   <TR><TH>Quantity<TH>Fundamental Unit<TH>Name
   <TR><TD>length    <TD CLASS="lit">m <TD>meter
   <TR><TD>mass      <TD CLASS="lit">kg <TD>kilogram
   <TR><TD>time      <TD CLASS="lit">s <TD>second
   <TR><TD>current <TD CLASS="lit">A <TD>ampere
   <TR><TD>luminous_intensity <TD CLASS="lit">cd <TD>candela
   <TR><TD>substance <TD CLASS="lit">mol <TD>mole
   <TR><TD>temperature <TD CLASS="lit">K <TD>Kelvin
   <TR><TD>information <TD CLASS="lit">bit <TD>bit
   <TR><TD>currency <TD CLASS="lit">USD <TD>U.S. dollar
  </TABLE>

  <P>
   Look at the <A HREF="/frinkdata/units.txt">data file</A> for these
   definitions (and my editorializing on the boneheadedness of many these
   choices.)  The data file recursively defines all measurements in terms of
   the fundamental units.
  </P>

  <P>
   An exponent can be attached to each dimension.  For example, an area is
   length * length which might be represented as <CODE>meters^2</CODE>.  Of
   course, a negative exponent indicates <EM>division</EM> by that quantity,
   so meters/second will be displayed as <CODE>m s^-1</CODE>, or acceleration
   (which can be represented as meters per second per second) is represented
   as <CODE>m s^-2</CODE>.
  </P>

  <H2><A NAME="NumericTypes">Numeric Types</A></H2>
  <P>
   Numeric values in Frink are represented in one of three ways:
  </P>

  <DL>
   <DT>Integer</DT> <DD>An arbitrarily large number with no decimal part.
   Represented as a number with no decimal point, (<I>e.g.</I>
   <CODE>1000000000</CODE>) or the special "exact exponent" form
   <CODE>1ee9</CODE>.  An integer can also contain underscores for better
   readability, <I>e.g.</I> <CODE>1_000_000_000</CODE></DD>
   
   <DT>Rational</DT>
   <DD>An arbitrarily large number which can be written as
    integer/integer ( such as <CODE>1/3</CODE> or <CODE>22/7</CODE> ).
    Rational numbers are first reduced to smallest terms; that is,
    <CODE>2/10</CODE> is stored as <CODE>1/5</CODE> and <CODE>5/5</CODE> is
    stored as the integer <CODE>1</CODE></DD>
   
   <DT>Floating Point</DT>
   <DD>An arbitrary-precision floating-point number.
    Currently, the number of decimal places calculated or displayed is limited
    to 20 for efficiency reasons.  Any number containing a decimal point is a
    floating-point number, such as <CODE>1.</CODE> or <CODE>1.01132</CODE>, as
    well as any approximate exponential such as <CODE>2e10</CODE> or
    <CODE>6.02e23</CODE>.</DD>

   <DT>Complex Numbers</DT>
   <DD>Complex numbers are any number with an imaginary part.  The imaginary
    unit is specified by the symbol <CODE>i</CODE>.  For example, <CODE>40 +
     3 i</CODE>.  The real and imaginary parts of a complex number can be any
    of the numerical types listed above.</DD>

   <DT>Intervals</DT>
   <DD>An interval represents a range of values, such as [2, 3] where,
    depending on your interpretation, the actual number is unknown, but
    contained within this range, or the number simultaneously takes on all
    values within the range.  See the <A HREF="#IntervalArithmetic">Interval
     Arithmetic</A> section of the documentation for more information.</DD>
  </DL>


  <H2><A NAME="DataLibraries">Data Libraries</A></H2>
  <P>
   Frink knows about a wide variety of measurements.  You can usually type a
   unit of measurement in a variety of ways.  Plurals are usually understood.
   Case is important (and somewhat arbitrary until I do some normalization and
   cleanup of the units file, but usually lowercase is your best choice.)  The
   following are all examples of valid units:
  </P>

  <UL>
   <LI><CODE>1</CODE>
   <LI><CODE>1000000</CODE>
   <LI><CODE>1_000_000</CODE> (also one million, just maybe more readable.)
   <LI><CODE>1E6</CODE> (1.0x10<SUP>6</SUP>, or approximately a million (floating-point))
   <LI><CODE>1EE6</CODE> (1x10<SUP>6</SUP>, or exactly a million (integer))
   <LI><CODE>million</CODE>
   <LI><CODE>1 million</CODE>
   <LI><CODE>24.5E-10</CODE> (24.5 x 10<SUP>-10</SUP>)
   <LI><CODE>eighty</CODE>
   <LI><CODE>four score + seven</CODE>
   <LI><CODE>1</CODE> (a dimensionless exact integer)
   <LI><CODE>1.0</CODE> (a floating-point number)
   <LI><CODE>1.</CODE> (also a floating-point number)
   <LI><CODE>1/3</CODE> (a rational number, preserved as a fraction)
   <LI><CODE>1 quadrillion</CODE>
   <LI><CODE>gallon</CODE>
   <LI><CODE>1 gallon</CODE>
   <LI><CODE>56 gallon</CODE>
   <LI><CODE>56 gallons</CODE>
   <LI><CODE>foot</CODE>
   <LI><CODE>54.2 feet</CODE>
   <LI><CODE>furlong</CODE>
   <LI><CODE>hogshead</CODE>
   <LI><CODE>2 USD</CODE> ("USD" is the ISO-4217 currency code for the U.S. Dollar)
   <LI><CODE>2 dollars</CODE> (for now, shorthand for the U.S. dollar)
   <LI><CODE>16 tons</CODE>
   <LI><CODE>6 ounces</CODE>
   <LI><CODE>1 gram</CODE>
   <LI><CODE>8 milligrams</CODE> (most common prefixes are allowed.)
   <LI><CODE>8 mg</CODE>    (abbreviations of most prefixes and units are also allowed)
   <LI><CODE>7 kilowatts</CODE>
   <LI><CODE>7 kW</CODE>
   <LI><CODE>1.21 gigawatts</CODE>
   <LI><CODE>1.21 GW</CODE>
   <LI><CODE>9 seconds</CODE>
   <LI><CODE>9 sec</CODE>
   <LI><CODE>9 s</CODE>
   <LI><CODE>1/24 day</CODE>
   <LI><CODE>100001000101111111101101\\2</CODE> (a number in base 2)
   <LI><CODE>1000_0100_0101_1111_1110_1101\\2</CODE> (a number in base 2 with
    underscores for readability)
   <LI><CODE>845FED\\16</CODE>  (a number in base 16... bases from 2 to 36 are allowed)
   <LI><CODE>845fed\\16</CODE>  (a number in base 16)
   <LI><CODE>845_fed\\16</CODE>  (a number in base 16 with underscores for readability)
   <LI><CODE>0x845fed</CODE>  (Common hexadecimal notation)
   <LI><CODE>0x845FED</CODE>  (Common hexadecimal notation)
   <LI><CODE>0xFEED_FACE</CODE>  (Hexadecimal with underscores for readability)
   <LI><CODE>0b100001000101111111101101</CODE> (Common binary notation)
   <LI><CODE>0b1000_0100_0101_1111_1110_1101</CODE> (Binary with underscores for readability)
  </UL>

  <P>
   If you're looking for a specific unit, and don't know how it's spelled or
   capitalized, see the <A HREF="#IntegratedHelp">Integrated Help</A> section
   below.
  </P>

  <P>
   Or, if you're using the <A HREF="/fsp/frink.fsp">web interface</A>,
   type part or all of the name in the "Lookup:" field and click "lookup".
   Selecting the "exact" checkbox will only return exact matches, otherwise
   you will get all lines containing that substring.  Try it for something
   like "<A HREF="/fsp/frink.fsp?lookup=cubit">cubit</A>" and you'll see that
   there are often lots of variations.
  </P>

  <P>
   <B>Important:</B> You'll learn the most if you look at the voluminous and
   fascinating <A HREF="/frinkdata/units.txt">data file</A> for more examples
   of things you can do, and measurements that Frink knows about.
  </P>

  <H2><A NAME="IntegratedHelp">Integrated Help</A></H2>
  <P>
   If you don't know the name of a unit or function, but can guess at it, you
   can either read the <A HREF="/frinkdata/units.txt">data file</A> for more
   information, or use the integrated help.  Keep in mind that Frink is
   case-sensitive, so you'll need to use the right capitalization of the names.
  </P>

  <P>
   Unit or function names can be looked up by preceding part or all of the
   name with a question mark.  This will return a list of all units and
   function names <EM>containing</EM> that string, in upper- or lower-case.
   For example, to find the different types of cubits:
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">?cubit</CODE><BR>
   <CODE CLASS="output">[homericcubit, assyriancubit, egyptianshortcubit,
    greekcubit, shortgreekcubit, romancubit, persianroyalcubit, hebrewcubit,
    northerncubit, blackcubit, olympiccubit, egyptianroyalcubit,
    sumeriancubit, irishcubit, biblicalcubit, hashimicubit]</CODE>
  </P>

  <P>
   Or, if you want to know the name of the currency used in Iran,
  </P>

  <P CLASS="code">
   <CODE CLASS="input">?iran</CODE><BR>
   <CODE CLASS="output">[Iran_Rial, Iran_currency, Iran]</CODE>
  </P>

  <P>
   Simply enter the name of the unit you're interested in to see its value:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">biblicalcubit</CODE><BR>
   <CODE CLASS="output">0.55372 m (length)</CODE>
  </P>

  <P>
   If you want to see the results in specific units of measurement, you
   can use the arrow operator <CODE>-&gt;</CODE> as described in the
   <A HREF="#Conversions">Conversions</A> section below:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">biblicalcubit -&gt; inches</CODE><BR>
   <CODE CLASS="output">21.8</CODE>
  </P>

  <P>
   Or, if you want to see the sizes of all the units as a single unit type,
   and they're all the same, you can use the arrow operator on the list.  The
   following sample shows all the different types of cubits the world
   has defined and converts them to inches:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">?cubit -&gt; inches</CODE><BR>
   <CODE CLASS="output">[homericcubit = 15.5625,<BR>
    &nbsp;assyriancubit = 21.6,<BR>
    &nbsp;egyptianshortcubit = 17.682857142857142857,<BR>
    &nbsp;greekcubit = 18.675,<BR>
    &nbsp;shortgreekcubit = 14.00625,<BR>
    &nbsp;romancubit = 2220/127 (approx. 17.480314960629922),<BR>
    &nbsp;persianroyalcubit = 25.2,<BR>
    &nbsp;hebrewcubit = 17.58,<BR>
    &nbsp;northerncubit = 26.6,<BR>
    &nbsp;blackcubit = 21.28,<BR>
    &nbsp;olympiccubit = 18.225,<BR>
    &nbsp;egyptianroyalcubit = 20.63,<BR>
    &nbsp;sumeriancubit = 2475/127 (approx. 19.488188976377952),<BR>
    &nbsp;irishcubit = 500000000/27777821 (approx. 17.99997199204358),<BR>
    &nbsp;biblicalcubit = 21.8,<BR>
    &nbsp;hashimicubit = 25.56]</CODE>
  </P>

  <P>
   If you don't want to see exact fractions, you can (as always) multiply the
   right-hand-side by <CODE>1.0</CODE> or <CODE>1.</CODE> (without a zero
   after the decimal point) to get approximate numbers:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">?cubit -&gt; 1.0 inches</CODE><BR>
  </P>

  <P>
   If you use two question marks, the units that match that pattern will be
   displayed <EM>and their values in the <A HREF="#SettingDisplayUnits">current
     display units</A>:</EM>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">??moon</CODE><BR>
   <CODE CLASS="output">
    [moonlum = 2500 m^-2 cd (illuminance),<BR>
    moondist = 0.002569555301823481845 au,<BR>
    moonmass = 73.483E+21 kg (mass),<BR>
    moonradius = 0.000011617812472864754024 au,<BR>
    moongravity = 1.62 m s^-2 (acceleration)]</CODE>
  </P>

  <P>
   <B>Note:</B> If you use the form with two question marks, you
   <EM>cannot</EM> convert them to a specified unit with the
   <CODE>-&gt;</CODE> operator, as they have already been converted to strings.
  </P>

  <P>
   Note that functions are displayed at the end of the list, and can be
   distinguished from units by the square brackets following them:
  </P>

  <P>
   <CODE CLASS="input">??call</CODE><BR>
   <CODE CLASS="output">
   [callistodist = 1.883000000e+9 m (length),<BR>
   callistoradius = 2.400000e+6 m (length),<BR>
   callistomass = 1.08e+23 kg (mass),<BR>
   callJava[arg1,arg2,arg3]]</CODE>
  </P>

  <P>
   In addition, the <CODE>functions[]</CODE> function will produce a list of
   all functions.
  </P>

  <H2><A NAME="EditingFrink">Editing Frink</A></H2>
  <P>
   If you're writing Frink programs, you can edit Frink files in your favorite
   text editor.  If that happens to be Emacs or XEmacs, you can download the
   rudimentary <A HREF="/frinktools/emacs/frink-mode.el">Frink mode for
    Emacs</A>.  It's somewhat rough at this moment, but it has syntax
   highlighting, automatic indenting, ability to run interactive Frink
   sessions or programs.  Screenshot is below.
  </P>

  <P>
   <A HREF="images/emacs.png">
    <IMG SRC="images/emacs_th.png"
     WIDTH="336" HEIGHT="363"ALT="Screenshot of Frink emacs mode">
   </A>
  </P>
  
  <H2><A NAME="Conversions">Conversions</A></H2>
  <P>
   By default, the output is in terms of the "fundamental units".  To convert
   to whatever units you want, simply use the "arrow" operator
   <CODE>-&gt;</CODE> (that's a minus sign followed by a greater-than sign,)
   with the target units on the right-hand side:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">38 feet -&gt; meters</CODE><BR>
   <CODE CLASS="output">11.5824</CODE>
  </P>

  <P>
   <B>Formatting Shortcut:</B> If the right-hand-side of the conversion is in
   double quotes, the conversion operator will both evaluate the value in
   quotes as a unit and append the quoted value to the result.  So, the above
   example could be performed as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">38 feet -&gt; "meters"</CODE><BR>
   <CODE CLASS="output">7239/625 (exactly 11.5824) meters</CODE>
  </P>

  <P>
   In this case, because the ratio between feet and meters is an
   exactly-defined quantity, so the answer comes out as an exact rational
   number.  This is also displayed as a decimal number for your convenience.
   If you just want the decimal value, you can multiply by an approximate
   decimal number (any number containing a decimal point) such as
   <CODE>1.0</CODE> or <CODE>1.</CODE> without anything after the 
   decimal point:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">38. feet -&gt; "meters"</CODE><BR>
   <CODE CLASS="output">11.5824 meters</CODE>
  </P>

  <P>
   <B>Note:</B> If you are using the web-based interface, simply enter
   everything left of the arrow in the "From:" box and everything to the right
   of the arrow in the "To:" box.  Or you can enter the whole expression
   <EM>including</EM> the arrow in the "From:" box and leave the "To:" box
   empty.  It does the exact same thing.
  </P>

  <P>
   If the units on either side of a conversion are not of the same type, Frink
   may try to help you by suggesting conversion factors:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">55 mph -&gt; yards</CODE><BR>
   <CODE CLASS="output">
    &nbsp;Conformance error -<BR>
    &nbsp;&nbsp;&nbsp;Left side is: 15367/625 (exactly 24.5872) m s^-1 (velocity)<BR>
    &nbsp;&nbsp;Right side is: 1143/1250 (exactly 0.9144) m (length)<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;Suggestion: multiply left side by time<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or divide left side by
    frequency<BR>
    <BR>
    &nbsp;For help, type:<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;units[time]<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;units[frequency]<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;to list known units with these dimensions.
   </CODE>
  </P>

  <P>
   If you get an error like this, you can list all the units that have the
   specified dimensions by typing <CODE>units[time]</CODE> or
   <CODE>units[frequency]</CODE>.
  </P>

  <P>
   Yes, sometimes it gives digits which aren't significant in results.  As I
   improve the symbolic reduction of expressions, this will get better,
   although I still need to work out ways of specifying and tracking precision
   (and uncertainty?) throughout all calculations.
  </P>

  <H3><A NAME="MultipleConversions">Multiple Conversions</A></H3>
  <P>
   If the right-hand-side of the conversion is a comma-separated list in
   square brackets, the value will be broken down into the constituent
   units.  For example, to find out how long it takes the earth to rotate on
   its axis:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">siderealday -&gt; [hours, minutes, seconds]</CODE><BR>
   <CODE CLASS="output">23, 56, 4.0899984</CODE>
  </P>

  <P>
   or, to maintain symmetry with the quoted-right-hand-side behavior noted
   above, arguments on the right-hand-side can be quoted:
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">siderealday -&gt; ["hours", "minutes", "seconds"]</CODE><BR>
   <CODE CLASS="output">23 hours, 56 minutes, 4.0899984 seconds</CODE>
  </P>

  <P>
   This behavior can also be used to break fractions into constituent parts:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">13/4 -&gt; [1,1]</CODE><BR>
   <CODE CLASS="output">3, 1/4 (exactly 0.25)</CODE>
  </P>

  <P>
   If the first term is the integer <CODE>0</CODE> (zero), any leading terms
   with zero magnitude will be suppressed:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">siderealday -&gt; [0, "weeks", "days", "hours", "minutes", "seconds"]</CODE><BR>
   <CODE CLASS="output">23 hours, 56 minutes, 4.0899984 seconds</CODE>
  </P>
  
  <P>
   If the last term is the integer <CODE>0</CODE> (zero), any remaining
   fractional part  will be suppressed:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">siderealday -&gt; ["hours", "minutes", "seconds", 0]</CODE><BR>
   <CODE CLASS="output">23 hours, 56 minutes, 4 seconds</CODE>
  </P>

  <H2><A NAME="MathOperators">Math Operators</A></H2>
  <P>
   Math is very straightforward: the current parser accepts the normal
   mathematical operators, with normal operator precedence.  (Exponentiation
   first (see notes below,) then multiplication and division, then addition
   and subtraction.  And more tightly parenthesized expressions are performed
   before anything else.)  All expressions can be arbitrarily complex.
   Parentheses can be used to group expressions.
  </P>

  <P>
   <B>Important:</B> Whitespace between any two units implies multiplication!
   This has the same precedence as multiplication or division.  If there's one
   thing you need to keep in mind, it's this.  You <EM>must</EM> parenthesize
   units on the right-hand-side of a division operation, if you expect them to
   be multiplied before the division takes place.
  </P>

  <P>
   The following are all valid expressions.  (Note
   that if you are using the web-based interface you can enter the right-hand
   side of the arrow operator in the "To:" box.)
  </P>

  <TABLE BORDER=1 CELLPADDING=3 CELLSPACING=3
         SUMMARY="Mathematical operators">
   <TR><TH>Example<TH>Description
   <TR><TD CLASS="lit">1+1        <TD>addition
   <TR><TD CLASS="lit">1-1        <TD>subtraction
   <TR><TD CLASS="lit">3*4        <TD>multiplication
   <TR><TD CLASS="lit">3 4        <TD><B>Important:</B> whitespace implies
      multiplication 
   <TR><TD CLASS="lit">3 days     <TD>multiplication also.
   <TR><TD CLASS="lit">foot meter <TD>multiplication also (result is an area)
   <TR><TD CLASS="lit">1/3        <TD>division (note this maintains an exact
      rational number)
   <TR><TD CLASS="lit">week/day   <TD>division (result is 7)
   <TR><TD CLASS="lit">3^4        <TD>exponentiation.  Note that chained
      exponentiations such as <CODE>2^3^4</CODE> are, following normal
      mathematical rules of precedence, performed right-to-left, that is,
      <CODE>2^(3^4)</CODE>.
   <TR><TD CLASS="lit">3^200      <TD>exponentiation... note that arbitrary
      precision is supported.
   <TR><TD CLASS="lit">365 % 7    <TD>modulus (remainder) defined by <CODE>x -
       y * floor[x/y]</CODE>
   <TR><TD CLASS="lit">365 mod 7  <TD>Also modulus
   <TR><TD CLASS="lit">year mod day  <TD>Also modulus; both sides need to be
      units having same dimensions (<I>e.g.</I> both length.)
   <TR><TD CLASS="lit">365 div 7  <TD>Truncating divide, defined by
     <CODE>floor[x/y]</CODE>
   <TR><TD CLASS="lit">year div day  <TD>Also truncating divide; both sides
      need to be units of same type.
   <TR><TD CLASS="lit">6!          <TD>Factorial: 6 * 5 * 4 * 3 * 2 * 1.  Note
      that factorials have a higher precedence than exponentiation.
   <TR><TD CLASS="lit">foot -&gt; m <TD>Conversion operator (for unit
      conversions, works just like a very low-precedence divide operator but
      returns a string.)

   <TR><TD CLASS="lit">4^(1/2)    <TD>square root (note parentheses needed
      because precedence of exponentiation is higher than that of division.
      The function <CODE>sqrt[<I>x</I>]</CODE> does the same thing.)

   <TR><TD CLASS="lit">1/2 + 1/3 <TD>Result is <CODE>5/6</CODE>.  Note that
      Frink maintains rational numbers if it can.

   <TR><TD CLASS="lit">1/2 + 1/3. <TD>Result is <CODE>.083333333</CODE> The
      decimal point indicates an uncertain number.

   <TR><TD CLASS="lit">gallon^(1/3) -&gt; inches <TD>Cube root:  how big of a
      cube (or Frinkahedron) is a gallon?

   <TR><TD CLASS="lit">(20 thousand gallons)^(1/3) -&gt; feet <TD>How big of a
      cube is 20000 gallons?  Note necessary parentheses because exponentiation
      is usually done before multiplication or division.

   <TR><TD CLASS="lit">20 thousand gallons water -&gt; pounds <TD>How much does
      that much water weigh?  ("water" is a measure of density for now.)
   <TR><TD CLASS="lit">250 grams / sugar -&gt; cups<TD>Sample recipe
      conversion ("sugar" is a density for now.)
   <TR><TD CLASS="lit">1/4 mile / (4.23 seconds) -&gt; miles/hour<TD>Dragster
      average speed.  Note the parentheses required because space is
      multiplication which has same precedence as division.
   <TR><TD CLASS="lit">329 mph / (4.23 seconds) -&gt; gravity<TD>Dragster
      average acceleration in g's.
   <TR><TD CLASS="lit">foot <B>conforms</B> meters<TD>Conformance operator;
      returns <CODE>true</CODE> if the left-hand-side is a unit that has the
      same dimensions as the named DimensionList (e.g. <CODE>length</CODE> or
      <CODE>velocity</CODE>) on the right-hand-side (the right-hand-side can
      also be a string.)  If the right-hand-side
      is a unit, this returns true if both sides are units with same
      dimensions, <CODE>false</CODE> otherwise.  Hint:  use the
      <CODE>dimensions[]</CODE> function to list all known dimension types.
   <TR><TD CLASS="lit">3 <B>square</B> feet<TD>Equals <CODE>3 (feet^2)</CODE>
      or, more simply, <CODE>3 feet^2</CODE>.  Square squares the unit on its
      immediate right-hand side.
   <TR><TD CLASS="lit">3 <B>sq</B> feet<TD>Same as <CODE>square</CODE>
   <TR><TD CLASS="lit">3 <B>cubic</B> feet<TD>Equals <CODE>3 (feet^3)</CODE>
      or, more simply, <CODE>3 feet^3</CODE>.  Cubic cubes the unit on its
      immediate right-hand side.
   <TR><TD CLASS="lit">3 <B>cu</B> feet<TD>Same as <CODE>cubic</CODE>
    <TR><TD CLASS="lit">3 feet <B>squared</B><TD>Equals <CODE>(3
       feet)^2</CODE>, indicating a square 3 feet on a side, or 9 square
      feet.  This squares the multiplicative terms on its left-hand-side.
      Squared has a precedence between multiplication and addition.
   <TR><TD CLASS="lit">3 feet <B>cubed</B><TD>Equals <CODE>(3
       feet)^3</CODE>, indicating a cube 3 feet on a side, or 27 cubic feet.
      This cubes the multiplicative terms on its left-hand-side.  Cubed has a
      precedence between multiplication and addition.
  </TABLE>

  <P>
   <B>Note:</B> If a number comes out as a fraction, like
   <CODE>20/193209</CODE>, you can get a decimal result by repeating the
   calculation with a non-integer number (that is, one with a decimal point in
   it like <CODE>20./193209</CODE>) or by multiplying by <CODE>1.0</CODE>, or
   simply <CODE>1.</CODE> (without anything after the decimal point.)
  </P>

  <P>
   Both sides of a conversion can be arbitrarily complex.
  </P>

  <H2><A NAME="Variables">Variables</A></H2>
  <P>
   By default, all variables in Frink can contain any type.  Variable names
   begin with any (Unicode) letter followed by 0 or more letters, digits, or
   the underscore (<CODE>_</CODE>) character.
  </P>

  <P>
   You do not need to declare variables before using them.  The variable will
   be defined in the smallest containing scope.
  </P>

  <P>
   To assign a value to a variable, use the <CODE>=</CODE> operator:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a = 10 feet</CODE>  (assigns a single value)<BR>
   <CODE CLASS="input">b = [30 yards, 3 inches]</CODE>  (assigns an array)
  </P>

  <H3><A NAME="DeclaringVariables">Declaring Variables</A></H3>
  <P>
   Variables <EM>may</EM> be declared before they are used using the
   <CODE>var</CODE> keyword.  For example, to
   declare a variable called <CODE>t</CODE>:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">var t</CODE>
  </P>

  <P>
   This defines the variable t in the smallest containing scope and sets its
   initial value to the special value <CODE>undef</CODE>.  You may also
   specify an initial value:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">var t = 10 seconds</CODE>
  </P>

  <H3><A NAME="ConstraintsOnVariables">Constraints on Variables</A></H3>
  <P>
   When a variable is declared, you can constrain the type of values that it
   can contain.  The constraints are checked at runtime.  If you try to set a
   value that does not meet the constraints, a runtime error occurs.  For
   example, to make sure that the variable <CODE>t</CODE> only contains values
   with dimensions of time, you can declare it using the <CODE>is</CODE>
   keyword which defines constraints.
  </P>
    
  <P CLASS="code">
   <CODE CLASS="input">var t is time = 10 seconds</CODE>
  </P>

  <P>
   In this case, the initial value is necessary to ensure that <CODE>t</CODE>
   contains a value with dimensions of time <EM>at all times</EM>.  (The
   special value <CODE>undef</CODE> is applied if no initial value is
   supplied.)  If a valid initial value is not supplied, this will produce an
   error at runtime.
  </P>

  <P>
   Multiple constraints can be specified by placing them in square brackets.
   <EM>All</EM> constraints must be met.  (If you want to do an "OR" of
   constraints, see the <A HREF="#ConstraintFunctions">Constraint
    Functions</A> section below.)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">var t is [time, positive] = 10 seconds</CODE>
  </P>
  
  <H4><A NAME="ConstrainingByDimensions">Constraining by Dimensions</A></H4>
  <P>
   Built-in constraint types include all of the dimension types defined in
   your program.  For example, you can list all of the defined dimension types
   (<I>e.g.</I> <CODE>length, mass, power, energy</CODE>) with the
   <CODE>dimensions[]</CODE> function.  All of these defined types can be used
   as constraints.
  </P>

  <H4><A NAME="ConstrainingToBuiltInTypes">Constraining to Built-In Types</A></H4>
  <P>
   The following built-in constraints can be used to verify that the value is
   of one of the built-in types.  For example,
  </P>

  <P CLASS="code">
   <CODE CLASS="input">var name is string = "Frink"</CODE>
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Built-in Constraint Types">
    <TR><TH>Name<TH>Description
    <TR><TD CLASS="lit">array<TD>Value must be an <A HREF="#Arrays">array</A>.
    <TR><TD CLASS="lit">boolean<TD>Value must be a boolean value
      <CODE>true</CODE> or <CODE>false</CODE> (and not just
      a type that can be coerced to boolean; see the <A
       HREF="#Truth">Truth</A> section.)
    <TR><TD CLASS="lit">date<TD>Value must be a <A
       HREF="#DateTimeHandling">date/time</A>.
    <TR><TD CLASS="lit">dict<TD>Value must be a <A
       HREF="#Dictionaries">dictionary</A>.
    <TR><TD CLASS="lit">set<TD>Value must be a <A
       HREF="#Sets">set</A>.
    <TR><TD CLASS="lit">regexp<TD>Value must be a <A
       HREF="#RegularExpressions">regular expression</A>.
    <TR><TD CLASS="lit">subst<TD>Value must be a <A
       HREF="#SearchAndReplace">substitution</A> (search-and-replace) expression.
    <TR><TD CLASS="lit">string<TD>Value must be a <A
       HREF="#Strings">string</A>.
    <TR><TD CLASS="lit">unit<TD>Value must be a <A
       HREF="#DataLibraries">unit of measure</A> of any type (including
      dimensionless numbers).  You will probably use this rarely; it's more
      likely that you'll want to constrain based on <A
       HREF="#ConstrainingByDimensions">dimension type</A>.
  </TABLE>

  <H4><A NAME="ConstrainingByObjectType">Constraining by Object Type</A></H4>
  <P>
   A class name can also be a constraint name.  If, for example, you've
   defined a class called <CODE>Sphere</CODE>, the following will work.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a is Sphere = new Sphere[]</CODE>
  </P>

  <P>
   This constraint check also works with interface names.  If the name of the
   constraint is the name of an interface, this check will ensure that any
   object assigned to the variable implements that interface.  See the <A
    HREF="/fsp/colorize.fsp?fileName=interfacetest.frink">interfacetest.frink</A> file for an example.
  </P>
  
  <H4><A NAME="ConstraintFunctions">Constraint Functions</A></H4>
  <P>
   You may define your own functions that will be used as constraints.  The
   function must take one argument and return a <CODE>true</CODE> value if the
   constraint is met.  Returning <CODE>false</CODE> or another value will
   cause the constraint to fail.  The following defines a function called
   <CODE>positive</CODE> that returns <CODE>true</CODE> if a value is a
   positive dimensionless value.
  </P>

  <P CLASS="code">
   <CODE CLASS="comment">//define constraining function</CODE><BR>
   <CODE CLASS="input">positive[x] := x > 0</CODE><BR><BR>
   
   <CODE CLASS="comment">//declare variable with constraint and set
    initial value</CODE><BR>
   <CODE CLASS="input">var x is positive = 1</CODE>
  </P>
  
  <H3><A NAME="TestingVariables">Testing Variables</A></H3>
  <P>
   You can test to see if a variable is defined using the following functions:
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Variable Testing Functions">
    <TR><TH>Function<TH>Definition
    <TR><TD CLASS="lit">isDefined[<I>x</I>]<TD>Returns true if the symbol is
      defined either as a local variable in the current scope (i.e. with the
      <CODE>=</CODE> operator), or as a unit (i.e. with the <CODE>:=</CODE>
      operator.)
    <TR><TD CLASS="lit">isVariableDefined[<I>x</I>]<TD>Returns true if the
      symbol is defined as a local variable in the current scope (i.e. with the
      <CODE>=</CODE> operator).
  </TABLE>

  <P>
   Both functions can be called either with a raw variable name or with a
   string.  For example:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    isVariableDefined[a]<BR>
    isVariableDefined["a"]
   </CODE>
  </P>
  
  <H3><A NAME="UnicodeInFrink">Unicode in Frink</A></H3>
  <P>
   For internationalization, Frink allows <A
   HREF="http://www.unicode.org/">Unicode</A> characters anywhere.  For
   maximum portability, and maximum editability with non-Unicode-aware
   editors, you can use Unicode escapes to embed these characters in program
   files.  Variable names can contain Unicode characters, indicated by
   <CODE>\u</CODE> followed by exactly 4 hexadecimal digits [0-9a-fA-F]
   indicating the Unicode code-point.  This allows Unicode characters to be
   placed into any ASCII text file, and edited by programs that don't
   understand Unicode.  It also allows <EM>any</EM> Unicode character to be
   used in an identifier.
  </P>

  <P>
   If you <EM>do</EM> have a nifty editor that handles Unicode, or other
   character encodings, you can write your Frink program in full Unicode, and
   load it using the <A HREF="#CommandLineOptions"><CODE>--encoding
    <I>str</I></CODE></A> command-line switch.  Keep in mind that in this
   case, identifiers can only consist of Unicode letters, digits, and the
   underscore.  You still have to use the <CODE>\u00a5</CODE> Unicode escape
   trick if your identifier contains other classes of characters.
  </P>

  <P>
   For example, Unicode defines the character <CODE>\u201e</CODE> for Planck's
   constant.  In the data file, we define Planck's constant as the normal
   character <CODE>h</CODE> (which is easier to type) and also as the Unicode
   character.  These definitions look like:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    h := 6.62606876e-34 J s</CODE> <CODE CLASS="comment">// Planck's constant</CODE><BR>
    <CODE CLASS="input">\u210e := h</CODE> <CODE CLASS="comment">// Unicode character for Planck's constant
   </CODE>
  </P>

  <P>
   <EM>Note:</EM> The <CODE>:=</CODE> notation simply defines a
   <EM>global</EM> unit, that is available from all functions.
  </P>

  <H2><A NAME="SettingDisplayUnits">Setting Display Units</A></H2>
  <P>
   By default, units are displayed with their dimensions given as multiples of
   the
   <A HREF="http://physics.nist.gov/cuu/Units/units.html">International System
    of Units (SI)</A> base units.  These are often not very intuitive.  For
   example, volts are displayed as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1 volt</CODE><BR>
   <CODE CLASS="output">1 m^2 s^-3 kg A^-1 (electric_potential)</CODE>
  </P>

  <P>
   Of course, you could convert to volts explicitly using the
   <CODE>-&gt;</CODE> operator, but if you have to do that repeatedly, it's a
   hassle.  Instead, you can define the default output format for a unit type
   by using the <CODE>:-&gt;</CODE> operator:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">electric_potential :-&gt; "volts"</CODE><BR>
   <CODE CLASS="input">10 volt</CODE><BR>
   <CODE CLASS="output">10 volts</CODE>
  </P>

  <P>
   The left-hand side is the dimension list identifier like
   <CODE>electric_potential</CODE> or <CODE>time</CODE> or <CODE>power</CODE>
   (you can see what this is named for any given unit by entering an
   expression of that type--see the first "volt" sample above.)
  </P>

  <P>
   The right-hand side is any expression that can go on the right-hand-side of
   a conversion operator <CODE>-&gt;</CODE> , including multiple conversions:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">time :-&gt; [0, "days", "hours", "minutes", "seconds"]</CODE><BR>
   <CODE CLASS="input">siderealyear</CODE><BR>
   <CODE CLASS="output">365 days, 6 hours, 9 minutes, 9.5400288 seconds</CODE><BR>
   <CODE CLASS="input">siderealday</CODE><BR>
   <CODE CLASS="output">23 hours, 56 minutes, 4.0899984 seconds</CODE>
  </P>

  <P>
   The right-hand-side can even be a function that takes a single argument:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">HMS[x] := x -&gt; [0, "hours", "minutes", "seconds"]</CODE><BR>
   <CODE CLASS="input">time :-&gt; HMS</CODE><BR>
  </P>

  <P>
   If you want, you can define a function that displays distances in
   millimeters if it's small, kilometers if it's bigger, and light-years if
   it's huge.
  </P>

  <H2><A NAME="SettingPrecision">Setting Precision</A></H2>
  <P>
   Floating-point calculations are performed to a limited number of digits.
   You can change the number of digits of working precision by the
   <CODE>setPrecision[<I>digits</I>]</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    setPrecision[50]<BR>
    1 / 3.0<BR>
   </CODE>
   <CODE CLASS="output">0.33333333333333333333333333333333333333333333333333</CODE>
  </P>

  <P>
   Note that this will only affect calculations performed <EM>after</EM> this
   flag is set, of course.  Currently, not all operations (notably
   trigonometric functions) can be performed to arbitrary precision.
  </P>

  <P>
   You can also see the current working precision by calling the
   <CODE>getPrecision[]</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    getPrecision[]<BR>
   </CODE>
   <CODE CLASS="output">50</CODE>
  </P>
  
  <H2><A NAME="SettingNumberFormats">Setting Number Formats</A></H2>
  <P>
   By default, floating-point numbers are displayed in scientific notation
   with one digit before the decimal point.  This can be changed to
   "engineering" format where 1 to 3 digits are placed before the decimal
   point and the exponent is a multiple of 3.  This allows you to more easily
   see it as "milli-", "micro-", "million", etc.  The call to enable this is:
  </P>

  <P CLASS="code">
    <CODE CLASS="input">setEngineering[true]</CODE>
  </P>

  <P>
   Example without engineering mode:
  </P>

  <P CLASS="code">
    <CODE CLASS="input">d = 140.5 million meters</CODE><BR>
    <CODE CLASS="output">1.405000000e+8 m (length)</CODE>
  </P>

  <P>
   Now notice the change if you set "engineering mode" to true.  The result
   comes out so you can more easily read it as "140.5 million meters":

  <P CLASS="code">
    <CODE CLASS="input">setEngineering[true]</CODE><BR>
    <CODE CLASS="input">d</CODE><BR>
    <CODE CLASS="output">140.5000000e+6 m (length)</CODE>
  </P>

  <P>
   In addition, rational numbers are, by default, displayed with a
   floating-point approximation to their values:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">1/10</CODE><BR>
   <CODE CLASS="output">1/10 (exactly 0.1)</CODE>
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">1/3</CODE><BR>
   <CODE CLASS="output">1/3 (approx. 0.3333333333333333)</CODE>
  </P>

  <P>
   This behavior can be suppressed by calling
   <CODE>showApproximations[<I>false</I>]</CODE>.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">showApproximations[<I>false</I>]</CODE><BR>
   <CODE CLASS="input">1/10</CODE><BR>
   <CODE CLASS="output">1/10</CODE>
  </P>

  <P>
   You can tell Frink to always <EM>display</EM> rational numbers as
   floating-point approximations by calling
   <CODE>rationalAsFloat[true]</CODE>.  The numbers will still continue to be
   represented internally as rational numbers.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">rationalAsFloat[<I>true</I>]</CODE><BR>
   <CODE CLASS="input">1/3</CODE><BR>
   <CODE CLASS="output">0.33333333333333</CODE>
  </P>

  <P>
   Frink tries to produce a human-readable description of units of measure,
   such as "power" or "energy" or "temperature":
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">1 K</CODE><BR>
   <CODE CLASS="output">1 K (temperature)</CODE>
  </P>

  <P>
   This suggestion can be suppressed by calling
   <CODE>showDimensionName[false]</CODE>
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">showDimensionName[false]</CODE><BR>
   <CODE CLASS="input">1 K</CODE><BR>
   <CODE CLASS="output">1 K</CODE>
  </P>

  <H2><A NAME="Functions">Functions</A></H2>
  <P>
   If you repeat a calculation, you may want to define it as a function.
   Functions in Frink are denoted by the function name followed by arguments
   in square brackets, separated by commas.  A function can be defined like
   the following:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">circlearea[radius] := pi radius^2</CODE><BR>
  </P>

  <P>
   Then, to call the function, say, to find the area of my telescope mirror,
   which has a radius of 2 inches:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">circlearea[2 inches]</CODE><BR>
   <CODE CLASS="output">0.008107319665559965 m^2 (area)</CODE>
  </P>

  <P>
   But that comes out in standard units... let's try again, converting to
   square inches.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">circlearea[2 inches] -&gt; in^2</CODE><BR>
   <CODE CLASS="output">12.566370</CODE>
  </P>

  <H3><A NAME="MultiLineFunctions">Multi-line Functions</A></H3>
  <P>
   Multi-line functions can be built; just put the body in curly braces.  It
   may be more legible to use the <CODE>return</CODE> statement in your
   function.  For example, the factorial function could be written as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
   factorial[x] :=<BR>
   {<BR>
   &nbsp;&nbsp;&nbsp;if x&gt;1<BR>
   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return x * factorial[x-1]<BR>
   &nbsp;&nbsp;&nbsp;else<BR>
   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1<BR>
    }
    </CODE>
  </P>

  <P>
   If a function does not explicitly return a value, the value returned is the
   value of the last expression evaluated.  A <CODE>return</CODE> statement
   with no value on the right-hand-side returns a special void type.
  </P>

  <H3><A NAME="DefaultValues">Default Values</A></H3>
  <P>
   Function declarations can have default values.  Default values are
   specified by putting "<CODE>= <I>value</I></CODE>" after a parameter name
   in the function declaration.  For example, if your Willard pocket organizer
   goes out, you can use Frink to calculate the tip on your dinner check, and,
   to make it easy, you can default the tip rate to 15 percent of the bill.
   The function declaration with default parameters is:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">tip[amount, rate=15 percent] := amount * rate</CODE><BR>
  </P>

  <P>
   Now, when you get to the restaurant, you can easily calculate the tip using
   the default rate:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">tip[80.75 dollars]</CODE><BR>
   <CODE CLASS="output">12.1125 dollar (currency)</CODE>
  </P>

  <P>
   Or, if service is outstanding and you want to tip at 20%, you can specify
   the second argument instead of leaving it at the default:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">tip[80.75 dollars, 20 percent]</CODE><BR>
   <CODE CLASS="output">16.15 dollar (currency)</CODE>
  </P>

  <H3><A NAME="MultipleReturnValues">Multiple Return Values</A></H3>
  <P>
   The previous tip example probably has you thinking, "Well, it would be nice
   if it calculated the total too!"  I'm bad at math, also... that's why I'm
   developing Frink.
  </P>

  <P>
   In Frink, values surrounded by square brackets and separated by commas form
   a list of values.  These lists can be returned from a function, assigned to
   a variable, or whatever.  A better version of the above function would
   be defined to return a list containing the tip <EM>and</EM> the total as a
   list:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">tipandtotal[amount, rate=15 percent] := [amount * rate,
   amount * (1+rate)]</CODE><BR>
  </P>

  <P>
   Note the square brackets on the right-hand-side of the definition.  Then, to
   calculate the tip, it's as easy as before:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">tipandtotal[80.75 dollars]</CODE><BR>
   <CODE CLASS="output">[12.1125 dollar (currency), 92.8625 dollar (currency)]</CODE>
  </P>

  <P>
   I'll let you do the rounding in your head, or you can use the
   <A HREF="#RoundingFunctions">rounding functions</A> below.
  </P>

  <H3><A NAME="RecursiveFunctions">Recursive Functions</A></H3>
  <P>
   Yes indeedy-o, functions can be recursive.  The classic example is the
   factorial:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">factorial[x] := x&gt;1  ?  x factorial[x-1]  :  1</CODE><BR>
  </P>

  <P>
   This uses the conditional expression <CODE>condition ? trueClause :
    falseClause</CODE>.  The condition is first evaluated (it should evaluate
   to a boolean value,) and if it's true, the true clause is evaluated and
   returned, the false clause otherwise.  Let's try a big number, just big
   enough that it would overflow my old solar calculator:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">factorial[70]</CODE><BR>
   <CODE CLASS="output">119785716699698917960727837216890987364589381425464258
    57555362864628009582789845319680000000000000000</CODE>
  </P>

  <P>
   You can still blow out the stack if you go too deep, or forget to put in a
   condition such that the function terminates.  Don't come crying to me.
  </P>
  
  <H3><A NAME="ConstrainingFunctionArguments">Constraining Function Arguments</A></H3>
  <P>
   Like other variables, formal arguments to functions can have constraints.
   The syntax for constraining is just the same as setting <A
    HREF="#ConstraintsOnVariables">Constraints on variables.</A>  For example,
   if you want to make sure that a function that calculates the volume of a
   sphere is passed a radius, the declaration looks like:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">sphereVolume[radius is length] := 4/3 pi radius^3</CODE>
  </P>

  <P>
   The constraint(s) are checked at runtime, and if all constraints are not
   met, the function call produces an error.
  </P>

  <P>
   At some point in the future, I'd like to have this choose an appropriate
   function based on the constraints, if more than one is possible.  My
   underlying function dispatching is designed to allow this, but functions
   with constraints may be slower to resolve.
  </P>

  <H2><A NAME="IfThenElse">If/Then/Else</A></H2>
  <P>
   You can control program flow with the if/then/else construct.  If the
   condition is true, it will execute the first clause, otherwise, if there is
   an (optional) <CODE>else</CODE> clause, it will execute the
   <CODE>else</CODE> clause.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    if a&lt;10<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;println["Less than ten"]<BR>
    } else<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;println["Greater than ten."]<BR>
    }
   </CODE>
  </P>

  <P>
   <B>Note:</B> Note that putting the brackets and statements on separate
   lines is currently important.  Also, please note that the <CODE>else</CODE>
   keyword goes on the same line as the closing bracket of the
   <CODE>then</CODE> clause.
  </P>

  <P>
   If either the <CODE>then</CODE> or <CODE>else</CODE> clause is a single
   line, the curly braces for that clause can be eliminated.  The following is
   the same as the code above:
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">
    if a&lt;10<BR>
    &nbsp;&nbsp;&nbsp;println["Less than ten"]<BR>
    else<BR>
    &nbsp;&nbsp;&nbsp;println["Greater than ten."]<BR>
   </CODE>
  </P>

  <P>
   The condition must be able to be turned into a boolean value.  When testing
   for equality, be sure to use the double equals sign, (a single equals
   indicates assignment) <I>e.g.</I>:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    if a==b<BR>
    &nbsp;&nbsp;&nbsp;println["Equal."]
   </CODE>
  </P>

  <P>
   If, for some reason, you need to jam everything into one line, you need to
   add the <CODE>then</CODE> keyword:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    if a==b then println["Equal."] else println["Not equal."]
   </CODE>
  </P>

  <H2><A NAME="Truth">Truth</A></H2>
  <P>
   The condition in an if/then/else statement or a loop needs to be a boolean
   (true/false) value.  This can either be represented by the special values
   <CODE>true</CODE> and <CODE>false</CODE>, or the following types can be
   used in places where a boolean value is required:
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Boolean-Equivalent Expressions">
    <TR><TH>True<TH>False
    <TR><TD CLASS="lit">true<TD CLASS="lit">false
    <TR><TD>Any non-empty string<TD>The empty string <CODE>""</CODE>
    <TR><TD>Any list (even a zero-element list)<TD CLASS="lit">
    <TR><TD><TD>The special undefined value <CODE>undef</CODE>
  </TABLE>

  <P>
   Any other value will cause a runtime error.  See the <A
    HREF="#BooleanOperators">Boolean Operators</A> section below for operators
   that return boolean values.
  </P>

  <H2><A NAME="Loops">Loops</A></H2>

  <H3><A NAME="WhileLoop">While Loop</A></H3>
  <P>
   The <CODE>while</CODE> loop is a loop with a condition and a body.  The
   body is executed repeatedly while the condition is true.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    i=0<BR>
    while i&lt;1000000<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;i = i+1<BR>
    }<BR>
   </CODE>
  </P>

  <P>
   If the body is a single line, the braces can be omitted:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    i=0<BR>
    while i&lt;1000000<BR>
    &nbsp;&nbsp;&nbsp;i = i+1<BR>
   </CODE>
  </P>

  <P>
   You can use the <CODE>next</CODE> statement to prematurely jump to the next
   iteration of a <CODE>while</CODE> loop.
  </P>
  
  <P>
   You can use the <CODE>break</CODE> statement to exit the smallest
   containing loop.  You can also use labeled break statements to break out to
   a higher loop:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    i=0<BR>
    <BR>
    OUTERLOOP:<BR>
    while i&lt;1000000<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;i = i+1<BR>
    &nbsp;&nbsp;&nbsp;j = i<BR>
    &nbsp;&nbsp;&nbsp;while j&lt;1000000<BR>
    &nbsp;&nbsp;&nbsp;{<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = j+1<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if i+j > 1000000<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break OUTERLOOP //
    Breaks out of both loops<BR>
    &nbsp;&nbsp;&nbsp;}<BR>
    }
   </CODE>
  </P>

  <P>
   The label must precede the loop <EM>on a separate line</EM> and be followed
   by a colon.
  </P>

  <H3><A NAME="DoWhileLoop">Do...While Loop</A></H3>
  <P>
   The <CODE>do...while</CODE> loop is much like the <CODE>while</CODE> loop,
   the only difference being that with the <CODE>do</CODE> loop, the body of
   the loop is always executed at least once, and then the condition is
   checked.  The body of the loop then repeats as long as the condition is
   true.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    i=0<BR>
    do<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;i = i+1<BR>
    } while i&lt;1000
   </CODE>
  </P>

  <P>
   If the body is a single line, the braces can be omitted, but each part of
   the loop has to be on a different line:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    i=0<BR>
    do<BR>
    &nbsp;&nbsp;&nbsp;i = i+1<BR>
    while i&lt;1000
   </CODE>
  </P>

  <P>
   You can use the <CODE>next</CODE> statement to prematurely jump to the next
   iteration of a <CODE>do</CODE> loop.  Using the <CODE>next</CODE> statement
   currently does <EM>not</EM> check the condition.
  </P>

  <P>
   You can use the <CODE>break</CODE> statement to exit the smallest
   containing loop.  You can also use labeled break statements to break out to
   a higher loop.  See the <A HREF="#WhileLoop">while loop</A> section of the
   documentation for an example.
  </P>

  <H3><A NAME="ForLoop">For Loop</A></H3>
  <P>
   The above <CODE>while</CODE> loop can also be written as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    for i = 1 to 1000000<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;<I>body</I><BR>
    }
   </CODE>
  </P>

  <P>
   If the body is a single line, the curly braces can be omitted.  The above
   sample can be written as:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    for i = 1 to 1000000<BR>
    &nbsp;&nbsp;&nbsp;<I>body</I>
   </CODE>
  </P>


  <P>
   The range and step size can be specified using the <CODE>step</CODE>
   keyword:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">for i = 1 to 1000 step 3</CODE>
  </P>

  <P>
   This also works with a date range, but the step <EM>must</EM> be specified
   and it must have dimensions of time:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">for time = #2001-01-01# to #2002-01-01# step 1 day</CODE>
  </P>
  
  <P>
   The <CODE>for</CODE> loop is also used to iterate over the contents of
   an enumerating expression or array.  (You can think of it as a "for each"
   loop, which is really what it is.)
  </P>

  <P>
   If the enumerating expression produces a list, and you want to break apart
   that list into named variables in the <CODE>for</CODE> loop, write it as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    for [<I>var1</I>, <I>var2, ...</I>] <I>enumerating_expression</I><BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;<I>body</I><BR>
    }
   </CODE>
  </P>

  <P>
   Again, if the body is a single line, the curly braces may be
   omitted:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    for [var1, var2] <I>enum</I><BR>
    &nbsp;&nbsp;&nbsp;<I>body</I>
   </CODE>
  </P>

  <P>
   See the <A HREF="#InputAndOutput">Input and Output</A> section below for a
   sample of its use.
  </P>

  <P>
   You can use the <CODE>next</CODE> statement to prematurely jump to the next
   iteration of a <CODE>for</CODE> loop.
  </P>
  
  <P>
   You can use the <CODE>break</CODE> statement to exit the smallest
   containing loop.  You can also use labeled break statements to break out to
   a higher loop.  See the <A HREF="#WhileLoop">while loop</A> section of the
   documentation for an example.
  </P>
  
  <P>
   (<I>Note to programmers:</I> The special keyword <CODE>to</CODE> creates an
   enumerating expression that successively takes on all values from the
   beginning to the end, inclusive, with the default step being 1.  (The step
   size can be changed as shown below.)  You can use this <CODE>to</CODE>
   notation anywhere to create an enumerating expression that takes on
   successive values.  You can even make it into an array using the
   <CODE>array</CODE> function:)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = array[1 to 10]<BR></CODE>
    <CODE CLASS="output">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</CODE>
  </P>


  <H2><A NAME="SelfEvaluation">Self-Evaluation</A></H2>
  <P>
   Frink can evaluate a string as a Frink expression.  If that means something
   to you, good.  It's cool.  You can make programs that write and run their
   own programs.  Frink became self-aware on December 7, 2001 at 9:26 PM MST.
   This is 1561.926 days after
   <A HREF="http://www.stud.ifi.uio.no/~haakonhj/Terminator/Faq/answers/q6.1.shtml">Skynet</A>
   became self-aware.  History will be the judge if <EM>this</EM> December 7th
   is another date that will live in infamy.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">eval["2 + 2"]</CODE><BR>
   <CODE CLASS="output">4</CODE>
  </P>

  <P>
   This behavior can also be used to convert a string into a number.  It
   allows users to enter information as any Frink expression such as <CODE>"6
    billion tons"</CODE> or <CODE>2+2</CODE> and have it handled correctly.
   See the <A HREF="#Input">Input</A> section below for examples of its use.
  </P>

  <P>
   <CODE>eval[]</CODE> can also be used to perform another layer of evaluation
   on a value that is not a string.
  </P>

  <P>
   If <CODE>eval[]</CODE> is passed an array, all elements of the array will
   be individually evaluated and the result will be returned in an array.
  </P>

  <P>
   There is also a two-argument version, <CODE>eval[<I>expression</I>,
   <I>rethrows</I>]</CODE> where the <CODE>rethrows</CODE> argument is a
   boolean flag indicating if we want evaluation errors to be thrown or just
   suppressed and <CODE>undef</CODE> returned.  If it is true, errors will be
   rethrown as Java exceptions, otherwise an error returns <CODE>undef</CODE>.
  </P>

  <P>
   There is also a three-argument version, <CODE>eval[<I>expression</I>,
   <I>rethrows</I>, <I>hidesLocals</I>]</CODE> where the
   <CODE>hidesLocal</CODE> argument is a boolean flag indicating if we want
   to hide local variables before evaluation.
  </P>
  <H3><A NAME="SecurityRestrictionsOnEval">Security Restrictions on eval[]</A></H3>
  <P>
   The <CODE>eval[]</CODE> function restricts some insecure operations from
   being performed (<I>e.g.</I> you can't read files from the local
   filesystem.)  If you need all functions to be available from your
   evaluation, use the intentionally frighteningly-named
   <CODE>unsafeEval[<I>str</I>]</CODE>
  </P>

  <H2><A NAME="Arrays">Arrays</A></H2>
  <P>
   Arbitrarily-dimensional, non-rectangular, heterogeneous arrays are
   possible.  (If you're playing "buzzword bingo," you just won.)  Array
   indices are zero-based.  Arrays are indicated by square brackets.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">c = [1, 2, 3]</CODE><BR>
  </P>

  <P>
   You can break arrays into multiple lines by inserting newlines after the
   commas:
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">b = [1, 2, 3,<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4, 5, 6,<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7, 8, 9]</CODE>
  </P>

  <P>
   Think of multidimensional arrays as being a list of lists.  For example,
   to create a 2-dimensional array:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a = [[1, 2, 3],<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6],<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]]</CODE>
  </P>

  <P>
   To get elements out, use the lovely @ operator (yes, I'm running out of
   bracket types... square brackets would be indistinguishable from function
   calls):
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a@0</CODE><BR>
   <CODE CLASS="output">[1, 2, 3]</CODE><BR>
   <CODE CLASS="input">a@0@2</CODE><BR>
   <CODE CLASS="output">3</CODE><BR>
  </P>

  <P>
   Arrays can be modified in place and automatically extended:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">a@3= "Monkey"</CODE><BR>
   <CODE CLASS="output">[[1, 2, 3], [4, 5, 6], [7, 8, 9], Monkey]</CODE><BR>
   <CODE CLASS="input">a@0@2 = 42</CODE><BR>
   <CODE CLASS="output">[[1, 2, 42], [4, 5, 6], [7, 8, 9], Monkey]</CODE><BR>
  </P>

  <P CLASS="code">
   To get the length of an array, use the <CODE>length</CODE> function:<BR>
   <CODE CLASS="input">length[a]</CODE><BR>
   <CODE CLASS="output">4</CODE><BR>
  </P>

  <P>
   With the advent of array manipulation, I've proven to myself that Frink is
   capable of simulating a Turing machine, and thus, as of December 12, 2001,
   at 10:16 PM MST, Frink is theoretically capable of calculating anything
   calculable by any other programming language.
  </P>

  <P>
   To create a new empty array, use the notation:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a = new array</CODE>
  </P>

  <H3><A NAME="ArrayMethods">Array Methods</A></H3>
  <P>It is very important to note that arrays are normally passed by
   reference.  This means that if you assign an array to another variable, and
   modify the second variable, then you are modifying the original!
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a = [3,2,1]<BR>
    b = a<BR>
    sort[b]<BR>
    println[a]   // a is also sorted!</CODE><BR>
   <CODE CLASS="output">[1,2,3]</CODE>
  </P>

  <P>
   To avoid this behavior, use the method
   <CODE><I>array</I>.shallowCopy[]</CODE>.  This makes a shallow copy of the
   object.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">a = [3,2,1]<BR>
    b = a.shallowCopy[]<BR>
    sort[b]<BR>
    println[a]   // a is now not sorted.</CODE><BR>
   <CODE CLASS="output">[3,2,1]</CODE>
  </P>
  
  <P>
   Variables that contain an array can be automatically extended by using the
   methods <CODE>a.push[<I>x</I>]</CODE> and <CODE>a.pop[]</CODE> to append an
   item to the end of an array, or remove an item from the end of the array:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = [1, 2]<BR>
    array.push[3]</CODE><BR>
   <CODE CLASS="output">[1, 2, 3]</CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = [1, 2, 3]<BR>
    c = array.pop[]<BR>
   array</CODE> now contains <CODE CLASS="output">[1, 2]</CODE><BR>
   <CODE CLASS="input">c</CODE> now contains <CODE CLASS="output">3</CODE>
  </P>

  <P>
   Items can also be inserted or popped from the <EM>front</EM> of an array by
   using the methods <CODE>a.pushFirst[<I>x</I>]</CODE> and
   <CODE>a.popFirst[]</CODE> methods.
  </P>
  
  <P>Items can be inserted into an array using the method
   <CODE>a.insert[<I>index</I>, <I>value</I>]</CODE>.  This inserts the
   specified value <EM>before</EM> the item at the specified index.  If the
   index is greater than or equal to the size of the array, the array is
   extended to fit the new elements, setting any unspecified values to the
   undefined value <CODE>undef</CODE>.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = [0, 1, 2]<BR>
    array.insert[0, "first"]<BR>
   array</CODE> now contains <CODE CLASS="output">[first, 0, 1, 2]</CODE>
  </P>

  <P>
   Items can be removed from an array using the method
   <CODE>a.remove[<I>index</I>]</CODE>.  This removes the item with the
   specified index and returns it, so you can do something with the value if
   desired.  If the specified index does not exist, this generates an error.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">array = ["a", "b", "c"]<BR>
    n = array.remove[1]<BR>
   array</CODE> now contains <CODE CLASS="output">["a", "c"]</CODE>
  </P>
  
  <P>
   Items with a specified <EM>value</EM> can be removed from an array using
   the method <CODE>a.removeValue[<I>value</I>]</CODE>.  This removes the
   first item having the specified <EM>value</EM> from the array.  If a
   matching item is found, this returns <CODE>true</CODE>, otherwise returns
   <CODE>false</CODE>.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = ["one", "two", "three"]<BR>
   array.removeValue["two"]<BR> array</CODE> now contains <CODE
   CLASS="output">["one", "three"]</CODE>
  </P>

  <P>
   A random item can be removed from an array using the method
   <CODE>a.removeRandom[]</CODE>.  This removes a random item and returns
   its value.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = ["a", "b", "c"]<BR>
    n = array.removeRandom[]</CODE>
  </P>

  <P>
   You can obtain all of the permutations of the array by using the
   <CODE>permute</CODE> method.  This returns an enumerating expression that
   lazily generates the permutations.  Note that the permutations are
   currently in reflected Gray code order, but this may change.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = [1, 2, 3]<BR>
    array.permute[]<BR></CODE>
   <CODE CLASS="output">[[1, 2, 3], [1, 3, 2], [3, 1, 2], [3, 2, 1], [2, 3, 1], [2, 1, 3]]</CODE>
  </P>
  
  <P>
   If you need the results in lexicographical order, with duplicates removed,
   you can obtain all of the permutations of the array by using the
   <CODE>lexicographicPermute</CODE> method.
   This returns an enumerating expression that lazily generates the
   permutations.  Note that all of the elements of the array <EM>must be
    comparable to each other</EM>, a constraint which is not necessary in the
   <CODE>permute</CODE> method.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = [1, 2, 3]<BR>
    array.lexicographicPermute[]<BR></CODE>
   <CODE CLASS="output">[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</CODE>
  </P>
  
  <H2><A NAME="Input">Input</A></H2>
  <P>
   You can request input from the user with the
   <CODE>input[<I>prompt</I>]</CODE> or
   <CODE>input[<I>prompt</I>,&nbsp;<I>defaultValue</I>]</CODE> function.
   The result always comes back as a string, but you can parse it into a unit,
   a date, or whatever, using the <CODE>eval[str]</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">radius = input["Enter the radius of a sphere: "]</CODE><BR>
   <CODE CLASS="input">volume = 4/3 pi eval[radius]^3</CODE><BR>
  </P>

  <P>
   This allows your users to enter things like "3 inches" or "1 mile" or any
   units that Frink knows about (like "earthradius",) and everything will Just
   Work.  (That "Self-Evaluation" section above seemed irrelevant at the time,
   but it turns out it's quite useful.)
  </P>

  <H2><A NAME="Output">Output</A></H2>
  <P>
   To print, use the <CODE>print</CODE> or <CODE>println</CODE> functions,
   each of which take one argument.  The only difference is that
   <CODE>println</CODE> sends a linefeed afterwards.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">println["The volume of the sphere is " + (volume -&gt;
    ft^3) + " cubic feet."]</CODE><BR>
  </P>

  <H2><A NAME="BooleanOperators">Boolean Operators</A></H2>
  <P>
   I'm just going to list a forest of cryptic boolean expressions here without
   explanation.  You pick out the ones you like.  They all work, and there are
   usually multiple equivalents for the same thing, taken from different
   languages.  I've tried to keep precedence the same as Java.  There is no
   difference between the different versions of, say,
   <CODE CLASS="input">and</CODE>, <CODE CLASS="input">AND</CODE>,
   and <CODE CLASS="input">&amp;&amp;</CODE> .
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    true TRUE false FALSE == != &lt;&gt; &lt; &lt;= &gt; &gt;= &amp;&amp; and
    AND || or OR ! NOT not nand NAND nor NOR xor XOR implies IMPLIES
   </CODE>
  </P>

  <H2><A NAME="Dictionaries">Dictionaries</A></H2>
  <P>
   A dictionary is an associative data structure that lets you map arbitrary
   keys to values (currently, keys can be strings or units, that is, numbers.
   Please note that it makes very little sense to hash on a floating-point
   value!  Don't do it!)  The syntax may change in the future, but right now
   it looks like the syntax for array element manipulation.  You simply create
   an empty dictionary using <CODE>new dict</CODE>.  Here's a sample as it
   works now:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = new dict</CODE>  <CODE CLASS="comment">// Construct a dictionary</CODE><BR>
   <CODE CLASS="input">
    a@"one" = 1<BR>
    a@"two" = 2<BR>
    a@"three" = 3<BR>
   </CODE>
   <CODE CLASS="input">
    a@"one"<BR>
   </CODE>
   <CODE CLASS="output">
    1<BR></CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    b = new dict</CODE>  <CODE CLASS="comment">// Construct a dictionary</CODE><BR>
   <CODE CLASS="input">
    b@1 = "one"<BR>
    b@2 = "two"<BR>
    b@3 = "three"<BR>
   </CODE>
   <CODE CLASS="input">
    b@1<BR>
   </CODE>
   <CODE CLASS="output">
    one<BR></CODE>
  </P>
  
  <P>You can get an enumeration of the keys in a dictionary by using the
   <CODE>keys</CODE> function.  This function does not return the keys in any
   defined order, but you can sort them with the <A HREF="#Sorting">sorting
    functions</A> below.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">for key = keys[a]<BR>
    &nbsp;&nbsp;&nbsp;println[ "$key = " + a@key]</CODE><BR>
   <CODE CLASS="output">
    two = 2<BR>
    one = 1<BR>
    three = 3<BR>
   </CODE>
  </P>

  <P>
   You can also enumerate over <CODE>[key, value]</CODE> pairs directly in a
   dictionary.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">for [key,value] a<BR>
    &nbsp;&nbsp;&nbsp;println["$key = $value"]</CODE><BR>
   <CODE CLASS="output">
    two = 2<BR>
    one = 1<BR>
    three = 3<BR>
   </CODE>
  </P>

  <P>
   A dictionary can be cleared by using the <CODE>clear</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a.clear[]<BR>
    a<BR>
   </CODE>
   <CODE CLASS="output">
    []
   </CODE>
  </P>

  <P>
   A dictionary can be queries to see if it contains a specific key using the
   <CODE>containsKey[<I>key</I>]</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">b.containsKey[1]</CODE><BR>
   <CODE CLASS="output">true</CODE><BR>
   <CODE CLASS="input">b.containsKey[4]</CODE><BR>
   <CODE CLASS="output">false</CODE>
  </P>
  
  <H2><A NAME="Sets">Sets</A></H2>
  <P>
   A set is a data structure that contains items with no duplicates.  A set
   must contain values that are strings or units, that is, numbers.
   You simply create an empty set using <CODE>new set</CODE>.  Note that sets
   do not preserve any order of the items contained in them.  There are a
   variety of methods for modifying sets:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = new set</CODE>  <CODE CLASS="comment">// Construct a set</CODE><BR>
  </P>

  <P>
   Items are inserted into a set using the <CODE>put</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a.put[1]<BR>
    a.put[2]<BR>
   </CODE>
   <CODE CLASS="output">
    [1,2]
   </CODE>
  </P>

  <P>
   Items are removed from a set using the <CODE>remove</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a.remove[2]<BR>
    a<BR>
   </CODE>
   <CODE CLASS="output">
    [1]
   </CODE>
  </P>

  <P>
   A set can be tested to see if it contains a value by using the
   <CODE>contains</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a.contains[1]<BR>
   </CODE>
   <CODE CLASS="output">
    true
   </CODE>
  </P>

  <P>
   You can get a shallow copy of a set by calling its
   <CODE>.shallowCopy[]</CODE> method.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    b = a.shallowCopy[]<BR>
    b.put[2]<BR>
    b<BR>
   </CODE>
   <CODE CLASS="output">
    [1,2]
   </CODE>
  </P>
  
  <P>
   A set can be cleared by using the <CODE>clear</CODE> method:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a.clear[]<BR>
    a<BR>
   </CODE>
   <CODE CLASS="output">
    []
   </CODE>
  </P>
  
  <P>
   You can also enumerate over values contained in a set:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">for value = a<BR>
    &nbsp;&nbsp;&nbsp;println[value]</CODE>
  </P>

  
  <H3><A NAME="SetFunctions">Set Functions</A></H3>
  <P>
   The following functions operate on sets:
  </P>
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Set Functions">
    <TR><TH>Function<TH>Description

    <TR><TD CLASS="lit">union[<I>a</I>, <I>b</I>]<TD>Returns a new set whose
      value is the union of sets <CODE>a</CODE> and <CODE>b</CODE>.
      (Sometimes written <CODE>a &cup; b</CODE>.) In other
      words, the new set contains all of the elements that exist in
      <EM>either</EM> set <CODE>a</CODE> <EM>or</EM> set <CODE>b</CODE>.

    <TR><TD CLASS="lit">intersection[<I>a</I>, <I>b</I>]<TD>Returns a new set
      whose value is the intersection of sets <CODE>a</CODE> and
      <CODE>b</CODE>. (Sometimes written <CODE>a &cap; b</CODE>.)
      In other words, the new set contains only the elements
      that exist in <EM>both</EM> set <CODE>a</CODE> <EM>and</EM> set
      <CODE>b</CODE>.

    <TR><TD CLASS="lit">setDifference[<I>a</I>, <I>b</I>]<TD>Returns a new set
      whose value is the difference of sets <CODE>a</CODE> and
      <CODE>b</CODE>. (Sometimes written <CODE>a - b</CODE>.)
      In other words, the new set contains only the elements
      that exist in set <CODE>a</CODE> <EM>but not</EM> in set
      <CODE>b</CODE>.

    <TR><TD CLASS="lit">isSubset[<I>a</I>, <I>b</I>]<TD>Returns true if
      sets <CODE>a</CODE> is a subset of set <CODE>b</CODE>. (Sometimes
      written <CODE>a &sube; b</CODE>.)  In other words, this returns true if
      all of the elements in set <CODE>a</CODE> are also contained in set
      <CODE>b</CODE>.  <EM>Note that this does not test that this is a
       "proper" subset.</EM>  See below.

    <TR><TD CLASS="lit">isProperSubset[<I>a</I>, <I>b</I>]<TD>Returns true if
      sets <CODE>a</CODE> is a <EM>proper</EM> subset of set
      <CODE>b</CODE>. (Sometimes written <CODE>a &sub; b</CODE>.)  In other
      words, this returns true if  all of the elements in set <CODE>a</CODE>
      are also contained in set <CODE>b</CODE> <EM>and</EM> set <CODE>a</CODE>
      also has fewer members than b.
    <TR><TD CLASS="lit">length[<I>a</I>]<TD>Returns the cardinality of the
      set, that is, the number of items it contains.
  </TABLE>
  
  <H2><A NAME="CommonFunctions">Common Functions</A></H2>
  <P>
   The most common trigonometric functions are built in.  They, as everything
   else in Frink, are best used when you explicitly specify the units.  For
   the following functions, input should be an angle, and output will come out
   dimensionless.  (If no unit is specified for input, it should act like
   radians, because radians <EM>are</EM> dimensionless units and really
   indistinguishable from pure numbers.)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">sin[90 degrees]</CODE><BR>
   <CODE CLASS="input">cos[2 pi radians]</CODE><BR>
   <CODE CLASS="input">tan[30 arcsec]</CODE><BR>
   <CODE CLASS="input">sec[45 degrees]</CODE><BR>
   <CODE CLASS="input">csc[pi/2 radians]</CODE><BR>
   <CODE CLASS="input">cot[30 arcsec]</CODE><BR>
   <CODE CLASS="input">sinh[90 degrees]</CODE><BR>
   <CODE CLASS="input">cosh[2 pi radians]</CODE><BR>
   <CODE CLASS="input">tanh[30 arcsec]</CODE><BR>
  </P>

  <P>
   For inverse operations, the input must be dimensionless, and the output
   will come out in angular units.  (Radians, by default.)  This is easily
   converted to whatever angular units you want, as above.  You don't see that
   the output is in radians because radians are essentially dimensionless
   numbers.  You just gotta be a bit careful with angles.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">arcsin[.1] -&gt; degrees</CODE><BR>
   <CODE CLASS="input">arccos[1/2] -&gt; radians</CODE><BR>
   <CODE CLASS="input">arcsin[.1] -&gt; degrees</CODE><BR>
   <CODE CLASS="input">arccsc[3/2] -&gt; radians</CODE><BR>
   <CODE CLASS="input">arcsec[3/2] -&gt; radians</CODE><BR>
   <CODE CLASS="input">arccot[1/2] -&gt; radians</CODE><BR>
   <CODE CLASS="input">arctan[3 inches/(1 foot)] -&gt; arcminutes</CODE><BR>
   (Returns a value in the range [-&pi;/2, &pi;/2])<BR>
   <CODE CLASS="input">arctan[3 inches, 1 foot] -&gt; degrees</CODE><BR>
   (Calculates <CODE>arctan[x/y]</CODE> corrected for the proper quadrant.
   Returns a value in the range [-&pi;, &pi;]) 
  </P>

  <H3><A NAME="RoundingFunctions">Rounding Functions</A></H3>
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Rounding Functions">
   <TR><TH>Function<TH>Definition
    <TR><TD CLASS="lit">floor[x]<TD>Returns largest integer &lt;= x
    <TR><TD CLASS="lit">ceil[x]<TD>Returns smallest integer &gt;= x
    <TR><TD CLASS="lit">round[x]<TD>Rounds to nearest integer
    <TR><TD CLASS="lit">round[x, y]<TD>Rounds <CODE>x</CODE> to nearest
      multiple of <CODE>y</CODE>
    <TR><TD CLASS="lit">int[x]<TD>Truncates decimal places to produce integer
    <TR><TD CLASS="lit">trunc[x]<TD>Truncates decimal places to produce
      integer
    <TR><TD CLASS="lit">numerator[x]<TD>Returns the numerator of a rational,
      dimensionless number.  If the number is not rational and dimensionless,
      simply returns the number.
    <TR><TD CLASS="lit">denominator[x]<TD>Returns the denominator of a rational
      number.  If the number is not rational and dimensionless, simply returns
      1.
  </TABLE>

  <H3><A NAME="NumberTheory">Number Theory</A></H3>
  <P>
   Some functions for number theory and factorization are available.
  </P>

  <P>
   <B>Note:</B> If you're doing number-theoretical work with very large
   integers, please see the <A HREF="#PerformanceTips">Performance Tips</A>
   section of the documentation for ways to greatly improve integer
   performance.
  </P>
  
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Other Functions">
    <TR><TH>Function<TH>Description

    <TR><TD CLASS="lit">bitLength[<I>x</I>]<TD>Returns the number of bits in
      the minimal two's-complement representation of an integer,
      <EM>excluding</EM> a sign bit.
      
    <TR><TD CLASS="lit">getBit[<I>num</I>,&nbsp;<I>bit</I>]<TD>Returns an
      integer, either 0 or 1, indicating the value of the specified bit in an
      integer.  Bit 0 is the least-significant bit.  The number is treated as
      a two's-complement representation with infinite length.  That is, the
      high bits on a negative number will always be 1, and the high bits on a
      positive number or zero will always be 0.
      
    <TR><TD CLASS="lit">gcd[<I>x</I>,&nbsp;<I>y</I>]<TD>Returns the greatest
      common divisor of the integers <CODE>x</CODE> and <CODE>y</CODE>.

    <TR><TD CLASS="lit">lcm[<I>x</I>,&nbsp;<I>y</I>]<TD>Returns the least
      common multiple of the integers <CODE>x</CODE> and <CODE>y</CODE>.
      
    <TR><TD CLASS="lit">isPrime[<I>x</I>]<TD>Returns false if the integer
      <CODE>x</CODE> is composite, true if the number is prime (or probably
      prime.)  This test uses trial division and then Rabin-Miller strong
      pseudoprime tests to determine primality.  The bases used in the
      Rabin-Miller test are known to always return correct answers for numbers
      smaller than 341,550,071,728,321, but for larger numbers this function
      may erroneously declare a composite number to be prime.  (If it returns
      false, the number is definitely composite.)
      
      <P>
       If the number is larger than this, the test is performed against all 78
       prime bases less than or equal to 400.  This gives a <EM>very</EM>
       small probability of about 1 in 10<SUP>47</SUP> that the function may
       return <CODE>true</CODE> for a composite number.  (And that's a
       worst-case; for randomly-chosen large numbers, the probability of error
       is actually far, far lower for most numbers, especially big ones.  The
       above assumes the ridiculously low estimate that the pseudoprime test
       fails 1/4 of the time.  The reality is orders of magnitude lower.  For
       better estimates,
       see <A HREF="http://primes.utm.edu/notes/prp_prob.html" 
              TARGET="_blank">Probable primes: How Probable?</A> and remember
       to raise each number given in that table <EM>to the 78th power!</EM>
      </P>
      
      <P>
       It is more likely that any of the following will happen:
      </P>

      <UL>
       <LI>Your hardware will fail and return the wrong answer (perhaps due to
        a cosmic ray hitting it.)

       <LI>You'll flip a coin 156 times in a row and it will land on "heads"
        every time.

       <LI>You'll play roulette and your number will get picked 29 times in a
        row.

       <LI>You'll test a trillion numbers every second for the known lifetime
        of the universe and you'll still only have a miniscule 1 in
        10<SUP>17</SUP> chance of getting a single wrong answer.
      </UL>

      <P>
       And these are ridiculously generous estimates.  Your actual
       probabilities are nowhere near this good.
      </P>

      <P>
       As of the 2005-11-13 release, <CODE>isPrime[<I>x</I>]</CODE> was
       extended to automatically use a faster Lucas-Lehmer test if <I>x</I> is
       of the form 2<SUP>n</SUP>-1 (<I>i.e.</I> Mersenne numbers).  Note that
       this the Lucas-Lehmer test is sufficient to <EM>prove</EM> primality
       for numbers of this form, regardless of their size.
      </P>
      
    <TR><TD CLASS="lit">factor[<I>x</I>]<TD>Returns the prime factors of an
      integer <CODE>x</CODE> as a two-dimensional list.  This uses trial
      division, then the Pollard <I>p-1</I> method, and then the Pollard Rho
      method to find factors.  The factor list consists of a list of pairs of
      prime factors and the exponent of each factor:

      <P CLASS="code">
       <CODE CLASS="input">factor[1000]</CODE><BR>
       <CODE CLASS="output">[[2, 3], [5, 3]]</CODE>
      </P>

      <P>
       This indicates that the prime factors of 1000 are 2<SUP>3</SUP> *
       5<SUP>3</SUP>.
      </P>
      
    <TR><TD CLASS="lit">JacobiSymbol[<I>a,n</I>]<TD>Returns the Jacobi symbol
      (often written as (a/n) ) of the integers <CODE>a</CODE> and
      <CODE>n</CODE>.  <CODE>n</CODE> must be a positive, odd integer.  This
      function is used in factorization and primality testing.  The Jacobi
      symbol is a generalization of the Legendre symbol, so it can be used to
      calculate the Legendre symbol of two numbers.  (The Legendre symbol is
      only defined if <CODE>n</CODE> is prime.)
      <P>
       <B>Warning:</B> In releases of Frink prior to the 2005-03-11 release,
       this function could return the wrong value if <I>a</I> was negative and
       within the range [-2147483648, -1].
      </P>

    <TR><TD CLASS="lit">isStrongPseudoprime[<I>num</I>, <I>base</I>]<TD>
      Returns true if <CODE>num</CODE> is a strong pseudoprime to base
      <CODE>base</CODE>.  If this returns false, the number is definitely
      composite.  If it returns true, the number <EM>may</EM> be prime.  This
      does <EM>not</EM> prove that a number is actually prime, as
      numbers can fail this test for up to 1/4 of bases.  This can be used as a
      component of a prime sieving algorithm.

    <TR><TD CLASS="lit"><CODE>nextPrime[<I>n</I>]</CODE><TD>Returns the next
      prime number <EM>greater than</EM> <CODE>n</CODE>.  The value of
      <CODE>n</CODE> may be any real number.  This method uses a wheel
      factoring method to completely avoid testing composite numbers with
      small factors.

    <TR><TD CLASS="lit"><CODE>partitionCount[<I>n</I>]</CODE><TD>Returns the
      number of ways that the integer n can be partitioned.  This uses Euler's
      pentagonal number algorithm to find the partition count somewhat
      efficiently, and caches the results so subsequent calls to this function
        will be efficient.

    <TR><TD CLASS="lit"><CODE>binomial[<I>m,n</I>]</CODE><TD>Returns the
     binomial coefficient.  This is of the number of ways <CODE>m</CODE>
     things can be chosen <CODE>n</CODE> at a time, with order being
     unimportant.  This is sometimes called "m choose n" or "m C n".  This is
     equivalent to m!/(n!*(m-n)!) although calculating that way often leads to
     way-too-big numbers.  For example, binomial[10000, 9998] is equal to
     49995000, but if you calculated it naively, you'd have to calculate
     10000! which is a 35660-digit number, and divide it by another huge
        number, which could be inefficient and slow.
        
    <TR><TD CLASS="lit"><CODE>eulerPhi[<I>n</I>]</CODE><TD>Returns Euler's
     Totient (also known as the phi function or Euler's Phi) of the given
     integer.  This is the number of positive integers less than n that share
      no factors with n.

     <TR><TD CLASS="lit"><CODE>DFT[<I>array, divFactor=-1, direction =
     1</I>]</CODE><P><CODE>InverseDFT[<I>array, divFactor=-1, direction =
     1</I>]</CODE><TD>Performs a Discrete Fourier Transform of the given
         array.
      <P>Since different fields of mathematics and engineering use
       different conventions for the Fourier transform, these
       functions allow you to (optionally) specify the scaling factor and
        sign convention.
      <P>
      The (optional) second argument divFactor sets the scaling factor for
      the results:
      
      <TABLE BORDER=1 SUMMARY="DFT divFactor Options">
       <TR><TH><TH>FFT<TH>InverseDFT

       <TR><TD>divFactor = -1 <I>(default)</I><TD>1/n<TD>1
       <TR><TD>divFactor = 0<TD>1/sqrt[n]<TD>1/sqrt[n]
       <TR><TD>divFactor =  1<TD>1<TD>1/n
      </TABLE>
      
      <P>
      The (optional) third argument direction sets the sign used in the
      exponent.
      
      <TABLE BORDER=1 SUMMARY="DFT direction Options">
      <TR><TH><TH>FFT<TH>InverseDFT
      <TR><TD>direction =  1 <I>(default)</I><TD>e<SUP>2 pi i j k / n</SUP><TD>e<SUP>-2 pi i j k / n</SUP>
      <TR><TD>direction = -1<TD>e<SUP>-2 pi i j k / n</SUP><TD>e<SUP>2 pi i j k / n</SUP>
      </TABLE>

      <P>The <CODE>InverseDFT</CODE> function produces the inverse of the DFT
        given by the DFT function.  In fact, it just calls the DFT function
        with appropriately-reversed parameters.
      <P>
        If you specified the optional second or third arguments for the DFT
        function, you will need to pass in the <EM>same</EM> arguments to the
        InverseDFT function to get the inverse operation.  This function takes
        care of reversing them appropriately.
  </TABLE>

  <P>
   Other number-theoretical functions, such as those for calculating the
   values of the <A
   HREF="/fsp/colorize.fsp?fileName=RiemannZeta.frink">Riemann Zeta</A>
   function may be available in the <A
   HREF="/fsp/samples.fsp">Sample&nbsp;Programs</A> library.
  </P>
  
  <H3><A NAME="OtherFunctions">Other Functions</A></H3>
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Other Functions">
   <TR><TH>Function<TH>Definition
    <TR><TD CLASS="lit">inv[x]<TD>Reciprocal 1/x
    <TR><TD CLASS="lit">recip[x]<TD>Reciprocal 1/x
    <TR><TD CLASS="lit">sqrt[x]<TD>Square root
    <TR><TD CLASS="lit">log[x]<TD>common log, base 10
    <TR><TD CLASS="lit">ln[x]<TD>natural log, base <I>e</I>
    <TR><TD CLASS="lit">exp[x]<TD><I>e<SUP>x</SUP></I>
    <TR><TD CLASS="lit">Re[x]<TD>The real part of x
    <TR><TD CLASS="lit">Im[x]<TD>The imaginary part of x as a real number.
    <TR><TD CLASS="lit">sinh[x]<TD>Hyperbolic sine of x, or
      (e<SUP>z</SUP> - e<SUP>-z</SUP>)/2
    <TR><TD CLASS="lit">arcsinh[x], asinh[x]<TD>Inverse hyperbolic sine of x,
      or ln[z + sqrt[1 + z^2]]
    <TR><TD CLASS="lit">arccosh[x], acosh[x]<TD>Inverse hyperbolic cosine of x,
      or ln[x + sqrt[x-1] sqrt[x+1]]
    <TR><TD CLASS="lit">arccsch[x], acsch[x]<TD>Inverse hyperbolic cosecant of
      x, or ln[sqrt[1 + 1/z^2] + 1/z]
    <TR><TD CLASS="lit">arctanh[x], atanh[x]<TD>Inverse hyperbolic tangent of
      x, or 1/2 (ln[1+z] - ln[1-z])
    <TR><TD CLASS="lit">cosh[x]<TD>Hyperbolic cosine of x, or
      (e<SUP>z</SUP> + e<SUP>-z</SUP>)/2
    <TR><TD CLASS="lit">tanh[x]<TD>Hyperbolic tangent of x, or
      <CODE>sinh[x]/cosh[x]</CODE>
    <TR><TD CLASS="lit">abs[x]<TD>absolute value; returns complex number
      <CODE>abs[x + iy] = sqrt[x^2 + y^2]</CODE> for complex arguments.  For
      interval arguments, returns an interval (which may contain zero if the
      interval contains zero.) Note that the result will also have the same
      dimensions as the argument!
    <TR><TD CLASS="lit">signum[x]<TD>Returns the sign of the argument.  For
      real-valued arguments, this returns (-1 if x&lt;0), (0 if x==0), (1 if
      x&gt;0).
      For complex arguments, returns <CODE>x/abs[x]</CODE>.  For intervals,
      returns an interval containing the signum of each endpoint (which may be
      collapsed to a single value if both endpoints have the same sign.)  Note
      that the result will also have the same dimensions as the argument!
    <TR><TD CLASS="lit">format[num, divideBy, decPlaces]<TD>Divides
      <CODE>num</CODE> by <CODE>divideBy</CODE> and returns a string with no
      more than <CODE>decPlaces</CODE> decimal places. <I>e.g.</I><BR>
      format[len, 1 feet, 2].
      <P>If <CODE>divideBy</CODE> is a string, this evaluates the string,
       expecting a unit to be returned, and both divides by this unit and
       prints the string after the result.
      </P>
    <TR><TD CLASS="lit">random[x]<TD>Pick a random integer between 0
      (inclusive) and x (exclusive.)
    <TR><TD CLASS="lit">random[min, max]<TD>Pick a random integer between min
      (inclusive) and max (inclusive.)
    <TR><TD CLASS="lit">randomFloat[<I>lower</I>, <I>upper</I>]<TD>Pick a 
      uniformly-distributed random floating-point value in the specifed range.
    <TR><TD CLASS="lit">randomGaussian[<I>mean</I>, <I>sd</I>]<TD>Pick a 
      normally-distributed (i.e. "bell curve") random floating-point value
      with the specified mean and standard deviation.
    <TR><TD CLASS="lit">randomBits[<I>numBits</I>]<TD>Generate a random
      positive integer containing <I>numBits</I> evenly-distributed binary
      bits.
    <TR><TD CLASS="lit">randomSeed[<I>seed</I>]<TD>To obtain repeatable
      results with a program that generates random numbers, sometimes it is
      desirable to use the same random sequence.  This function seeds the
      random number generator with a known value.  The seed must a number from
      -2<SUP>63</SUP> to 2<SUP>63</SUP>-1 (both inclusive.) 
    <TR><TD CLASS="lit">bitLength[<I>int</I>]<TD>Returns the number of bits in
      the minimal two's-complement representation of an integer,
      <EM>excluding</EM> a sign bit.
    <TR><TD CLASS="lit">modPow[<I>base</I>,<I>exponent</I>,
      <I>modulus</I>]<TD>Perform the integer modular exponentiation
      <I>base<SUP>exponent</SUP>&nbsp;</I>mod&nbsp;<I>modulus</i>
    <TR><TD CLASS="lit">modDiv[<I>n</I>,<I>m</I>,<I>modulus</I>]<TD>Performs
      the integer modular division 
      <I>n/m&nbsp;</I>mod&nbsp;<I>modulus</i> and returns the integer result
      if one exists, otherwise returns <CODE>undef</CODE>.
    <TR><TD CLASS="lit">modInverse[<I>n</I>,<I>modulus</I>]
     <TD>Finds the integer modular inverse of <I>n</I> to the base
      <I>modulus</i> and returns the integer result
      if it is invertible, otherwise returns <CODE>undef</CODE>.
    <TR><TD CLASS="lit">min[<I>arg1</I>,&nbsp;<I>arg2</I>]<TD>Returns the
      smaller of the two arguments, or the first argument if they're equal.
    <TR><TD CLASS="lit">min[<I>array</I>]<TD>Returns the smallest item in the
      array.
    <TR><TD CLASS="lit">max[<I>arg1</I>,&nbsp;<I>arg2</I>]<TD>Returns the
      larger of the two arguments, or the first argument if they're equal.
    <TR><TD CLASS="lit">max[<I>array</I>]<TD>Returns the largest item in the
      array.
    <TR><TD CLASS="lit">isInteger[<I>expr</I>]<TD>Returns true if the argument
      is a dimensionless integer, false otherwise.
    <TR><TD CLASS="lit">isRational[<I>expr</I>]<TD>Returns true if the argument
      is a dimensionless rational number (and <EM>not</EM> an integer,) false
      otherwise.
    <TR><TD CLASS="lit">isNegative[<I>expr</I>]<TD>Returns true if the argument
      is a dimensionless negative number, false otherwise.
    <TR><TD CLASS="lit">isPositive[<I>expr</I>]<TD>Returns true if the argument
      is a dimensionless positive number, false otherwise.
    <TR><TD CLASS="lit">isUnit[<I>expr</I>]<TD>Returns true if the number is
      a unit of any type, including dimensionless numbers.
    <TR><TD CLASS="lit"><CODE>sum[<I>x</I>]</CODE><TD>Returns the sum of the
    elements of <CODE>x</CODE>, which can currently be an array or an
    enumerating expression.  If <CODE>x</CODE> is of any other type, this
    simply returns <CODE>x</CODE>.
    <TR><TD CLASS="lit">sleep[<I>time</I>]<TD>Sleeps for the specified amount
    of time.  The argument <CODE><I>time</I></CODE> must have units of time,
    such as <CODE>1 s</CODE> or <CODE>4.9 minutes</CODE>
     or <CODE>1/30 s</CODE>.
  </TABLE>

  <H2><A NAME="CryptographicFunctions">Cryptographic Functions</A></H2>
  <P>
   The function <CODE>messageDigest[<I>str</I>, <I>algorithm</I>]</CODE> can
   calculate a variety of cryptographic hashes
   of various strings.  The <I>algorithm</I> parameter is a string containing
   one of any hashing algorithms your Java platform supports, which probably
   includes: <CODE>"MD2", "MD5", "SHA-1", "SHA-256", "SHA-384",
    "SHA-512"</CODE>.  The values are returned as a string containing a
   hexadecimal representation of the hash.
  </P>

  <P>
   The following calculates the MD5 hash of the string <CODE>"abc"</CODE>:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">messageDigest["abc", "MD5"]</CODE><BR>
   <CODE CLASS="output">900150983cd24fb0d6963f7d28e17f72</CODE>
  </P>

  <H2><A NAME="AllYourBaseConversions">All Your Base Conversions...</A></H2>
  <P>
   Integer values can be converted to and from other bases (from 2 to 36
   inclusive) in several ways.  The following functions can be used to convert
   to or from other arbitrary bases.
  </P>
  
  <TABLE BORDER=1 SUMMARY="General Base Conversion Functions">
    <TR><TH>Function<TH>Description
    <TR><TD CLASS="lit">base[x, b]<TD>Returns a string representing the
      integer <CODE>x</CODE> in base <CODE>b</CODE>
    <TR><TD CLASS="lit">base2[x] ... base36[x]<TD>Returns a string
      representing the integer <CODE>x</CODE> in the specified base.
    <TR><TD CLASS="lit">parseInt[<I>str</I>]<TD>Parses a string, containing
      digits 0-9 only, to an integer in base 10.  This should contain no
      spaces or other text.
    <TR><TD CLASS="lit">parseInt[<I>str</I>,&nbsp;<I>base</I>]<TD>Parses a
      string, treating it as if it's a number in the specified base.  The
      string should contain no spaces or other text.
  </TABLE>

  <P>
   The following named base conversion functions can also be used.  In the
   cases where several names are commonly used, all options are listed.  All
   functions return strings.
  </P>
  
  <TABLE BORDER=1 SUMMARY="Named Base Conversion Functions">
    <TR><TH>Base<TH>Function Name(s)
    <TR><TD CLASS="lit">2<TD CLASS="lit">binary
    <TR><TD CLASS="lit">3<TD CLASS="lit">ternary, trinary
    <TR><TD CLASS="lit">4<TD CLASS="lit">quaternary
    <TR><TD CLASS="lit">5<TD CLASS="lit">quinary
    <TR><TD CLASS="lit">6<TD CLASS="lit">senary, sexenary
    <TR><TD CLASS="lit">7<TD CLASS="lit">septenary
    <TR><TD CLASS="lit">8<TD CLASS="lit">octal, oct, octonary
    <TR><TD CLASS="lit">9<TD CLASS="lit">nonary
    <TR><TD CLASS="lit">10<TD CLASS="lit">decimal, denary
    <TR><TD CLASS="lit">11<TD CLASS="lit">undenary
    <TR><TD CLASS="lit">12<TD CLASS="lit">duodecimal, duodenary
    <TR><TD CLASS="lit">13<TD CLASS="lit">tridecimal
    <TR><TD CLASS="lit">14<TD CLASS="lit">quattuordecimal
    <TR><TD CLASS="lit">15<TD CLASS="lit">quindecimal
    <TR><TD CLASS="lit">16<TD CLASS="lit">hexadecimal, sexadecimal, hex
    <TR><TD CLASS="lit">17<TD CLASS="lit">septendecimal
    <TR><TD CLASS="lit">18<TD CLASS="lit">octodecimal
    <TR><TD CLASS="lit">19<TD CLASS="lit">nonadecimal
    <TR><TD CLASS="lit">20<TD CLASS="lit">vigesimal
  </TABLE>

  <P>
   The conversions can be performed by calling the named function, or by using
   the conversion operator ( <CODE>-&gt;</CODE> ).  The following are all
   equivalent, and all convert the number specified by the variable
   <CODE CLASS="input">number</CODE> to a string in base 8.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    base[number, 8]<BR>
    base8[number]<BR>
    number -&gt; base8<BR>
    octal[number]<BR>
    number -&gt; octal<BR>
    oct[number]<BR>
    number -&gt; oct<BR>
   </CODE>
  </P>

  <P>
   Use whichever is most convenient for you.  (Note: the function version will
   be slighly faster.)
  </P>

  <P>
   As noted above in the <A HREF="#DataLibraries">Data Libraries</A> section,
   you may <EM>input</EM> numbers in a specified base by following the number
   with two backslashes and the specified base:
  </P>

  <UL>
   <LI><CODE CLASS="input">100001000101111111101101\\2</CODE> (a number in
    base 2)
   <LI><CODE CLASS="input">1000_0100_0101_1111_1110_1101\\2</CODE> (a number in base 2 with
    underscores for readability)
   <LI><CODE CLASS="input">845FED\\16</CODE>  (a number in base 16... bases
    from 2 to 36 are allowed) 
   <LI><CODE CLASS="input">845fed\\16</CODE>  (The same number in base
    16... upper or lowercase are allowed.)
   <LI><CODE CLASS="input">845_fed\\16</CODE>  (a number in base 16 with underscores for readability)
   <LI><CODE CLASS="input">0x845fed</CODE>  (Common hexadecimal notation)
   <LI><CODE CLASS="input">0x845FED</CODE>  (Common hexadecimal notation)
   <LI><CODE CLASS="input">0xFEED_FACE</CODE>  (Hexadecimal with underscores for readability)
   <LI><CODE CLASS="input">0b100001000101111111101101</CODE>  (Common binary notation)
   <LI><CODE CLASS="input">0b1000_0100_0101_1111_1110_1101</CODE> (Binary with underscores for readability)
  </UL>

  <H2><A NAME="Strings">Strings</A></H2>
  <P>
   Text surrounded by double quotes is a string.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">"My hovercraft is full of eels."</CODE><BR>
   <CODE CLASS="output">My hovercraft is full of eels.</CODE>
  </P>

  <P>
   If you need to put a literal double-quote inside a string, precede it with
   a backslash:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"If you believe in the hypothetical \"Z-Axis\""</CODE><BR>
   <CODE CLASS="output">If you believe in the hypothetical "Z-Axis"</CODE>
  </P>

  <P>
   Backslashes have a special meaning within double-quoted and triple-quoted
   strings.  They may precede a special character, as follows:
  </P>

  <TABLE BORDER="1" SUMMARY="Special Backslash Codes">
    <TR>
     <TH>String<TH>Description
    <TR>
     <TD CLASS="lit">\\<TD>Places a <EM>single</EM> backslash into the string.
    <TR>
     <TD CLASS="lit">\t<TD>Places a tab character into the string.
    <TR>
     <TD CLASS="lit">\n<TD>Places a newline character(s) into the string.  The
      exact characters insert follow your platforms's Java-defined settings
      for the newline character, which may be one character or two.
    <TR>
     <TD CLASS="lit">\r<TD>Places a return character into the string.
    <TR>
     <TD CLASS="lit">\"<TD>Places a double-quote character into the string.
    <TR>
     <TD CLASS="lit">\u<I>XXXX</I><TD>Places a Unicode character into the
      string, where <I>XXXX</I> is a 4-digit hex value for the Unicode
      codepoint.  For more information, see the <A
       HREF="#UnicodeInStrings">Unicode in Strings</A> section of the
      documentation. 
  </TABLE>

  <P>
   A single backslash preceding any other character simply inserts the
   following character into the string (and removes the backslash.)
  </P>

  <P>
   Strings can be concatenated using the <CODE>+</CODE> operator.  If either
   side of a <CODE>+</CODE> operator is a string, the values will be
   converted to strings before concatenation.
  </P>

  <H3><A NAME="UnicodeInStrings">Unicode in Strings</A></H3>
  <P>
   For internationalization, Frink allows
   <A HREF="http://www.unicode.org/">Unicode</A> characters anywhere.
   Strings can contain Unicode characters, indicated by <CODE>\u</CODE>
   followed by exactly 4 hexadecimal digits [0-9a-fA-F] indicating the Unicode
   code-point.  This allows Unicode characters to be placed into any ASCII
   text file, and edited by programs that don't understand Unicode.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"The symbol for micro is \u00b5"</CODE><BR>
   <CODE CLASS="output">The symbol for micro is &micro;</CODE>
  </P>

  <H3><A NAME="UnicodeCharacterCodes">Unicode Character Codes</A></H3>
  <P>
   You can convert a character to its Unicode character code by using the
   <CODE>char[<I>x</I>]</CODE> function.
  </P>

  <P>
   If passed an integer, it returns the character with that Unicode character
   code:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">char[00b5\\16]</CODE><CODE CLASS="comment">// Base 16, micro character as above.</CODE><BR>
   <CODE CLASS="output">&micro;</CODE>
  </P>

  <P>
   If passed a single-character string, it returns the Unicode character code:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">char["A"]</CODE><BR>
   <CODE CLASS="output">65</CODE>
  </P>

  <P>
   If passed a multiple-character string, it returns the Unicode character
   code for each character in an array:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">char["Frink"]</CODE><BR>
   <CODE CLASS="output">[70, 114, 105, 110, 107]</CODE>
  </P>

  <P>
   If you always need an array of character codes, use the
   <CODE>chars[<I>x</I>]</CODE> function which turns a string into an array of
   character codes, even when passed a string containing only one character.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">chars["F"]</CODE><BR>
   <CODE CLASS="output">[70]</CODE>
  </P>

  <P>
   If passed an array of integers, the <CODE>char[<I>x</I>]</CODE> function
   returns a string:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">char[ [70, 114, 105, 110, 107] ]</CODE><BR>
   <CODE CLASS="output">Frink</CODE>
  </P>

  <P>
   The <CODE>charList[<I>str</I>]</CODE> returns a list of the characters in a
   string:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">charList["Frink"]</CODE><BR>
   <CODE CLASS="output">[F, r, i, n, k]</CODE>
  </P>

  <H3><A NAME="UpperLowerCase">Upper/Lower Case</A></H3>
  <P>
    The functions <CODE>uppercase[<I>str</I>]</CODE> or
    <CODE>uc[<I>str</I>]</CODE> and <CODE>lowercase[<I>str</I>]</CODE> or
    <CODE>lc[<I>str</I>]</CODE> convert a string to upper- or lowercase.
    These functions use Unicode single- and multiple-character mapping tables
    and thus try to do the right thing with Unicode, possibly making the
    string longer in some cases:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">uc["Imbi&szlig;"]</CODE> <CODE CLASS="comment">// Last char is \u00df</CODE><BR>
   <CODE CLASS="output">IMBISS</CODE>
  </P>

  <P>
   As the <A HREF="http://www.unicode.org/charts/case/">Unicode standard for
   casing</A> states, "it is important to note that no casing operations on
   strings are reversible:"
  </P>

  <P CLASS="code">
   <CODE CLASS="input">lc[ uc["Imbi&szlig;"] ]</CODE><BR>
   <CODE CLASS="output">imbiss</CODE>
  </P>

  <H3><A NAME="Substrings">Substrings</A></H3>
  <P>
   Substrings can be taken with the functions:
  </P>

  <TABLE BORDER="1" SUMMARY="Substring functions">
    <TR>
     <TH>Function<TH>Description
    <TR>
     <TD CLASS="lit">substr[<I>string</I>,&nbsp;<I>startPos</I>,&nbsp;<I>endBefore</I>]<BR>
      substring[<I>string</I>,&nbsp;<I>startPos</I>,&nbsp;<I>endBefore</I>]
     <TD>
      Takes the substring of string <CODE>str</CODE> beginning with
      <CODE>startPos</CODE> and ending <EM>before</EM> the character position
      <CODE>endBefore</CODE>.
      The length of the substring will be <CODE>endBefore-startPos</CODE>.
    <TR>
     <TD CLASS="lit">substrLen[<I>string</I>,&nbsp;<I>startPos</I>,&nbsp;<I>len</I>]<BR>
      substringLen[<I>string</I>,&nbsp;<I>startPos</I>,&nbsp;<I>len</I>]
     <TD>
      Takes the substring of string <CODE>str</CODE> beginning with
      <CODE>startPos</CODE> and containing <CODE>len</CODE> characters.
    <TR>
     <TD CLASS="lit">left[<I>string</I>,&nbsp;<I>len</I>]<BR>
      right[<I>string</I>,&nbsp;<I>len</I>]
     <TD>
      Returns a string containing the leftmost or rightmost characters of the
      given string with the specified length.
    <TR>
     <TD CLASS="lit">indexOf[<I>string</I>,&nbsp;<I>substr</I>]
     <TD>
      Returns the index (zero-based) of the first occurrence of a substring in
      a string.  This returns -1 if the substring is not found in the string.
  </TABLE>

  <H3><A NAME="OtherStringFunctions">Other String Functions</A></H3>
  <P>
   Additional functions for manipulating strings are listed below.
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Other String Functions">
    <TR><TH>Function<TH>Description
    <TR><TD CLASS="lit">trim[<I>str</I>]<TD>Returns a string with whitespace
      trimmed from the left and right ends.
    <TR><TD CLASS="lit">length[<I>str</I>]<TD>Returns the length of a string
      in characters.
    <TR><TD CLASS="lit">parseInt[<I>str</I>]<TD>Parses a string, containing
      digits 0-9 only, to an integer in base 10.  This is much less powerful
      and less forgiving than using <CODE><A
        HREF="#SelfEvaluation">eval[<I>str</I>]</A></CODE>, but faster. 
    <TR><TD CLASS="lit">parseInt[<I>str</I>,&nbsp;<I>base</I>]<TD>Parses a
      string, treating it as if it's a number in the specified base.
    <TR><TD CLASS="lit">reverse[<I>str</I>]<TD>Reverses the characters in a
      string.
    <TR><TD CLASS="lit">editDistance[<I>str1</I>,&nbsp;<I>str2</I>]<TD>Returns
      the <I>edit distance</I> or <I>Levenshtein distance</I> between two
      strings.  This is the minimum number of operations needed to transform
      one string into the other, where an operation is an insertion, deletion,
      or substitution.  It can be used to aid in spell checking, fuzzy
      spelling, plagiarism detection, and determining similarity of two
      strings.  The algorithm used runs in O(n*m) time, where n and m are the
      lengths of each string.  It uses O(m) space when processing.  The
      comparison <EM>is</EM> case-sensitive.  The following are examples of
      edit distances between strings: 
      <TABLE BORDER=1 SUMMARY="Description of edits">
        <TR><TH>String 1<TH>String 2<TH>Edit Distance<TH>Description
        <TR>
         <TD CLASS="lit">Frink
         <TD CLASS="lit">Fr<B>a</B>nk
         <TD>1
         <TD>Substitution
          
        <TR>
         <TD CLASS="lit">Frink
         <TD CLASS="lit">Frink<B>y</B>
         <TD>1
         <TD>Insertion
          
        <TR>
         <TD CLASS="lit">F<B>r</B>ink
         <TD CLASS="lit">Fink
         <TD>1
         <TD>Deletion
          
        <TR>
         <TD CLASS="lit">Frink
         <TD CLASS="lit">
          Fr<B>a</B>nk<B>s</B>
         <TD>2
         <TD>1 Substitution + 1 Insertion
      </TABLE>
  </TABLE>

  <H3><A NAME="MultiLineStrings">Multi-Line Strings</A></H3>
  <P>
   Text surrounded by three sets of double-quotes is a multi-line string (like
   in Python.)  Newlines are allowed and retained in the string. Hopefully,
   this is less burdensome and error-prone than Perl's "here-document" syntax.
   For example:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    lyrics = """Oh, Danny Boy,<BR>
    The pipes, the pipes are calling<BR>
    From glen to glen and down the mountainside"""<BR>
   </CODE>
  </P>

  <H3><A NAME="StringInterpolation">String Interpolation</A></H3>
  <P>
   If a double-quoted string or multi-line string contains a dollar sign
   (<CODE>$</CODE>) followed by a variable name (which must begin with a
   letter), the value of that variable is replaced in the string at evaluation
   time.  This is (probably) faster than string concatenation which could be
   used to get the same effect.  There are certain optimizations to make sure
   that this isn't significantly more inefficient if the string doesn't need
   replacement.  (The string is checked for dollar signs at compile time.)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">first = "Inigo"<BR>
    last = "Montoya"<BR>
    "My name is $first $last."</CODE><BR>
   <CODE CLASS="output">My name is Inigo Montoya.</CODE>
  </P>

  <P>
   If you need to explicitly mark where the variable name begins and ends, you
   can put it in curly braces as below:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">last="Frink"<BR>
    "You can call me the ${last}meister."</CODE><BR>
   <CODE CLASS="output">You can call me the Frinkmeister.</CODE>
  </P>

  <P>
   Since a variable name must begin with a letter, it's fine to put a quantity
   like <CODE>$2.00</CODE> into the string, and no substitution will be
   attempted, and there will be no runtime performance penalty.  To put a
   literal dollar sign into the string immediately preceding an letter
   character, use two dollar signs:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"I want my $$USD 2.00.  Plus tip."</CODE><BR>
   <CODE CLASS="output">I want my $USD 2.00.  Plus tip.</CODE>
  </P>

  <P>
   For best performance, <EM>don't</EM> use double dollar signs like this
   unless they directly precede an letter character.
  </P>

  <P>
   You can always use this technique to coerce a numeric value, or a unit, or
   a date, etc., to a string representation by enclosing it in quotes:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">n = 2^13367-1<BR>
   stringRep = "$n"</CODE>
  </P>

  <P>
   After the above code, the variable <CODE>stringRep</CODE> contains the
   result of the calculation <EM>as a string</EM> which you can use to grab
   certain characters, truncate, etc.
  </P>
  
  <H2><A NAME="TextTranslation">Text Translation</A></H2>

  <P CLASS="warning">
   <B>Obligatory Disclaimer:</B> This feature requires connection to the
   internet.  If you are using Frink on a handheld device, you may incur
   connection charges.  Also, since I cannot guarantee the availability of any
   internet sites, this feature is intended only as a bonus that may not work
   reliably if at all.  You may also require some
   <A HREF="#ProxyConfiguration">proxy configuration</A> if you use an HTTP
   proxy server to access the web.
  </P>
  
  <P>
   Text can be translated into other languages:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"My hovercraft is full of eels." -&gt; German</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="de">Mein Luftkissenfahrzeug ist von den
     Aalen voll.</SPAN></CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"I will not buy this record; it is scratched." -&gt; Spanish</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="es">No comprar&eacute; este expediente;
     se rasgu&ntilde;a.</SPAN></CODE>
  </P>

  <P>
   Nice translation.  All of these are equivalent to calling the same-named
   function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">German["My hovercraft is full of eels."]</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="de">Mein Luftkissenfahrzeug ist von den
     Aalen voll.</SPAN></CODE>
  </P>

  <P>
   Or, to translate <EM>from</EM> another language, use the
   <CODE>From<I>Language</I></CODE> conversion, or the appropriate keyword:
  </P>

  <P CLASS="code">
   <CODE CLASS="input"><SPAN LANG="es">"Yo quiero un burrito."</SPAN> -&gt;
    FromSpanish</CODE><BR>
   or<BR>
   <CODE CLASS="input"><SPAN LANG="es">"Yo quiero un burrito." -&gt;
    Ingles</SPAN></CODE><BR> 
   <CODE CLASS="output">I love a young donkey.</CODE>
  </P>

  <P>
   (Thanks to Brian C. White discovering the above gem of translation, which
   is literally correct.)  So it's not perfect, and it sure helps if your
   operating system is set up to display Unicode characters correctly.  Or,
   you can do round-trips:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"The spirit is willing but the flesh is weak." -&gt;
    Spanish -&gt; <SPAN LANG="es">Ingles</SPAN></CODE><BR>
   <CODE CLASS="output">The alcohol is arranged but the meat is weak.</CODE>
  </P>

  <P>
   You can also define a function to do the same as the above:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">corrupt[x] := x -&gt; Spanish -&gt; <SPAN
     LANG="es">Ingles</SPAN></CODE><BR>
   or<BR>
   <CODE CLASS="input">corrupt[x] := Ingles[Spanish[x]]</CODE><BR>
  </P>

  <P>
   You can also build up more complex strings:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"The German word for \"dog\" is \"" + German["dog"] + ".\""</CODE><BR>
   <CODE CLASS="output">The German word for "dog" is "<SPAN LANG="de">Hund</SPAN>."</CODE>
  </P>

  <P>
   And you can use Frink to not just translate the words, but the words and
   the units:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">"My farm is " + (220000 acres -&gt; "hectares") + ",
    but it's not arable land." -&gt; German</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="de">Mein Bauernhof ist 89031,19741723355
     Hektars, aber es ist nicht urbares Land.</SPAN></CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"Gasoline costs " + (round[1.37 USD/gallon /
    (EUR/liter), 0.01]) + " Euro/liter in the United States." -&gt; German</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="de">Benzin kostet 0,33
     Euro/liter in den Vereinigten Staaten.</SPAN></CODE>
  </P>

  <P>
   Ooh, that's cool.  If I had this when I lived in Germany, I might have
   seemed semi-literate.
  </P>

  <H3><A NAME="TranslationPairs">Translation Pairs</A></H3>
  <P>
   The following table summarizes the language pairs that can be translated
   and their keywords.  The <I>default</I> translations use your operating
   system's language setting, which <EM>should</EM> detect your default
   language and Do The Right Thing most of the time.  When you're translating
   <EM>from</EM> another language, you need to indicate what the foreign
   language is.  Keywords like <CODE>Inglese</CODE> (the Italian word for
   English) imply that you're translating from Italian to English.
  </P>

  <TABLE BORDER=0 CELLSPACING=6 SUMMARY="Language Translation Pairs">
    <TR><TH>From<TH>To<TH>Keywords
    <TR><TD><I>Default</I><TD>English<TD CLASS="lit">English, en
    <TR><TD><I>Default</I><TD>German<TD CLASS="lit">German,
      <SPAN LANG="de">Deutsch</SPAN>, de 
    <TR><TD><I>Default</I><TD>Spanish<TD CLASS="lit">Spanish,
      <SPAN LANG="es">Espanol, Espa&ntilde;ol,</SPAN> es
    <TR><TD><I>Default</I><TD>French<TD CLASS="lit">French,
      <SPAN LANG="fr">Francais, Fran&ccedil;ais</SPAN>, fr
    <TR><TD><I>Default</I><TD>Italian<TD CLASS="lit">Italian,
      <SPAN LANG="it">Italiano</SPAN>, it
    <TR><TD><I>Default</I><TD>Portuguese<TD CLASS="lit">Portuguese, pt
    <TR><TD><I>Default</I><TD>Korean<TD CLASS="lit">Korean, ko
    <TR><TD><I>Default</I><TD>Simplified Chinese
     <TD CLASS="lit">SimplifiedChinese, Chinese, zh
    <TR><TD><I>Default</I><TD>Traditional Chinese
     <TD CLASS="lit">TraditionalChinese, zt
    <TR><TD><I>Default</I><TD>Russian<TD CLASS="lit">Russian, ru
    <TR><TD><I>Default</I><TD>Japanese<TD CLASS="lit">Japanese, jp
    <TR><TD><I>Default</I><TD>Dutch<TD CLASS="lit">Dutch, Nederlands, nl
    <TR><TD><I>Default</I><TD>Swedish<TD CLASS="lit">Swedish, Svenska, sv
    <TR><TD><I>Default</I><TD>Arabic<TD CLASS="lit">Arabic, ar

    <TR><TD>English<TD><I>Default</I><TD CLASS="lit">FromEnglish, from_en
    <TR><TD>German<TD><I>Default</I><TD CLASS="lit">FromGerman, from_de
    <TR><TD>Spanish<TD><I>Default</I><TD CLASS="lit">FromSpanish, from_es
    <TR><TD>French<TD><I>Default</I><TD CLASS="lit">FromFrench, from_fr
    <TR><TD>Italian<TD><I>Default</I><TD CLASS="lit">FromItalian, from_it
    <TR><TD>Portuguese<TD><I>Default</I><TD CLASS="lit">FromPortuguese, from_pt
    <TR><TD>Japanese<TD><I>Default</I><TD CLASS="lit">FromJapanese, from_ja
    <TR><TD>Korean<TD><I>Default</I><TD CLASS="lit">FromKorean, from_ko
    <TR><TD>Russian<TD><I>Default</I><TD CLASS="lit">FromRussian, from_ru
    <TR><TD>Simplified Chinese<TD><I>Default</I><TD CLASS="lit">FromSimplifiedChinese, FromChinese, from_zh
    <TR><TD>Traditional Chinese<TD><I>Default</I>
     <TD CLASS="lit">FromTraditionalChinese, from_zt
    <TR><TD>Dutch<TD><I>Default</I><TD CLASS="lit">FromDutch, from_nl
    <TR><TD>Swedish<TD><I>Default</I><TD CLASS="lit">FromSwedish, from_sv
    <TR><TD>Arabic<TD><I>Default</I><TD CLASS="lit">FromArabic, from_ar

    <TR><TD>English<TD>German<TD CLASS="lit">EnglishToGerman, en_de
    <TR><TD>English<TD>Spanish<TD CLASS="lit">EnglishToSpanish, en_es
    <TR><TD>English<TD>French<TD CLASS="lit">EnglishToFrench, en_fr
    <TR><TD>English<TD>Italian<TD CLASS="lit">EnglishToItalian, en_it
    <TR><TD>English<TD>Portuguese<TD CLASS="lit">EnglishToPortuguese, en_pt
    <TR><TD>English<TD>Korean<TD CLASS="lit">EnglishToKorean, en_ko
    <TR><TD>English<TD>Japanese<TD CLASS="lit">EnglishToJapanese, en_ja
    <TR><TD>English<TD>Russian<TD CLASS="lit">EnglishToRussian, en_ru
    <TR><TD>English<TD>Simplified Chinese
     <TD CLASS="lit">EnglishToSimplifiedChinese, EnglishtToChinese, en_zh
    <TR><TD>English<TD>Traditional Chinese
     <TD CLASS="lit">EnglishToTraditionalChinese, en_zt
    <TR><TD>English<TD>Dutch<TD CLASS="lit">EnglishToDutch, en_nl
    <TR><TD>English<TD>Swedish<TD CLASS="lit">EnglishToSwedish, en_sv
    <TR><TD>English<TD>Arabic<TD CLASS="lit">EnglishToArabic, en_ar

    <TR><TD>German<TD>English<TD CLASS="lit">GermanToEnglish,
      <SPAN LANG="de">Englisch</SPAN>, de_en
    <TR><TD>German<TD>French<TD CLASS="lit">GermanToFrench,
      <SPAN LANG="de">franzoesisch,
       Franzoesisch, franz&ouml;sisch, Franz&ouml;sisch,</SPAN> de_fr
      
    <TR><TD>Spanish<TD>English<TD CLASS="lit">SpanishToEnglish,
      <SPAN LANG="es">Ingl&eacute;s, Ingles,</SPAN> es_en
    <TR><TD>Spanish<TD>French<TD CLASS="lit">SpanishToFrench,
      <SPAN LANG="es">frances, Frances, franc&eacute;s, Franc&eacute;s,</SPAN>
      es_fr
      
    <TR><TD>French<TD>English<TD CLASS="lit">FrenchToEnglish,
      <SPAN LANG="fr">Anglais,</SPAN> fr_en
    <TR><TD>French<TD>German<TD CLASS="lit">FrenchToGerman,
      <SPAN LANG="fr">Allemand, allemand,</SPAN> fr_de
    <TR><TD>French<TD>Spanish<TD CLASS="lit">FrenchToSpanish,
      <SPAN LANG="fr">Espagnol, espagnol,</SPAN> fr_es
    <TR><TD>French<TD>Portuguese<TD CLASS="lit">FrenchToPortuguese,
      <SPAN LANG="fr">Portugais, portugais,</SPAN>  fr_pt
    <TR><TD>French<TD>Italian<TD CLASS="lit">FrenchToItalian,
      <SPAN LANG="fr">Italien, italien,</SPAN> fr_it
      
    <TR><TD>Italian<TD>English<TD CLASS="lit">ItalianToEnglish,
      <SPAN LANG="it">Inglese,</SPAN> it_en
    <TR><TD>Italian<TD>French<TD CLASS="lit">ItalianToFrench,
      <SPAN LANG="it">Francese, francese,</SPAN> it_fr
      
    <TR><TD>Portuguese<TD>English<TD CLASS="lit">PortugueseToEnglish,
      <SPAN LANG="pt">Ingl&ecirc;s,</SPAN> pt_en
    <TR><TD>Portuguese<TD>French<TD CLASS="lit">PortugueseToFrench,
      <SPAN LANG="pt">franc&ecirc;s, Franc&ecirc;s,</SPAN> pt_fr

    <TR><TD>Japanese<TD>English<TD CLASS="lit">JapaneseToEnglish, ja_en
    <TR><TD>Korean<TD>English<TD CLASS="lit">KoreanToEnglish, ko_en
    <TR><TD>Russian<TD>English<TD CLASS="lit">RussianToEnglish, ru_en
    <TR><TD>Simplified Chinese<TD>English
     <TD CLASS="lit">SimplifiedChineseToEnglish, ChineseToEnglish, zh_en
    <TR><TD>Traditional Chinese<TD>English
     <TD CLASS="lit">TraditionalChineseToEnglish, zt_en
    <TR><TD>Dutch<TD>English<TD CLASS="lit">DutchToEnglish,
      <SPAN LANG="nl">Engels</SPAN>, nl_en
    <TR><TD>Swedish<TD>English<TD CLASS="lit">SwedishToEnglish, <SPAN LANG="sv">Engelska, engelska</SPAN>, sv_en
    <TR><TD>Arabic<TD>English<TD CLASS="lit">ArabicToEnglish, ar_en
  </TABLE>

  <H3><A NAME="GoogleTranslations">Google Translations</A></H3>
  <P>
   As of the 2010-07-16 release, many additional translation pairs are
   provided by the Google Translate engine.  Unfortunately, the quality of the
   Google Translate engine's translations is quite poor, and fails to even try
   to translate a large percentage of strings for many languages, so the
   following functions may not be very reliable.  See
   the <A HREF="/fsp/colorize.fsp?fileName=GoogleTranslate.frink">GoogleTranslate.frink</A>
   file for more functions.
  </P>

  <TABLE BORDER=1 CELLSPACING=6 SUMMARY="Google Translation functions">
    <TR><TD CLASS="lit">guessLanguage[<I>str</I>]<TD>Guess the language that a
    given string is in.  This returns a list of the language code, the
    language name, a confidence between 0 and 1, and a boolean flag to
    indicate if the guess should be considered reliable.  <EM>Warning:</EM>
    Note that Google's language codes are <EM>not</EM> necessarily the same as
    ISO 639-1 language codes for some insane reason.

    <TR><TD CLASS="lit">translate[<I>str, fromLang, toLang</I>]<TD>Attempts to
    translate from one language to another.  See
    the <A HREF="/fsp/colorize.fsp?fileName=GoogleTranslate.frink">GoogleTranslate.frink</A>
    for language pair codes.  <EM>Warning:</EM> Note that Google's language
    codes are <EM>not</EM> necessarily the same as ISO 639-1 language codes
    for some insane reason.

    <TR><TD CLASS="lit">translate[<I>str, toLang</I>]<TD>Attempts to
    translate from one language to another, guessing the original language.
      See the <A HREF="/fsp/colorize.fsp?fileName=GoogleTranslate.frink">GoogleTranslate.frink</A>
    for language codes.  <EM>Warning:</EM> Note that Google's language
    codes are <EM>not</EM> necessarily the same as ISO 639-1 language codes
    for some insane reason.

    <TR><TD CLASS="lit">translate[<I>str</I>]<TD>Attempts to guess the
    language of the specified string and translate it to your default
    language.  This attempts to be a semi-magical function that translates any
    language to your language.  Like other attempts at magic, it will fail you
    often and painfully.
  </TABLE>

  <P>
    So, for example, you can guess the language of a certain piece of text:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"<SPAN LANG="hu">&Eacute;n m&aacute;r nem vagyok
     fert&#x151;z&ouml;tt.</SPAN>" -&gt; guessLanguage</CODE><BR>
   <CODE CLASS="output">[hu, Hungarian, 0.42290825, false]</CODE>
  </P>  

  <P>
    Or try to auto-translate it to your default language:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">"<SPAN LANG="hu">&Eacute;n m&aacute;r nem vagyok
     fert&#x151;z&ouml;tt.</SPAN>" -&gt; translate</CODE><BR>
   <CODE CLASS="output">I am no longer infected.</CODE>
  </P>
  
  <P>
    Or translate to another language, (in this case, German,) assuming the
    language guess above was correct:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">translate["<SPAN LANG="hu">&Eacute;n m&aacute;r nem
   vagyok fert&#x151;z&ouml;tt.</SPAN>", "hu", "de"]</CODE><BR>
   <CODE CLASS="output"><SPAN LANG="de">Ich bin nicht mehr
   infiziert.</SPAN></CODE>
  </P>
  
  <P>
   The following functions attempt to translate to and from the specified
   languages.  For the "To:" functions, the original language will be guessed.
   For the "From:" functions, the language will attempt to be translated to
   your default language.  If these language pairs or the guessed language are
   not appropriate, use the <CODE>translate[<I>str,&nbsp;fromLang,&nbsp;toLang</I>]</CODE> function listed above.  
  </P>

  <TABLE BORDER=0 CELLSPACING=6 SUMMARY="Google Language Translation Pairs">
    <TR><TH>To<TH>From
     <TR><TD CLASS="lit">Afrikaans<TD CLASS="lit">FromAfrikaans
     <TR><TD CLASS="lit">Albanian<TD CLASS="lit">FromAlbanian
     <TR><TD CLASS="lit">Amharic<TD CLASS="lit">FromAmharic
     <TR><TD CLASS="lit">Armenian<TD CLASS="lit">FromArmenian
     <TR><TD CLASS="lit">Azerbaijani<TD CLASS="lit">FromAzerbaijani
     <TR><TD CLASS="lit">Basque<TD CLASS="lit">FromBasque
     <TR><TD CLASS="lit">Belarusian<TD CLASS="lit">FromBelarusian
     <TR><TD CLASS="lit">Bengali<TD CLASS="lit">FromBengali
     <TR><TD CLASS="lit">Bihari<TD CLASS="lit">FromBihari
     <TR><TD CLASS="lit">Bulgarian<TD CLASS="lit">FromBulgarian
     <TR><TD CLASS="lit">Burmese<TD CLASS="lit">FromBurmese
     <TR><TD CLASS="lit">Catalan<TD CLASS="lit">FromCatalan
     <TR><TD CLASS="lit">Cherokee<TD CLASS="lit">FromCherokee
     <TR><TD CLASS="lit">Croatian<TD CLASS="lit">FromCroatian
     <TR><TD CLASS="lit">Czech<TD CLASS="lit">FromCzech
     <TR><TD CLASS="lit">Dhivehi<TD CLASS="lit">FromDhivehi
     <TR><TD CLASS="lit">Esperanto<TD CLASS="lit">FromEsperanto
     <TR><TD CLASS="lit">Estonian<TD CLASS="lit">FromEstonian
     <TR><TD CLASS="lit">Filipino<TD CLASS="lit">FromFilipino
     <TR><TD CLASS="lit">Finnish<TD CLASS="lit">FromFinnish
     <TR><TD CLASS="lit">Galician<TD CLASS="lit">FromGalician
     <TR><TD CLASS="lit">Georgian<TD CLASS="lit">FromGeorgian
     <TR><TD CLASS="lit">Guarani<TD CLASS="lit">FromGuarani
     <TR><TD CLASS="lit">Gujarati<TD CLASS="lit">FromGujarati
     <TR><TD CLASS="lit">Hebrew<TD CLASS="lit">FromHebrew
     <TR><TD CLASS="lit">Hindi<TD CLASS="lit">FromHindi
     <TR><TD CLASS="lit">Hungarian<TD CLASS="lit">FromHungarian
     <TR><TD CLASS="lit">Icelandic<TD CLASS="lit">FromIcelandic
     <TR><TD CLASS="lit">Indonesian<TD CLASS="lit">FromIndonesian
     <TR><TD CLASS="lit">Inuktitut<TD CLASS="lit">FromInuktitut
     <TR><TD CLASS="lit">Irish<TD CLASS="lit">FromIrish
     <TR><TD CLASS="lit">Italian<TD CLASS="lit">FromItalian
     <TR><TD CLASS="lit">Japanese<TD CLASS="lit">FromJapanese
     <TR><TD CLASS="lit">Kannada<TD CLASS="lit">FromKannada
     <TR><TD CLASS="lit">Kazakh<TD CLASS="lit">FromKazakh
     <TR><TD CLASS="lit">Khmer<TD CLASS="lit">FromKhmer
     <TR><TD CLASS="lit">Korean<TD CLASS="lit">FromKorean
     <TR><TD CLASS="lit">Kurdish<TD CLASS="lit">FromKurdish
     <TR><TD CLASS="lit">Kyrgyz<TD CLASS="lit">FromKyrgyz
     <TR><TD CLASS="lit">Laothian<TD CLASS="lit">FromLaothian
     <TR><TD CLASS="lit">Latvian<TD CLASS="lit">FromLatvian
     <TR><TD CLASS="lit">Lithuanian<TD CLASS="lit">FromLithuanian
     <TR><TD CLASS="lit">Macedonian<TD CLASS="lit">FromMacedonian
     <TR><TD CLASS="lit">Malay<TD CLASS="lit">FromMalay
     <TR><TD CLASS="lit">Malayalam<TD CLASS="lit">FromMalayalam
     <TR><TD CLASS="lit">Maltese<TD CLASS="lit">FromMaltese
     <TR><TD CLASS="lit">Marathi<TD CLASS="lit">FromMarathi
     <TR><TD CLASS="lit">Mongolian<TD CLASS="lit">FromMongolian
     <TR><TD CLASS="lit">Nepali<TD CLASS="lit">FromNepali
     <TR><TD CLASS="lit">Norwegian<TD CLASS="lit">FromNorwegian
     <TR><TD CLASS="lit">Oriya<TD CLASS="lit">FromOriya
     <TR><TD CLASS="lit">Pashto<TD CLASS="lit">FromPashto
     <TR><TD CLASS="lit">Persian<TD CLASS="lit">FromPersian
     <TR><TD CLASS="lit">Polish<TD CLASS="lit">FromPolish
     <TR><TD CLASS="lit">Punjabi<TD CLASS="lit">FromPunjabi
     <TR><TD CLASS="lit">Romanian<TD CLASS="lit">FromRomanian
     <TR><TD CLASS="lit">Sanskrit<TD CLASS="lit">FromSanskrit
     <TR><TD CLASS="lit">Serbian<TD CLASS="lit">FromSerbian
     <TR><TD CLASS="lit">Sindhi<TD CLASS="lit">FromSindhi
     <TR><TD CLASS="lit">Sinhalese<TD CLASS="lit">FromSinhalese
     <TR><TD CLASS="lit">Slovak<TD CLASS="lit">FromSlovak
     <TR><TD CLASS="lit">Slovenian<TD CLASS="lit">FromSlovenian
     <TR><TD CLASS="lit">Swahili<TD CLASS="lit">FromSwahili
     <TR><TD CLASS="lit">Tajik<TD CLASS="lit">FromTajik
     <TR><TD CLASS="lit">Tamil<TD CLASS="lit">FromTamil
     <TR><TD CLASS="lit">Tagalog<TD CLASS="lit">FromTagalog
     <TR><TD CLASS="lit">Telugu<TD CLASS="lit">FromTelugu
     <TR><TD CLASS="lit">Thai<TD CLASS="lit">FromThai
     <TR><TD CLASS="lit">Tibetan<TD CLASS="lit">FromTibetan
     <TR><TD CLASS="lit">Turkish<TD CLASS="lit">FromTurkish
     <TR><TD CLASS="lit">Ukrainian<TD CLASS="lit">FromUkrainian
     <TR><TD CLASS="lit">Urdu<TD CLASS="lit">FromUrdu
     <TR><TD CLASS="lit">Uzbek<TD CLASS="lit">FromUzbek
     <TR><TD CLASS="lit">Uighur<TD CLASS="lit">FromUighur
     <TR><TD CLASS="lit">Vietnamese<TD CLASS="lit">FromVietnamese
     <TR><TD CLASS="lit">Welsh<TD CLASS="lit">FromWelsh
     <TR><TD CLASS="lit">Yiddish<TD CLASS="lit">FromYiddish
  </TABLE>
  
  <H3><A NAME="TranslatorProgram">Translator Program</A></H3>
  <P>
   Here's a small program that can be used to make a mini-translator for a
   specific language.  It allows you to enter phrases to be translated without
   entering the quotes and other bits.  It will continue to translate phrases
   until you click the "OK" button without entering a phrase:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">while phrase=input["Enter phrase in Portuguese: "]<BR>
    &nbsp;&nbsp;&nbsp;println[phrase -&gt; FromPortuguese]</CODE>
  </P>

  <H2><A NAME="DateTimeHandling">Date/Time Handling</A></H2>
  <P>
   Frink has the ability to define specific points in time and add time
   intervals to them, to convert between timezones, or to subtract dates from
   each other.  Date literals are surrounded by pound signs (<CODE>#</CODE>)
   and can be entered in a wide variety of formats, but I prefer a format like:
  </P>

  <P CLASS="code">
   <CODE CLASS="input"># yyyy-MM-dd HH:mm:ss #</CODE>
  </P>

  <P>
   Note that I've chosen to have most-significant digits first, as is only
   logical (the world will realize this someday.) You can have whitespace
   preceding or following the # signs for readability.  All of the predefined
   formats are defined in
   <A HREF="/frinkdata/dateformats.txt"><CODE>/data/dateformats.txt</CODE></A>.
   Check that file first to see the formats that are already defined.  If the
   format you want is not there, see below for ways to define your own
   formats.
  </P>

  <P>
   You can also parse a string into a date using the
   <CODE>parseDate[<I>string</I>]</CODE> function.  This returns the string
   parsed into a date/time datatype, or returns <CODE>undef</CODE> if the
   string cannot be parsed as a date using any of the defined date formats.
  </P>

  <H3><A NAME="SpecifyingTimezones">Specifying Timezones</A></H3>
  <P>
   All date/time formats also allow a timezone specifier at the end.  This
   timezone specifier can be a 3-letter code like "UTC" or "MST", but you can
   also use the name of a country or U.S. state (if the country or state has a
   single time zone) or a selected city (of course, not all cities are
   available.)  This means that you don't have to know when daylight savings
   time starts and ends.  The following are all valid inputs:
  </P>

  <P CLASS="code">
   <CODE CLASS="input"># 2002-01-03 10:00 AM New York #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM Colorado #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM Eastern #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM America/New_York #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM France #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM Paris #</CODE><BR>
   <CODE CLASS="input"># 2002-01-03 10:00 AM Europe/Paris #</CODE>
  </P>

  <P>
   This is similar to calling the <CODE>parseDate</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">parseDate["2002-01-03 10:00 AM Europe/Paris"]</CODE>
  </P>

  <H3><A NAME="ListingTimezones">Listing Timezones</A></H3>
  <P>
   The function <CODE>timezones[]</CODE> will return an enumeration of all
   known time zone names.
  </P>

  <P>
   Please note that your Java implementation may not
   have all of the timezones named in these examples.  Notably, Java 1.1
   distributions tended to use only a small number of three-letter timezones,
   like <CODE>JST</CODE>.
  </P>

  <P>
   The function <CODE>timezone[]</CODE> with no arguments will return the name
   of the default timezone.
  </P>

  <H3><A NAME="SettingDefaultTimezone">Setting Default Timezone</A></H3>
  <P>
   By default, Frink displays and parses all dates using the timezone
   specified by your operating system, unless the date string being parsed
   contains an explicit timezone (see <A HREF="#SpecifyingTimezones">
   "Specifying Timezones"</A> section above,) or if the output format contains 
   an explicit timezone name (see <A HREF="#TimezoneConversions">"Timezone
   Conversions"</A> section.)
  </P>

  <P>
   You can change the default timezone (used for parsing <EM>and</EM> output)
   by calling the function:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">setDefaultTimezone[<I>tzstring</I>]</CODE>
  </P>

  <P>
   where <CODE><I>tzstring</I></CODE> is the name of a timezone that Frink
   recognizes.  If the timezone name is not recognized, an error will be
   displayed and the default timezone will be unchanged.  For example, if you
   want all times to be parsed and displayed as if they were in Universal
   Coordinated Time (unless an explicit timezone identifier is given,) you can
   call:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">setDefaultTimezone["UTC"]</CODE>
  </P>

  <H3><A NAME="SloppyTimeSpecifications">Sloppy Time Specifications</A></H3>
  <P>
   If you don't specify an exact date, the date will be treated roughly as
   "today."  This is useful for getting a quick-and-dirty timezone conversion,
   but if you want to get the day right, you should specify the date as above.
  </P>

  <P CLASS="code">
   Conversion to local timezone, assuming today:<BR>
   <CODE CLASS="input"># 6:00 PM Bosnia #</CODE><BR>
   <CODE CLASS="output">AD 2002-01-06 10:00:00.000 AM (Sun) Mountain Standard
    Time</CODE>
  </P>

  <P CLASS="code">
   Conversion of local time to another timezone:<BR>
   <CODE CLASS="input"># 6:00 PM # -&gt; Japan</CODE><BR>
   <CODE CLASS="output">AD 2002-01-07 10:00:00.000 AM (Mon) Japan Standard
    Time</CODE>
  </P>
   
  <P CLASS="code">
   Conversion between arbitrary timezones:<BR>
   <CODE CLASS="input"># 6:00 PM Bosnia # -&gt; "New York"</CODE><BR>
   <CODE CLASS="output">AD 2002-01-06 12:00:00.000 PM (Sun) Eastern Standard
    Time</CODE>
  </P>

  <P>
   Note that running the above simplified conversions at different times of
   the year will give you different results because of differences in the
   Daylight Savings Time rules for each country.
  </P>
  
  <P>
   Also, please note that your Java implementation may not
   have all of the timezones named in these examples.  Notably, Java 1.1
   distributions tended to use only a small number of three-letter timezones,
   like <CODE>JST</CODE>.  Use the <A
    HREF="#ListingTimezones"><CODE>timezones[]</CODE></A> function to list the
   timezones defined on your system.
  </P>
  
  <H3><A NAME="CurrentTime">Current Time</A></H3>
  <P>
   The function <CODE CLASS="input">now[]</CODE> will return the current
   date/time.
  </P>
  
  <P>
   In an interactive session, you can use the string <CODE
   CLASS="input">##</CODE> as shorthand for "now."  This should evaluate to
   the time at which the value was <EM>parsed</EM>, which is why it won't
   usually do what you intend in a program... the value would be the time the
   program was originally run and parsed.
  </P>

  <P>
   Time is only as accurate as your computer's clock
   setting.  (I use <A HREF="http://www.atomtime.com/">AtomTime</A> on Windows
   machines to keep the clock synchronized to the atomic clock.)
  </P>


  <H3><A NAME="TimezoneConversions">Timezone Conversions</A></H3>
  <P>
   By default, times are displayed in the local timezone and using your locale
   information (but are internally stored correctly in Julian Day relative to
   Universal Time.)  You can also convert to another time format by specifying
   it after the arrow operator.  "JD" for Julian Day, "JDE" for Julian Day
   (Ephemeris) referenced to Dynamical Time, "MJD" for Modified
   Julian Day are supported, as well as finding the times in selected
   timezones, cities and countries:
  </P>

  <P>Example: <I>Sky &amp; Telescope</I> predicted 
   that the peak of this year's Perseid meteor shower might be around August
   12, 2001 at 0400 UTC:
  </P>

  <P CLASS="code">Converting to local time (the default behavior:)<BR>
   <CODE CLASS="input"># 2001-08-12 04:00 UTC #</CODE><BR>
   <CODE CLASS="output">AD 2001-08-11 10:00:00.000 PM (Sat) Mountain Daylight Time</CODE>
  </P>

  <P CLASS="code">Converting to another time zone:<BR>
   <CODE CLASS="input"># 2001-08-12 04:00 UTC # -&gt; Japan</CODE><BR>
   <CODE CLASS="output">AD 2001-08-12 01:00:00.000 PM (Sun) Japan Standard Time</CODE>
  </P>

  <P CLASS="code">
   Current time in Germany:<BR>
   <CODE CLASS="input">now[] -&gt; Germany</CODE><BR>
   <CODE CLASS="output">AD 2001-12-28 07:20:01.508 AM (Fri) Central European Time</CODE><BR>
  </P>

  <P CLASS="code">
   Current Julian Day:<BR>
   <CODE CLASS="input">now[] -&gt; JD</CODE><BR>
   <CODE CLASS="output">JD 2452824.5679731136</CODE><BR>
  </P>

  <P CLASS="code">
   Current Julian Day Ephemeris:<BR>
   <CODE CLASS="input">now[] -&gt; JDE</CODE><BR>
   <CODE CLASS="output">JD 2452824.578919213</CODE><BR>
  </P>

  <P CLASS="code">
   Convert Julian Day Ephemeris to a date:<BR>
   <CODE CLASS="input">JDE[2451545.0]</CODE><BR>
   <CODE CLASS="output">AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time</CODE>
  </P>

  <P>
   Actually, since 2003-06-12, Frink uses full precision (usually rational
   numbers) when storing dates, so the Julian day may come out as a rational
   number like:
  </P>

  <P CLASS="code">
   <CODE CLASS="output">JD 211924042672877/86400000 (approx. 2452824.5679731136)</CODE>
  </P>

  <P>
   If you don't desire this much precision, you can use the
   <CODE>JD[<I>date</I>]</CODE> or <CODE>MJD[<I>date</I>]</CODE> function and
   divide by <CODE>1.0 days</CODE> to get the Julian date as a
   floating-point number, not a string or a rational number:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">JD[now[]] / (1.0 days)</CODE><BR>
   <CODE CLASS="output">2452824.5679731136</CODE>
  </P>

  <H3><A NAME="DateTimeArithmetic">Date/Time Arithmetic</A></H3>
  <P>
   You can subtract one date from another, or add/subtract a time interval to
   a date.  So, if I wanted to find out when I was 1 billion seconds old, I
   add it to my birthdate:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#1969-08-19 16:54 Mountain# + 1 billion seconds</CODE><BR>
   <CODE CLASS="output">AD 2001-04-27 06:40:40.000 PM (Fri) Mountain Daylight Time</CODE>
  </P>

  <P>
   That was pretty recently.  You not only forgot my birthday but you forgot
   my 1-billion-second-anniversary.  Bastard.  I have a 
   <A HREF="http://www.amazon.com/exec/obidos/wishlist/1HBWTNB5L6H3J/ref=wl_em_to?add-fav=1">wish list</A> at Amazon.com if you still want to buy me something.
  </P>

  <P>
   <B>Note:</B> You may notice that adding units of months or years (or
   commonyear, etc.)  may not give you the results you expect--that is because
   months and years are <EM>not</EM> fixed-size units, and even having a unit
   called "month" or "year" is inherently ill-advised.  Perhaps later there
   will be "increment/decrement" of these individual fields on Date objects,
   but it's better to make sure that you understand these are <EM>also</EM>
   inherently troublesome and often meaningless operations.  (<I>e.g.</I> what
   does it mean to increment the month on a date representing Jan. 31?)  Use
   fixed-size units if you can.
  </P>

  <P>
   You can subtract one date from another, and receive an answer as a Unit
   with dimensions of time (that you can convert to any scale you
   want... you're used to this by now.)  For example, if you want to know how
   many days until Christmas:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#2002-12-25# - now[] -&gt; days</CODE><BR>
   <CODE CLASS="output">105.70975056709</CODE>
  </P>

  <P>
   (Try inverting the above calculation to see exactly when I wrote this!)
  </P>

  <H3><A NAME="NotesOnDates">Notes on Dates</A></H3>
  <P CLASS="warning">
   <B>Note:</B>  The following notes apply to Frink release 2008-08-02 and
   later.  Previous releases may have handled the transistion between Julian
   and Gregorian dates and large BC years inconsistently.
  </P>

  <UL>
   <LI>Frink models the switch between the Julian and Gregorian calendars.
    This switch occurs between October 4, 1582 (Julian) which
    was followed immediately by October 15, 1582 (Gregorian).

   <LI>Dates prior to this switch date are parsed and displayed as their dates
    in the Julian calendar.

   <LI>Frink follows Julian leap year rules before the switch date (all years
    divisible by 4 are leap years) and Gregorian leap year rules after the
    switch (if a year is divisible by 100, it is only a leap year if it is
    also divisible by 400.  Otherwise, all other years divisible by 4 are leap
    years.)

   <LI>Parsing a date between the switch dates will result in undefined
    behavior.

   <LI>Julian date <CODE># AD 0001-01-01 #</CODE> (Julian) was preceded
    immediately by <CODE># BC 0001-12-31 #</CODE> (Julian).  There is no year
    0, and negative years are intentionally disallowed when parsing, as they
    are often treated inconsistently.
  </UL>

  <H2><A NAME="DefiningNewDateTimeFormats">Defining New Date/Time Formats</A></H2>
  <P>
   If you want to enter date/time values in a specific format, you can enter
   new date formats on the fly.  Date formats are enclosed between sets of 3
   pound signs: <CODE>###<I>pattern</I>###</CODE>.  After defining a new
   pattern, dates between pound signs should be recognized.  For readability,
   you may have leading or trailing space in your formats or dates.  For
   example:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">### yyyy-MM-dd ###</CODE><BR>
   <CODE CLASS="input">#2001-09-10#</CODE><BR>
   <CODE CLASS="output">Sep 10, 2001 12:00:00 AM</CODE>
  </P>

  <P>
   You can also define the default <EM>output</EM> format with 4 pound signs.
   Without a definition in the <A
   HREF="/frinkdata/dateformats.txt">dateformats.txt</A> file, you get the
   Java default (which should theoretically get it from your system's
   settings, or mine if you're using the web interface,) but for lots of info,
   try something like:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#### G yyyy-MM-dd hh:mm:ss.SSS a (E) zzzz ####</CODE>
  </P>

  <P>
   Date format expressions can be assigned to variables and/or used on the
   right-hand side of a conversion operator ( <CODE>-&gt;</CODE> ).  To output
   a date in a specified format, use something like:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">fmt = ### HH:mm ###<BR>
    now[] -&gt; fmt</CODE><BR>
   <CODE CLASS="output">23:55</CODE>
  </P>

  <P>
   If you want to format a date with both a specific format and a timezone,
   make the right-hand-side of the conversion operator into a 2-argument
   bracketed list with the first argument indicating the date format and the
   second a <EM>string</EM> indicating the timezone name:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">fmt = ### yyyy-MM-dd hh:mm a (E) zzzz ###<BR>
    # 2003-06-12 02:25 PM Mountain # -&gt; [fmt, "Japan"]</CODE><BR>
   <CODE CLASS="output">2003-06-13 05:25 AM (Fri) Japan Standard Time</CODE>
  </P>

  <P>
   In these patterns, all ASCII letters are reserved as pattern letters,
   which are defined as the following:
  </P>

  <TABLE BORDER=1 SUMMARY="Date format patterns">
    <TR>
     <TH>Symbol<TH>Meaning               <TH>Presentation      <TH>Example
    <TR><TD CLASS="lit">G<TD>era designator    <TD>Text              <TD>AD
    <TR><TD CLASS="lit">y<TD>year              <TD>Number            <TD>1996
    <TR><TD CLASS="lit">M<TD>month in year     <TD>Text &amp; Number     <TD>July &amp; 07
    <TR><TD CLASS="lit">d<TD>day in month      <TD>Number            <TD>10
    <TR><TD CLASS="lit">h<TD>hour in am/pm (1-12)  <TD>Number            <TD>12
    <TR><TD CLASS="lit">H<TD>hour in day (0-23)<TD>Number            <TD>0
    <TR><TD CLASS="lit">m<TD>minute in hour    <TD>Number            <TD>30
    <TR><TD CLASS="lit">s<TD>second in minute  <TD>Number            <TD>55
    <TR><TD CLASS="lit">S<TD>millisecond       <TD>Number            <TD>978
    <TR><TD CLASS="lit">E<TD>day in week       <TD>Text             <TD>Tuesday
    <TR><TD CLASS="lit">D<TD>day in year       <TD>Number            <TD>189
    <TR><TD CLASS="lit">F<TD>day of week in month <TD>Number         <TD>2 (2nd Wed in July)
    <TR><TD CLASS="lit">w<TD>week in year      <TD>Number            <TD>27
    <TR><TD CLASS="lit">W<TD>week in month     <TD>Number            <TD>2
    <TR><TD CLASS="lit">a<TD>am/pm marker      <TD>Text              <TD>PM
    <TR><TD CLASS="lit">k<TD>hour in day (1-24)<TD>Number            <TD>24
    <TR><TD CLASS="lit">K<TD>hour in am/pm (0-11)<TD>Number          <TD>0
    <TR><TD CLASS="lit">'<TD>escape for text   <TD>Delimiter
    <TR><TD CLASS="lit">''<TD>single quote     <TD>Literal           <TD>'

      <TR><TH COLSPAN="4">For use in output specifications only:
    <TR><TD CLASS="lit">z<TD>General timezone  <TD>String   <TD>Pacific Standard Time, PST, GMT-08:00
    <TR><TD CLASS="lit">Z<TD>RFC 822 timezone  <TD>String           <TD>-0800
</TABLE>

  <P>
   The count of pattern letters determine the format.
  </P>

  <P>
   <B>(Text)</B>: 4 or more pattern letters--use full form,
   &lt; 4--use short or abbreviated form if one exists.
  </P>

  <P>
   <B>(Number)</B>: the minimum number of digits. Shorter
   numbers are zero-padded to this amount. Year is handled specially;
   that is, if the count of 'y' is 2, the Year will be truncated to 2 digits.
  </P>

  <P>
   <B>(Text &amp; Number)</B>: 3 or over, use text, otherwise use number.
  </P>

  <P>
   <B>(Timezone)</B>: If there are 3 or more "z" characters in a row, use the
   full name of the timezone, otherwise use the (usually 3-character)
   abbreviation.  Timezone specifiers are not necessary and should not be used
   when specifying an input format string.  Timezones will always be allowed
   at the end of any date literal.
  </P>

  <P>
   See the documentation for <A HREF="/ape/jdk1.3.1/docs/api/java/text/SimpleDateFormat.html">java.text.SimpleDateFormat</A> for more information.
  </P>

  <H3><A NAME="OtherDateFormats">Other Date Formats</A></H3>
  <P>
   Internally, all dates are represented as the Julian Day (which is
   essentially just a numeric value indicating the number of days and
   fractions of days since Julian Day 0, which began at noon UTC on January 1,
   4713 B.C. as reckoned on the Julian Calendar.)  Yes, <EM>noon</EM> is the
   beginning of the day in the Julian Day system.  So noon UTC on September 10,
   2001 is JD 2452163.0.
  </P>

  <P>
   Julian Day (JD) and Modified Julian Day (MJD) can also be parsed.  MJD is
   defined as Julian Day - 2400000.5.  Note that <EM>midnight</EM> is the start
   of a <EM>Modified</EM> Julian Day.  Many astronomical calculations use
   Julian Day (Ephemeris) which is Julian Day with reference to <A
    HREF="#DynamicalTime">Dynamical Time</A>, not Universal Coordinated Time.
   This can be parsed using the prefix <CODE>JDE</CODE>:
  </P>

  <P CLASS="code">
   <CODE CLASS="input"># JD 2452163.0 #</CODE><BR>
   <CODE CLASS="input"># JDE 2452163.0 #</CODE><BR>
   <CODE CLASS="input"># MJD 52162.5 #</CODE>
  </P>

  <P>
   You can also use the JDE function to convert a number to the corresponding
   Julian Day Ephemeris value:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">JDE[2451545.0]</CODE><BR>
   <CODE CLASS="output">AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time</CODE>
  </P>


  <P>
   <B>Note:</B> Do not confuse the Julian Day, (which is a single continuous
   numbering system often used by astronomers, who like the day number to
   change at noon when they're not working,) with a date in the Julian
   Calendar, which is almost identical to the Gregorian Calendar we use today,
   except without the centuries-divisible-by-400 leap-year rules.  (The
   differences are deeper, but that's the big one.)
  </P>

  <H3><A NAME="DynamicalTime">Dynamical Time</A></H3>
  <P>
   The offset &Delta;T between UTC and Dynamical Time (that is, the time that
   must be <EM>added</EM> to UTC to get Dynamical Time) can be obtained by the
   function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">deltaT[<I>date</I>]</CODE>
  </P>

  <P>
   You usually won't use this directly, but instead parse dates in Dynamical
   Time by appending the <CODE>TD</CODE> or <CODE>Dynamical Time</CODE>
   timezone specifiers when parsing a date.  The <CODE><A
   HREF="#OtherDateFormats">JDE</A></CODE> (Julian Date Ephemeris) format is
   also referenced to Dynamical Time.  For example, the time represented by
   the Dynamical Time at the year 2000 epoch is:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">epoch = # 2000-01-01 00:00 TD #</CODE>
  </P>

  <P>
   Internally, all times are represented as the Julian Day referenced to UTC,
   but are automatically converted to Dynamical Time if you specify Dynamical
   Time as the timezone on the right-hand-side of the conversion operator:
  </P>

  <P CLASS="code">
   <CODE CLASS="input"># 2003-10-10 11:26 PM Mountain # -&gt; TD</CODE><BR>
   <CODE CLASS="output">AD 2003-10-11 05:27:04.184 AM (Sat) GMT+00:01</CODE>
  </P>

  <H3><A NAME="InternationalAtomicTime">International Atomic Time (TAI)</A></H3>
  <P>
   International Atomic Time (TAI) is a system of time based on the "proper
   time" on earth's geoid.  While dates and times in Frink are internally
   represented as a Julian day referenced to UTC, you can convert between UTC
   and TAI for any given date using the function
   <CODE>TAIMinusUTC[<I>date</I>]</CODE> which returns the value TAI-UTC.
   This is the cumulative number of leap seconds that have been introduced
   into the calendar.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">TAIMinusUTC[# 2008-12-01 00:00 UTC#]</CODE><BR>
   <CODE CLASS="output">33 s (time)</CODE>
  </P>

  <P>
   This facility allows you to adjust for leap seconds, as TAI does not use
   leap seconds, but UTC does.  By default, Frink's date/time math does
   <EM>not</EM> correct for leap seconds, but using the above function can
   help correct for leap seconds.  For example, to find the exact time between
   two dates nominally a year apart:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    d1 = # 2008-12-01 00:00 UTC #<BR>
    d2 = # 2009-12-01 00:00 UTC #<BR>
    diff = d2 - d1 + (TAIMinusUTC[d2] - TAIMinusUTC[d1])<BR>
    diff -> ["days", "s"]<BR>
   </CODE>
   <CODE CLASS="output">365 days, 1 s</CODE>
  </P>

  <P>
   Note that the duration is slightly longer due to the leap second being
   introduced at the end of 2008.
  </P>

  <P>
   Modern leap seconds were first introduced on
   1972 January 1, where the value of TAI-UTC became exactly 10 seconds, and
   leap seconds have been introduced at irregular intervals since then.  Leap
   seconds may be added just before January 1 or July 1 of each year.
  </P>

  <P>
   It should be noted that from 1961 January 1 to 1972 January 1, instead of
   introducing discrete leap seconds, you had to do linear interpolation to
   convert between TAI and UTC.  <I>Be warned that Frink follows this
   interpolation process between these dates, and the value of UTC-TAI will
   not be an integer during this period!</I> Before 1961 Jan 1, this function
   returns 0 seconds.  For dates after the last known leap second is
   introduced, this function will return the value of TAI-UTC for the last
   leap second (<I>e.g.</I> 34 seconds after 2009 Jan 1.)
  </P>

  <P>
   For more information on the interpolation, see <A
    HREF="http://maia.usno.navy.mil/ser7/tai-utc.dat">the US Naval
    Observatory's tabulation of leap seconds.</A>  This is the file that Frink
   uses to perform these conversions.
  </P>

  <H3><A NAME="OtherTimeSystems">Other Time Systems</A></H3>
  <P>Additional conversions between time systems can be performed using the
   following relations:
  </P>

  <UL>
   <LI><B>Terrestrial Time/Dynamical Time:</B> TT = TAI + 32.184 seconds
    <I>(Terrestrial Time is a more modern name for Dynamical Time.  See
     <A HREF="#DynamicalTime">Dynamical Time</A> section above.)</I>
    
   <LI><B>DeltaT:</B> DeltaT = 32.184 s + (TAI-UTC) - (UT1-UTC)  <I>(See
     <A HREF="#DynamicalTime">Dynamical Time</A> section above.  Also note you
     can find the value of (TAI-UTC) using the <CODE>TAIMinusUTC[date]</CODE>
     function discussed in the <A HREF="#InternationalAtomicTime">International
     Atomic Time</A> section above.)</I>

   <LI><B>GPS Time:</B> GPS = TAI - 19 s
  </UL>
   
  <H2><A NAME="RegularExpressions">Regular Expressions</A></H2>
  <P>
   Regular expressions allow you to match complex patterns in strings.  Frink
   matches most all of the regular expressions matched by Perl.  I'm not
   listing the full syntax of all possible regular expressions which are a
   language to themselves (that's the
   subject of an <A HREF="http://www.oreilly.com/catalog/regex2/">entire
    book</A> but you can get an idea from
   <A HREF="/ape/perl/html/lib/Pod/perlre.html">the Perl documentation here.</A>
   The matching syntax is similar to Perl or Ruby, with the exception that the
   pattern is denoted by <CODE>%r/<I>pattern</I>/<I>options</I></CODE> as
   below:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
   line = "New Zealand"<BR>
   if ( line =~ %r/Alan/i ) // Case-insensitive match<BR>
   &nbsp;&nbsp;&nbsp;println["Matched"]<BR>
   </CODE>
  </P>

  <P>
   In the form listed above, no variable interpolation is done in the string.
   If you need to build up a variable regular expression from a string, use
   the <CODE>regex[<I>string</I>]</CODE> or <CODE>regex[<I>string</I>,
    <I>options</I>]</CODE> functions.  The sample below is identical to the
   sample above:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    line = "New Zealand"<BR>
    re = regex["Alan", "i"]<BR>
    if (line =~ re)<BR>
    &nbsp;&nbsp;&nbsp;println["Matched"]<BR>
   </CODE>
  </P>

  <P>
   Any part of the pattern surrounded by parentheses are saved off and
   returned as an <EM>array</EM> (even if only one item is returned.)  There
   aren't shortcut <CODE>$1</CODE>... variables like in Perl, and probably
   never will be, as it's too easy to break code without knowing it.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
   line = "My name is Inigo Montoya."<BR><BR>
   results = line =~ %r/my name is (\w+) (\w+)/i<BR>
   if (results)<BR>
   {<BR>
   &nbsp;&nbsp;&nbsp;println["First name is: " + results@0]<BR>
   &nbsp;&nbsp;&nbsp;println["Last  name is: " + results@1]<BR>
   }
   </CODE>
  </P>

  <P>
   Alternately, you can assign to the elements of a list.  The variable named
   by the parameter at the corresponding point in the left-hand list is set as
   a variable.  Thus, the above example could be better rewritten as:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
   line = "My name is Inigo Montoya."<BR><BR>
   if [first, last] = line =~ %r/my name is (\w+) (\w+)/i<BR>
   {<BR>
   &nbsp;&nbsp;&nbsp;println["First name is: $first"]<BR>
   &nbsp;&nbsp;&nbsp;println["Last  name is: $last"]<BR>
   }
   </CODE>
  </P>

  <H3><A NAME="IteratingMatches">Iterating Matches</A></H3>
  <P>
   Repeating regular expression matches (those with the <CODE>/g</CODE>
   modifier) can be used in an enumerating context (<I>e.g.</I> in a
   <CODE>for</CODE> loop,) in which case each pass through the loop will
   return a match.  The following returns:
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">
   for [email] read["http://futureboy.us/"] =~ %r/(\w+@(\w|\.)+\.\w+)/g<BR>
   &nbsp;&nbsp;&nbsp;println[email]<BR>
   </CODE>

   <CODE CLASS="output">
    eliasen@mindspring.com<BR>
    eliasen@mindspring.com
   </CODE>
  </P>

  <P>
   (The above URL contains the e-mail address twice.)  Note that pattern
   matches always return a <EM>list</EM> of values, (even if only one item is
   returned,) so to get only the first match, the variable <CODE>email</CODE>
   must be placed in square brackets.
  </P>

  <P>
   If used in a non-enumerating context (such as simple assignment,) the match
   will return a list-of-lists:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    list = read["http://futureboy.us/"] =~ %r/(\w+@(\w|\.)+\.\w+)/g<BR>
    println[list]<BR>
   </CODE>
   <CODE CLASS="output">
    [[eliasen@mindspring.com], [eliasen@mindspring.com]]
   </CODE>
  </P>

  <P>
   This list can be flattened with the <CODE>flatten[<I>list</I>]</CODE>
   function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    println[flatten[list]]<BR>
   </CODE>
   <CODE CLASS="output">
    [eliasen@mindspring.com, eliasen@mindspring.com]
   </CODE>
  </P>

  <H2><A NAME="SearchAndReplace">Search and Replace</A></H2>
  <P>
   A Perl-like search-and-replace operator also exists.  The syntax is:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">line =~
    %s/<I>pattern</I>/<I>replacement</I>/<I>opts</I></CODE>
  </P>

  <P>
   If the expression on the left-hand-side of <CODE>=~</CODE> is a simple
   variable name, it will modify it in-place.   The following fixes a spelling
   mistake:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    line =~ %s/Frank/Frink/g
   </CODE>
  </P>

  <P>
   In the form listed above, no variable interpolation is done in the
   <I>from</I> string.  If you need to build up a variable replacement
   expression from a string, use the <CODE>subst[<I>fromStr</I>,
   <I>toStr</I>]</CODE> or <CODE>subst[<I>fromStr</I>, <I>toStr</I>,
    <I>options</I>]</CODE> 
   functions.  Note that these <EM>do not</EM> actually perform the
   substitution, but create an object that can be used later to perform the
   substitution.  The sample below is identical to the sample above:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    fromStr = "Frank"<BR>
    rep = subst[fromStr, "Frink", "g"]<BR>
    line =~ rep<BR>
   </CODE>
  </P>

  <P>
   You can even use the Perl 5 behavior of replacing parenthesized parts of an
   expression.  The first parenthesized pattern on the left-hand side can be
   denoted by <CODE>$1</CODE> in the replacement, the second by
   <CODE>$2</CODE> and so on.  For example, to change a file with names like
   "Frink, John" to "John Frink":
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    line =~ %s/(\w+), (\w+)/$2 $1/
   </CODE>
  </P>

  <P>
   You can't use <CODE>$1</CODE> and <CODE>$2</CODE> outside of the pattern
   match, like you can in Perl, though.  Another difference from Perl is that
   the return value of a search-and-replace is the replaced string, and not
   the number of times replaced.  This may change.
  </P>

  <H3><A NAME="SubstitutionWithExpressions">Substitution with Expressions</A></H3>
  <P>
   If the <CODE>/e</CODE> modifier exists on a search-and-replace
   operation, the right-hand-side of the substitution is treated as an
   expression.  The values on the left-hand side in parentheses are put into
   the variables <CODE>$1</CODE> , <CODE>$2</CODE> , etc.
  </P>

  <P>
   The following sample increments every integer it finds in the line.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    "There are 3 lights.  My ship is the NCC-1701-D." =~ %s/(\d+)/eval[$1]+1/eg
   </CODE><BR>
   <CODE CLASS="output">
    There are 4 lights.  My ship is the NCC-1702-D.
   </CODE>
  </P>

  <H2><A NAME="JoiningAndSplittingArrays">Joining and Splitting Arrays</A></H2>
  <P>
   A string can be split into an array using the <CODE>split[<I>regex</I>,
   <I>str</I>]</CODE> function which splits the string into parts.  The first
   argument to the <CODE>split[<I>pat</I>,&nbsp;<I>str</I>]</CODE> function
   can be either a regular expression or a string containing the delimiter.
   Conversely, the elements of an array can be joined into a string with a
   fixed delimiter, using <CODE>join[<I>separator</I>, <I>array</I>]</CODE>
  </P>

  <P>
   Splitting a string into an array, splitting on whitespace (the pattern
   <CODE>\s+</CODE> matches 1 or more whitespace characters:)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = split[ %r/\s+/, "1 2 3 4 5"]</CODE><BR>
   <CODE CLASS="output">[1, 2, 3, 4, 5]</CODE><BR>
  </P>

  <P>
   Or, to split a tab-delimited line into elements:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">array = split["\t", line]</CODE><BR>
   which is the same as<BR>
   <CODE CLASS="input">array = split[%r/\t/, line]</CODE><BR>
  </P>
  
  <P>
   And the reverse, joining multiple array elements into one string:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">join[":", array]</CODE><BR>
   <CODE CLASS="output">1:2:3:4:5</CODE>
  </P>

  <H2><A NAME="InputAndOutput">Input and Output</A></H2>

  <H3><A NAME="ReadingLines">Reading Lines</A></H3>
  <P>
   Frink has a useful file/URL input function called
   <CODE>lines[<I>URL</I>]</CODE> which reads lines one at a time from the
   specified URL.  The URL can be an HTTP, file, or FTP URL.  It is best used
   with the <A HREF="#ForLoop"><CODE>for</CODE></A> loop.  For example, to
   fetch and display the contents of a web page:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
   for line = lines["http://futureboy.us/"]<BR>
   &nbsp;&nbsp;&nbsp;println[line] 
   </CODE>
  </P>

  <P>
   By default, the <CODE>lines[<I>URL</I>]</CODE> function returns an
   enumerating expression which returns each line as requested, and forgets
   about previous lines.  If you want to store each line in an array for later
   use, use the <CODE>array[]</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = array[ lines["file:data/units.txt"] ]<BR>
    println["The data file contains " + length[a] + " lines."]
   </CODE>
  </P>

  <H3><A NAME="ReadingEntireFiles">Reading Entire Files</A></H3>
  <P>
   If you're carefree and have lots of memory, you can load the entire
   contents of a URL (again, file, HTTP, or FTP URL) into a single big honkin'
   string using the <CODE>read[<I>URL</I>]</CODE> function:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    bigstring = read["http://futureboy.us/"]
   </CODE>
  </P>

  <P>
   Needless to say, this may use up large amounts of memory, so only use it if
   you need to.  Or want to.  Do what you like.  Run with scissors.
  </P>

  <H3><A NAME="SpecifyingAlternateEncodings">Specifying Alternate Encodings</A></H3>
  <P>
   The <CODE CLASS="input">lines[<I>URL</I>] and read[<I>URL</I>]</CODE>
   functions will attempt to set the character encoding correctly based on the
   <CODE>Content-Type</CODE> HTTP header.  If you are not requesting an HTTP
   URL, or the encoding is not properly specified, or not set in the HTTP
   headers, these functions will use your system's default character encoding.
   If the default charset is not appropriate for a file or URL, you can
   explicitly specify the character encoding of the file using the
   two-argument versions of the above functions:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">lines[<I>URL</I>,&nbsp;<I>encoding</I>]<BR>
    read[<I>URL</I>,&nbsp;<I>encoding</I>]</CODE>
  </P>

  <P>
   The encoding is a string representing any character encoding that your
   version of Java supports, <I>e.g.</I> <CODE>"UTF-8"</CODE>,
   <CODE>"US-ASCII"</CODE>, <CODE>"ISO-8859-1"</CODE>, <CODE>"UTF-16"</CODE>,
   <CODE>"UTF-16BE"</CODE>, <CODE>"UTF-16LE"</CODE>.  Your release of Java may
   support more charsets, but all implementations of Java are required to
   support the above.  Check the release notes for your Java implementation to
   see if other charsets are supported.
  </P>

  <H3><A NAME="EmailHarvesting">E-mail Harvesting</A></H3>
  <P>
   The following sample uses <A HREF="#RegularExpressions">regular
    expression</A> matching to harvest things that look like e-mail addresses
   from any URL.  The combination of the <CODE>for</CODE> loop and the
   <CODE>/g</CODE> modifier allows multiple matches to be found in a single
   line.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    url = input["Enter a URL: "]<BR><BR>

    for line = lines[url]<BR>
    &nbsp;&nbsp;&nbsp;for [result] line =~ %r/(\w+@(\w|\.)+\.\w+)/g<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println[result]<BR>
   </CODE>
  </P>

  <P>
   Pretty easy, eh?  Now you see why you get so much spam e-mail.  It's easy
   to grab e-mail addresses from files or Web pages.  Using this capability,
   Frink can be made to grab any kind of data from other web pages easily.
  </P>

  <P>
   Note that pattern matches always return a <EM>list</EM> of values, (even if
   only one item is returned,) so to get only the first match, the variable
   <CODE>result</CODE> must be placed in square brackets.
  </P>

  <H3><A NAME="StrippingHTML">Stripping HTML</A></H3>
  <P>
   The following (ridiculously simple) function fetches the contents of any
   URL and (somewhat na&iuml;vely) strips out the HTML markup.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    stripHTML[url] := read[url] =~ %s/&lt;[^&gt;]*>//gs
   </CODE>
  </P>


  <H3><A NAME="URLManipulation">URL Manipulation</A></H3>
  <P>
   Frink provides a few functions which are useful for manipulating URLs and
   producing web-spiders:
  </P>

  <P>
   <CODE CLASS="input">url[base, relative]</CODE> returns a new string URL
   made up of the given base and relative parts of a URL.  This is useful in
   resolving relative URLs in an HTML document:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">url["http://futureboy.us/frinkdocs/index.html",&nbsp;"whatsnew.html"]</CODE><BR>
   <CODE CLASS="output">http://futureboy.us/frinkdocs/whatsnew.html</CODE>
  </P>
  
  <P>
   <CODE CLASS="input">urlHost[url]</CODE> returns a string indicating the
   hostname of a specifed URL string (e.g. <CODE>futureboy.us</CODE>,
   an empty string if no host is specified.
  </P>

  <P>
   <CODE CLASS="input">URLEncode[<I>string, encoding</I>]</CODE> encodes a
   string for use as part of a URL.  The encoding should probably
   be the string <CODE>"UTF8"</CODE> for most applications.
  </P>
  
  <P>
   <CODE CLASS="input">urlProtocol[url]</CODE> returns a string indicating the
   protocol (e.g., <CODE>http</CODE> of a given URL string.)
  </P>

  <P>
   The following program resolves all of the relative URLs in an HTML
   document and prints their values.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    url = input["Enter a URL: "]<BR>
    println[join["\n", findURLs[url]]]<BR>
    <BR>
    findURLs[u]&nbsp;:= <BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;results&nbsp;=&nbsp;[]<BR>
    &nbsp;&nbsp;&nbsp;for&nbsp;[rel]&nbsp;read[u]&nbsp;=~&nbsp;%r/&lt;\s*A\s+[^&gt;]*HREF\s*=\s*"([^&nbsp;"]+)"/gsi<BR>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results.push[url[u,&nbsp;rel]]<BR>
    <BR>
    &nbsp;&nbsp;&nbsp;return&nbsp;results<BR>
    }
   </CODE>
  </P>
  
  <H2><A NAME="AnonymousFunctions">Anonymous Functions</A></H2>
  <P>
   In Frink, you can define blocks of executable code which can be assigned to
   variables, passed to and from functions, and executed as functions.  These
   work just like functions with no name.  In fact, that's exactly what they
   are.  The syntax is:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">{  |<I>arglist</I>| <I>body</I> }</CODE>
  </P>

  <P>
   The arguments in <CODE>arglist</CODE> are a (possibly empty)
   comma-separated list of variable names which are treated just like the
   formal parameters to a function.  The body is one or more statements or
   expressions to be executed.
  </P>

  <P>
   How is this useful?  Well, for example the <CODE>select[<I>list</I>,
   <I>proc</I>]</CODE> function allows you to select the items from a list for
   which <CODE>proc</CODE> returns <CODE>true</CODE>.  For example, to return
   the even items from a list:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    array = [0,1,2,3,4,5]<BR>
    select[ array, { |x|  x mod 2 == 0 } ]<BR>
   </CODE>
   <CODE CLASS="output">[0,2,4]</CODE>
  </P>

  <P>
   This successively assigns each element of <CODE>array</CODE> to a new
   local variable <CODE>x</CODE>, and returns the list of values for which
   <CODE>x mod 2</CODE> equals zero.
  </P>

  <P>
   <B>Note:</B> The second argument to <CODE>select[<I>list</I>,
   <I>regex</I>]</CODE> can also be a regular expression.  This expects the
   list to contain all strings and returns all of the strings that match the
   regular expression.
  </P>

  <P>
   An anonymous function can be called as a function.  The current syntax looks
   just like a function call:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    isEven = { |x|  x mod 2 == 0 }<BR>
    isEven[4]<BR>
   </CODE>
   <CODE CLASS="output">true</CODE>
  </P>

  <H2><A NAME="Sorting">Sorting</A></H2>
  <P>
   <CODE>sort[<I>list</I>]</CODE>will sort lists in which the elements have
   the same type.  When sorting units, the units should be conformal (that is,
   all should have the same dimensions.)  It is important to note that the
   list will be sorted in-place, that is, the original list will be modified!
   To get around this, the array should first be copied with the <A
    HREF="#ArrayMethods"><CODE><I>array</I>.shallowCopy[]</CODE> method.</A>
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    a = [5,2,3,1,4]<BR>
    sort[a]<BR>
   </CODE>
   <CODE CLASS="output">
    [1,2,3,4,5]
   </CODE>
  </P>

  <P>
   The two-argument version <CODE>sort[<I>list</I>, <I>proc</I>]</CODE> allows
   you to specify a user-defined comparison routine. The second argument is a
   anonymous function which contains a user-defined comparison routine.  The
   comparison routine must take 2 arguments (say <CODE>|a,b|</CODE>) and
   return -1 if a is less than b, 0 if a==b, and 1 if a is greater than b.
   The following samples are equivalent:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = [5,2,3,1,4]<BR>
    cmp = { |a,b|  a &lt;=&gt; b }<BR>
    sort[a, cmp]<BR>
   </CODE>
   <CODE CLASS="output">
    [1,2,3,4,5]
   </CODE>
  </P>

  <P>
   The default sort is much faster than if you define a user-defined
   comparison function (about 30 times faster in my tests!)  Now I see why
   Perl has so many anomalous and special-cased optimizations around
   user-defined sorting.
  </P>

  <P>
   If you want the elements in reverse order, you can reverse the sorted list
   by calling the <CODE>reverse[<I>list</I>]</CODE> function on the sorted
   list.
  </P>

  <P>
   To sort all of the units with dimensions of time (or by extension, any
   dimension list) by their magnitude, you can use the following.  (Keep in
   mind that the <CODE>units</CODE> function returns the <EM>names</EM> of the
   units as strings.  The function <CODE>unit[<I>string</I>]</CODE> returns
   the unit with the specified name.:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    sort[units[time], { |a,b| unit[a] &lt;=&gt; unit[b] }]
   </CODE>
  </P>
  
  <H2><A NAME="IncludingOtherFiles">Including Other Files</A></H2>
  <P>
   For ease of maintenance, you can separate your program code into multiple
   files and include them in other files.  This is accomplished by the
   <CODE>use</CODE> statement.  This includes the contents of the named file
   at compile-time, at the point where the <CODE>use</CODE> statement is
   encountered.  For example, to include a file called
   <CODE>sun.frink</CODE> in the current directory:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    use sun.frink
   </CODE>
  </P>

  <P>
   The <CODE>use</CODE> statement searches for the named files in the
   following places:
  </P>

  <OL>
   <LI>Relative to the root of the current classpath or jar file.
    
   <LI>If the statement specifies a fully-qualified URL, the URL is loaded.
    This includes <CODE>file:</CODE>, <CODE>ftp:</CODE>, and
    <CODE>http:</CODE> URLs.
    
   <LI>Relative to the current file or URL being parsed.
    
   <LI>Relative to the current working directory.
    
   <LI>Relative to all paths specified using the <A
     HREF="#CommandLineOptions"><CODE>-I <I>path</I></CODE> command-line
     option.</A>

   <LI>From the internal "standard library" shipped within the jar file's
    <CODE>/stdlib</CODE> directory.  This location may change.
  </OL>

  <P>
   The <CODE>use</CODE> statement has protection against including a file
   multiple times.
  </P>

  <P>
   <B>Tip:</B> If you're including a file that's <EM>not</EM> relative to any
   of the above, you'll need to specify it using an <EM>absolute</EM>
   <CODE>file:</CODE> URL, such as:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">use file:///c:/prog/frink/samples/sun.frink</CODE><BR>
   or<BR>
   <CODE CLASS="input">use file:///prog/frink/samples/sun.frink</CODE>   
  </P>

  <P>
   This is necessary because a file or relative URL can legitimately contain
   colons on some operating systems.  For example, on a UNIX-like system, you
   could have a subdirectory called <CODE>c:</CODE> and that would be just
   fine.  Frink doesn't try to duplicate all the quirks of all operating
   systems and their wacky filename rules.
  </P>
  
  <H2><A NAME="ObjectOrientedProgramming">Object-Oriented Programming</A></H2>
  <P>
   Frink allows you to write your programs in object-oriented fashion,
   allowing complex data structures that are still easy to use.  It's not
   fully completed yet, (inheritance isn't implemented,) but works fine for
   programs that don't require inheritance.
  </P>

  <P>
   Classes are defined using the <CODE>class</CODE> keyword and a syntax that
   won't particularly surprise anyone who has worked with Java, C++, Ruby,
   Python, or other object-oriented languages.
  </P>

  <P>
   The format of a class and how to use it is demonstrated in the 
   <A HREF="/fsp/colorize.fsp?fileName=classtest.frink">classtest.frink</A>
   file.
  </P>

  <P>
   Interfaces are defined using the <CODE>interface</CODE> keyword, and is
   similar to Java's implementation.
  </P>

  <P>
   The format of an interface and how to use it is demonstrated in the 
   <A
    HREF="/fsp/colorize.fsp?fileName=interfacetest.frink">interfacetest.frink</A> file.
  </P>

  <P>
   Methods on an object can be listed using the
   <CODE>methods[<I>obj</I>]</CODE> function.  If <CODE>obj</CODE> is an
   instance of an object, this lists the instance-level <EM>and</EM>
   class-level methods of that object.  If called with a classname (that gives
   you the "Metaclass Object" for that class,) it displays just the
   class-level methods.
  </P>

  <H2><A NAME="Graphics">Graphics</A></H2>
  <P>
   Frink has a powerful system for drawing graphics in a simple way.  Here are
   some of the features:
  </P>

  <UL>
   <LI><B>Flexible coordinate system:</B> You can draw your graphics to any
    coordinates you wish, and Frink will, by default, automatically scale and
    center them in your display device, eliminating the tedium and error of
    manual coordinate conversions, adjustment for different window or printer
    sizes, etc.

   <LI><B>Dimensioned drawings:</B>  Graphics can be specified with explicit
    lengths (such as "3 cm",) so exactly-sized drawings can be printed.
    (Well, as accurately as your printer's driver allows them to be!)

   <LI><B>Infinitely scalable:</B> Frink's graphics are primarily designed to
    work with shapes, not individual pixels, so they can be re-scaled perfectly
    to display with full resolution on printers, in resizable graphics
    windows, in image files, or in rescalable vector formats.
    
   <LI><B>High-quality shapes:</B>  Polygons and polylines are drawn with
    properly-joined, angled corners.

   <LI><B>Anti-Aliasing:</B> Lines and shapes are anti-aliased, eliminating
    jagged edges.  (When running under Java 1.2 or later.  Frink's graphics
    will also run on Java 1.1, but without antialiased edges.)

   <LI><B>Transparency (alpha channel):</B> Allows transparent shapes and
    lines, and see-through shapes to be drawn on top of other shapes.
    Anti-aliased edges are drawn with proper transparency so they can be
    overlaid on any background color or image.  (Requires Java 1.2 or later for
    transparency.)

   <LI><B>High-quality text:</B>  Text can be written into any graphics
    object, with properly transparent anti-aliased edges.  Text may be scaled
    along with the image, or rendered at a constant size.

   <LI><B>Easy writing to files:</B> Graphics can be easily written to various
    file formats, including JPEG, PNG, and Scalable Vector Graphics (SVG)
    formats.  PNG supports transparency (alpha channel) and allows antialiased,
    semi-transparent lines and shapes to be overlaid over other backgrounds or
    layers.  SVG format allows infinite rescaling and perfect rendering to
    high-resolution devices such as printers, and perfect import into other
    vector graphics programs.

   <LI><B>Easy display on different devices:</B> The same graphics object
    can be created and then displayed on screen, printed to a printer, or
    written to a file, using a single command.
  </UL>

  <H3><A NAME="IntroductionToGraphics">Introduction to Graphics</A></H3>
  <P>
   Graphics are drawn and displayed in three steps:
  </P>

  <OL>
   <LI>Create an object of type <CODE>graphics</CODE>:
    <P CLASS="code">
     <CODE CLASS="input">g = new graphics</CODE>
    </P>
    
   <LI>Draw your shapes into the <CODE>graphics</CODE> object:
    <P CLASS="code">
     <CODE CLASS="input">
      g.line[1,100,100,1]<BR>
      g.line[1,1,100,100]
     </CODE>
    </P>

   <LI>Show (or print, or write your image to a file):
    <P CLASS="code">
     <CODE CLASS="input">
      g.show[]
     </CODE>
    </P>

    <P>
     <IMG SRC="images/graphicsintro.png" WIDTH=400 HEIGHT=300
      ALT="Graphics Introduction">
    </P>
  </OL>

  <P>
   That's it.  Frink takes care of the scaling and centering by default.  The
   coordinates that you choose can be whatever is most convenient and natural
   for you.  You can also create as many <CODE>graphics</CODE> objects as you
   want.  By default, when you call <CODE><I>graphics</I>.show[]</CODE>, each
   graphics object is displayed in its own resizable window. 
  </P>

  <H3><A NAME="Coordinates">Coordinates</A></H3>
  <P>
   Coordinates in Frink's graphics are very flexible.  There are a few things
   to note:
  </P>

  <UL>
   <LI>Coordinates are specified as (x, y) with <CODE>x</CODE> being the
    horizontal coordinate and <CODE>y</CODE> the vertical coordinate.

   <LI>Horizontal coordinates increase as you move right.

   <LI>Vertical coordinates increase as you move down.  (Note that this is the
    common convention for almost all computer graphics, but is different than
    the usual mathematical conventions.  There may be a way to flip this
    in the future.  Until then, just negate vertical coordinates to flip
    them.)

   <LI><B>Arbitrary-sized coordinates:</B>  Coordinates can be as big or small
    as you want.  Any real number that Frink can represent is fine.

   <LI><B>Automatic centering and scaling:</B> You don't need to worry about
    the size or location of your rendering window.  By default, all graphics
    are resized and centered to fit into your graphics device (whether it's a
    resizable window, a printed page, or a graphic file.)  This saves lots of
    time and effort when drawing most graphics.

   <LI><B>Aspect ratio:</B> Aspect ratio is preserved by default.  That is, if
    a rectangle is 2 units wide and 1 unit high, it will retain that shape on
    resizing.  (There is currently no way to turn this off; if you want
    different scaling, just multiply one axis by the desired factor.)

   <LI><B>Accurately-scaled drawings</B>: Coordinates may have dimensions of
    length (e.g. "1 inch"), in which case they are treated specially.  In this
    case, the graphics are still translated to fit into your view window, but
    Frink will also attempt to render them at the specified size.  This is
    highly dependent on how your operating system reports its resolution.  It
    works very well for printers, but not as well for monitors (especially in
    Windows, which almost always reports its screen resolution as 96 dpi, no
    matter what it really is.)  This allows you to print exact-sized drawings
    to the accuracy allowed by your operating system and printer drivers.  See
    the notes below about dimensions.

   <LI><B>Dimensions with units:</B> Including the special case for length,
    all coordinates can have any units of measure, <EM>as long as all
     coordinates along the same axis have the same dimensions</EM>.  However,
    both axes do <EM>not</EM> have to have the same dimensions as each other,
    and will be scaled to fit in the window (because preserving aspect ratio is
    meaningless if they don't have the same units.)
  </UL>

  <P>
   For example, the following short program prints graph paper with a 1 mm
   grating:
  </P>

  <P CLASS="code">
   <CODE>
g= new graphics<BR>
g.color[.7,.9,.7] <CODE CLASS="comment">//light greenish-gray</CODE><BR>
<BR>
for x=0 mm to 8.5 in step 1 mm<BR>
&nbsp;&nbsp;&nbsp;g.line[x, 0 in, x, 11 in]<BR>
<BR>
for y=0mm to 11 in step 1 mm<BR>
&nbsp;&nbsp;&nbsp;g.line[0 in, y, 8.5 in, y]<BR>
<BR>
g.print[]
   </CODE>
  </P>
  
  <H3><A NAME="ShapesAndColors">Shapes and Colors</A></H3>
  <P>
   All of Frink's graphics are built out of a small number of basic shapes.
   These are drawn into a <CODE>graphics</CODE> object using the methods
   outlined below.  For example, you use them like the following:
  </P>

  <P CLASS="code">
   <CODE>
    g = new graphics<BR>
    g.color[0,0,0]  <CODE CLASS="comment">// black</CODE><BR>
    g.fillEllipseCenter[0,0,10,10]<BR>
    g.color[1,1,0]  <CODE CLASS="comment">// yellow</CODE><BR>
    g.fillEllipseCenter[0,0,9,9]<BR>
    g.show[]
   </CODE>
  </P>

  <P>
   <IMG SRC="images/circle.png" WIDTH=300 HEIGHT=200 ALT="Sample Circle">
  </P>

  <P>
   A new <CODE>color</CODE> object can also be obtained by calling <CODE>new
   color[<I>r, g, b, alpha</I>]</CODE> or <CODE>new color[<I>r, g,
   b</I>]</CODE>.  Note that <EM>creating the color this way does not set the
   color in any graphics object.</EM>  That must be done separately with a
   call to <CODE><I>graphics</I>.color[<I>c</I>]</CODE>.
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Graphics Shape and Color Methods">
    <TR><TH>Method<TH>Description
    <TR><TD CLASS="lit">color[<I>r, g, b</I>]<TD>Sets the current
      drawing color.  All following drawings will be made using this color.
      The color is specified with its red, green, and blue
      components which are floating-point values which must range from 0.0 to
      1.0, with 0.0 being completely dark for that component, and 1.0 being
      the brightest value for that component.  In a new graphics object, the
      default drawing color is black.  This also returns the color object so
      you can later re-use it in a <CODE>color[<I>c</I>]</CODE> method call.

    <TR><TD CLASS="lit">color[<I>r, g, b, alpha</I>]<TD>Also specifies a
      color, but with transparency.  The <CODE>alpha</CODE> component
      specifies the opacity of the color, and takes values from 0.0 to 1.0,
      with 1.0 being fully opaque and 0.0 being fully transparent.  (Note:
      transparency requires Java 1.2 or later.)  This also returns the color
      object so you can later re-use it in a <CODE>color[<I>c</I>]</CODE>
        method call.

    <TR><TD CLASS="lit">color[<I>colorObject</I>]<TD>Sets the current color to
      a color object that has been previously obtained from a call to
      <CODE>color[<I>r, g, b, alpha</I>]</CODE>, <CODE>color[<I>r, g,
      b</I>]</CODE>, or a call to the constructor <CODE>new color[<I>r, g, b,
      alpha</I>]</CODE> or <CODE>new color[<I>r, g, b</I>]</CODE>.
      
    <TR><TD CLASS="lit">backgroundColor[<I>r, g, b</I>]<TD>Sets the
      background color of the graphics window or image file.  The color
      components are specified as above.  There should be only one
      <CODE>backgroundColor</CODE> method call in a <CODE>graphics</CODE>
      object, and it should be the first method called when drawing.  If more
      than one call to <CODE>backgroundColor</CODE> is made, this will raise a
      warning.  (It will also replace any existing background color, but that
      behavior should not be relied on.)  By default, the background color is
      opaque white (or transparent when writing formats like SVG.)

    <TR><TD CLASS="lit">stroke[<I>width</I>]<TD>Sets the stroke width used to
      draw lines, polygon outlines, ellipses, and polylines.  If the width is a
      dimensionless number, (e.g. <CODE CLASS="input">10</CODE>) the stroke
      will be scaled along with the drawing.  If the stroke has units of
      length, (e.g. <CODE CLASS="input">2 mm</CODE>) the lines will be
      rendered at that constant width regardless of how the image is scaled.
      (Note that the stroke width can not be changed in Java 1.1.)
      
    <TR><TD CLASS="lit">line[<I>x1, y1, x2, y2</I>]<TD>Draws a straight line
      segment between the points (x1, y1) and (x2, y2) using the current color.
      
    <TR><TD CLASS="lit">fillRectSize[<I>x, y, width, height</I>]<P>drawRectSize[<I>x, y, width, height</I>]<TD>Draws
    a rectangle (filled or outlined, depending on the method called) with top
      left coordinate (x,y) and the specified width and height.  If the width
      or height are negative, this draws the rectangle to the left or to the
      top of that point.
      
    <TR><TD
    CLASS="lit">fillRectSides[<I>x1, y1, x2, y2</I>]<P>drawRectSides[<I>x1, y1, x2, y2</I>]<TD>Draws a
    rectangle (filled or outlined, depending on the method called) defined by
      its four sides.  The sides do not have to be in any particular order.

    <TR><TD CLASS="lit">fillRectCenter[<I>cx, cy, width,
    height</I>]<P>drawRectCenter[<I>cx, cy, width, height</I>]<TD>Draws a
    rectangle (filled or outlined, depending on the method called) defined by
    its centerpoint (cx, cy) and its width and height.
      
    <TR><TD
    CLASS="lit">fillEllipseSize[<I>x, y, width, height</I>]<P>drawEllipseSize[<I>x, y, width, height</I>]<TD>Draws
      a filled or unfilled ellipse (or circle if width==height) with top left
      coordinate (x,y) and the specified width and height.  If the width or
      height are negative, this draws the ellipse to the left or to the top of
      that point.
      
    <TR><TD
    CLASS="lit">fillEllipseSides[<I>x1, y1, x2, y2</I>]<P>drawEllipseSides[<I>x1, y1, x2, y2</I>]<TD>Draws
    a filled or unfilled ellipse (or circle if width==height) defined by its
    four sides.  The sides do not have to be in any particular order.

    <TR><TD
    CLASS="lit">fillEllipseCenter[<I>cx, cy, width, height</I>]<P>drawEllipseCenter[<I>cx, cy, width, height</I>]<TD>Draws
    a filled or unfilled ellipse or circle defined by its centerpoint (cx, cy)
    and its width and height.
  </TABLE>

  <H3><A NAME="AdvancedShapes">Advanced Shapes</A></H3>
  <H4><A NAME="PolygonsAndPolylines">Polygons and Polylines</A></H4>
  <P>
   Drawing a curve or a polygon out of <CODE>line</CODE> primitives might not
   give good results, as the lines don't know that they're supposed to be
   connected to each other.  To solve this problem, Frink has 
   <CODE>polyline</CODE>, <CODE>polygon</CODE> and <CODE>filledPolygon</CODE>
   objects which produce high-quality, connected lines with properly-joined
   corners.  Drawing a polygon or polyline to a graphics object consists of a
   few steps:
  </P>

  <OL>
   <LI>Create the graphics object (if you haven't done so already.)
    <P CLASS="code">
     <CODE CLASS="input">g = new graphics</CODE>
    </P>

   <LI>Create a polygon, filled polygon, <EM>or</EM> polyline.  (The sample
    below shows all three.  Pick one.)
    <P CLASS="code">
     <CODE CLASS="input">p = new polygon</CODE><BR>
     <I>or</I><BR>
     <CODE CLASS="input">p = new filledPolygon</CODE><BR>
     <I>or</I><BR>
     <CODE CLASS="input">p = new polyline</CODE>
    </P>

   <LI>Add an arbitrary number of points to the line or polygon using its
    <CODE>addPoint</CODE> method.  Each point represents a vertex in the
    polyline or polygon.
    <P CLASS="code">
     <CODE CLASS="input">
      p.addPoint[<I>x,y</I>]<BR>
      p.addPoint[<I>x,y</I>]<BR>
      p.addPoint[<I>x,y</I>]
     </CODE>
    </P>

    <P>
     Note that a <CODE>polygon</CODE> or <CODE>filledPolygon</CODE> is
     <EM>automatically closed</EM>.  You should <EM>not</EM> manually connect
     the last point back to the first by repeating it at the end of the list.
     You should only have as many <CODE>addPoint</CODE> calls as there are
     vertices in your polygon.
    </P>

   <LI>Add the polygon to the graphics object.  A polygon can be added to
    multiple graphics objects.  The drawing color and stroke width used in
    rendering the GeneralPath are the ones which are active at the time of the
    <CODE>.add</CODE> call.  <EM>Note that no points should be added to the
     polygon after it is added to the graphics object!</EM>
    <P CLASS="code">
     <CODE CLASS="input">g.add[p]</CODE>
    </P>
    
   <LI>Show the graphics object (or print, or save it to a file, or keep
    drawing into it and show it later...)
    <P CLASS="code">
     <CODE CLASS="input">g.show[]</CODE>
    </P>
  </OL>

  <H4><A NAME="GeneralPath">GeneralPath</A></H4>
  <P>
   A <CODE>GeneralPath</CODE> allows you to create complex shapes consisting
   of straight lines and quadratic and cubic B&eacute;zier curves.  These
   paths can be filled or outlines, and can have multiple sub-paths that
   represent the "inside" and "outside" of an object.  For example, rendering
   a filled letter <CODE>P</CODE> in which one can see through the "hole"
   in the P can be obtained with a GeneralPath, and is not possible with a
   <CODE>polygon</CODE>.
  </P>

  <P><EM>Note:</EM> The GeneralPath functionality is only available under
   Java 1.2 and later.  Attempting to draw with a GeneralPath in earlier
   releases will produce a warning and the GeneralPath will not be drawn.
  </P>
     
  <P>
   Using a <CODE>GeneralPath</CODE> object consists of a few steps:
  </P>

  <OL>
   <LI>Create the graphics object (if you haven't done so already.)
    <P CLASS="code">
     <CODE CLASS="input">g = new graphics</CODE>
    </P>

   <LI>Create a GeneralPath or a filledGeneralPath.  (The sample below shows
    both.  Pick one.)
    <P CLASS="code">
     <CODE CLASS="input">p = new GeneralPath</CODE><BR>
     <I>or</I><BR>
     <CODE CLASS="input">p = new filledGeneralPath</CODE>
    </P>
  
   <LI>Add an arbitrary number of segments using the following methods on the
    <CODE>GeneralPath</CODE> class:
    <TABLE BORDER=1 CELLSPACING=3 SUMMARY="GeneralPath methods">
     
      <TR><TH>Method<TH>Description

      <TR><TD CLASS="lit">moveTo[<I>x,y</I>]<TD>Moves to the specified point
        without drawing.  This creates a new subpath.  This should be the
        first call, otherwise the initial point is unspecified.

      <TR><TD CLASS="lit">lineTo[<I>x, y</I>]<BR>addPoint[<I>x,y</I>]
       <TD>Draws a straight line segment from the current point to the
        specified point.  The <CODE>addPoint</CODE> syntax is retained to make
        it easy to change code from a <CODE>polygon</CODE> or
        <CODE>polyline</CODE> representation to use <CODE>GeneralPath.</CODE>
        
     <TR><TD CLASS="lit">quadratic[<I>cx, cy, px, py</I>]<TD>Draws a quadratic
     B&eacute;zier curve from the current point to the point specified by
     <CODE>px,py</CODE> using the coordinates specified by <CODE>cx,cy</CODE>
     as the "control point".  The curves at each endpoint will be tangent to a
     line connecting that point and the control point.
        
        <IMG SRC="images/quadratic.png" WIDTH=300 HEIGHT=150
         ALT="Quadratic Curve">
        <BR>
        (Control points drawn for clarity.)

      <TR><TD CLASS="lit">cubicCurve[<I>c1x, c1y, c2x, c2y, px,
      py</I>]<TD>Draws a cubic B&eacute;zier curve from the current point to
      the point specified by <CODE>px,py</CODE> using the coordinates
      specified by (<CODE>c1x,c1y</CODE>) and (<CODE>c2x,c2y</CODE>) as the
      "control points".  The curves at each endpoint will be tangent to a line
        connecting that point and its corresponding control point.

        <IMG SRC="images/cubic.png" WIDTH=300 HEIGHT=200
         ALT="Cubic Curve">
        <BR>
        (Control points drawn for clarity.)

      <TR><TD CLASS="lit">ellipseSides[x1, y1, x2, y2]<TD>Creates an ellipse
        with the specified coordinates indicating its sides, that is, a
        rectangle that will contain it.  Note that an ellipse is considered to
        be <EM>disconnected</EM> from previous line segments, so you should use
        a <CODE>moveTo[x,y]</CODE> after this call to create a new path.
        
      <TR><TD CLASS="lit">ellipseSize[x1, y1, width, height]<TD>Creates an
        ellipse with the (x1,y1) coordinates indicating the top left corner of
        its bounding box, and the specified width and height relative to that
        point.  Note that an ellipse is considered to be <EM>disconnected</EM>
        from previous line segments, so you should use a
        <CODE>moveTo[x,y]</CODE> after this call to create a new path.

      <TR><TD CLASS="lit">ellipseCenter[cx, cy, width, height]<TD>Creates an
        ellipse with the (cx, cy) coordinates indicating the center of
        the ellipse, and the specified width and height.  Note that an
        ellipse is considered to be <EM>disconnected</EM> from previous line
        segments, so you should use a <CODE>moveTo[x,y]</CODE>
        after this call to create a new path.
        
      <TR><TD CLASS="lit">circularArc[cx, cy, angle]<TD>Creates a circular arc
        from the current point.  The (cx, cy) coordinates indicate the center
        of the circle, and <CODE>angle</CODE> specifies the angle to go around
        the circle in the counterclockwise direction.  Note that the
        <CODE>angle</CODE> parameter should have units of an angle, e.g.
        <CODE>90 degrees</CODE> or <CODE>1.2 radians</CODE> or even
        <CODE>1.2</CODE> (implying radians) if the standard data file is used
        which treats radians as a dimensionless number.
        
      <TR><TD CLASS="lit">close[]<TD>Closes the current subpath by drawing a
        straight line to the initial point of the subpath.  It is strongly
        recommended to use this method to close curves, as it properly joins
        corners, and informs the curve that it is logically closed.  This
        creates a new subpath, so you should use a <CODE>moveTo[x,y]</CODE>
        after this call to create a new path.
    </TABLE>

   <LI>Add the GeneralPath to the graphics object.  A GeneralPath can be added
    to multiple graphics objects.  The drawing color and stroke width used in
    rendering the GeneralPath are the ones which are active at the time of the
    <CODE>.add</CODE> call.  <EM>Note that no points should be added to
     the GeneralPath after it is added to the graphics object!</EM>
    <P CLASS="code">
     <CODE CLASS="input">g.add[p]</CODE>
    </P>
    
   <LI>Show the graphics object (or print, or save it to a file, or keep
    drawing into it and show it later...)
    <P CLASS="code">
     <CODE CLASS="input">g.show[]</CODE>
    </P>
  </OL>

  <P>
   For a sample of using the GeneralPath class, see <A
    HREF="/fsp/colorize.fsp?fileName=GeneralPathTest.frink">GeneralPathTest.frink</A> which demonstrates drawing a filled letter "P" with a properly-transparent hole.
  </P>
       
  <H3><A NAME="GraphicsWithText">Graphics with Text</A></H3>
  <P>
   High-quality text with transparent anti-aliased edges can be added
   to any <CODE>graphics</CODE> object using the following methods:
  </P>
  
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Graphics Text Methods">
    <TR><TH>Function<TH>Description
    <TR><TD CLASS="lit">font[<I>fontName, height</I>]<P>font[<I>fontName,
        style, height</I>]<TD>Sets the current font that will be used to
      render text.  The arguments are:
      <UL>
       <LI><CODE><B>fontName</B></CODE>:  A string indicating the name of the
        font family.  For portability to all platforms and image types
        (including SVG files,) this should be one of <CODE
         CLASS="input">"Serif", "SansSerif", "Monospaced"</CODE>.  However,
        any font name available on your system may be used if you don't care
        about portability.
        
       <LI><CODE><B>style</B></CODE>:  An string containing information about
        the font style.  This should contain one of <CODE
         CLASS="input">"plain", "bold", "italic", "bold+italic"</CODE>.  (It's
        actually a case-insensitive substring search that just looks for
        "bold" and "italic" so this can be written in a lot of ways.) 
        
       <LI><CODE><B>height</B></CODE>: The height of the font in the current
        coordinate system.  Height is taken as the distance from standard
        baseline to the next standard baseline, not necessarily as the height
        of the tallest characters.  This fits the usual definition of font size
        used in most systems.

        <P>
         If the height is a dimensionless number, (e.g. <CODE
          CLASS="input">10</CODE>) the font will be scaled
         along with the drawing.  If the height has units of length,
         (e.g. <CODE CLASS="input">10 points</CODE> or <CODE CLASS="input">1
          cm</CODE>) the font will be rendered at that constant height,
         regardless of how the image is scaled.  Note that using a height with
         dimensions of length might force the text out of the viewable area if
         the drawing is scaled too small to accommodate it.
        </P>
      </UL>

      <P>
       If you don't specify a font before drawing text, your system will use
       its default font, which may give different results when the same
       program is run on different systems or rendered to different devices.
       This behavior may change to specify a fixed default font in the future.
      </P>
      
    <TR><TD CLASS="lit">text[<I>text, x, y</I>]<TD>Draws the specified text
      <EM>centered</EM> (vertically and horizontally) at the coordinates
      (x,y).  Since it's hard to predict how wide (or tall) text will be until
      it's rendered, centering is often the most useful option.  Note that
      text is currently treated as a single line, with no text wrapping nor
      processing of newlines.

    <TR><TD CLASS="lit">text[<I>text, x, y, horizontalAlign,
       verticalAlign</I>]<TD>Draws the specified text with one point specified
      by the (x,y) coordinates and the rest of the text aligned relative to
      that as specified by the <CODE>horizontalAlign</CODE> and
      <CODE>verticalAlign</CODE> parameters.
      
      <P>
       The parameter <CODE CLASS="input">horizontalAlign</CODE> is a string
       containing one of: <CODE CLASS="input">"left", "right", "center"</CODE>
       indicating if the <CODE>x</CODE> coordinate indicates the left, right,
       or center horizontal position of the text.  For example, if the
       horizontal alignment is given as <CODE>"right"</CODE>, the specified
       <CODE>x</CODE> coordinate will be the right side of the text.  Note that
       text is currently treated as a single line, with no text wrapping nor
       processing of newlines.
      </P>
      
      <P>The parameter <CODE CLASS="input">verticalAlign</CODE> is a string
       containing one of: <CODE CLASS="input">"top", "bottom", "center",
        "baseline"</CODE> indicating if the <CODE>y</CODE> coordinate indicates
       the top, bottom, center, or baseline vertical position of the text.  For
       example, if the vertical alignment is given as <CODE>"top"</CODE>, the
       specified <CODE>y</CODE> coordinate will be the top of the text.  The
       <CODE>"baseline"</CODE> parameter indicates the bottom of most
       characters, but characters with descenders like "j", "p" and "q" may
       hang below the baseline.
      </P>
  </TABLE>

  <P>
   <B>Example:</B>  The following program draws a 5x5 grid of random
   characters.
  </P>

  <P CLASS="code">
   <CODE>
g=new graphics<BR>
g.font["SansSerif", "bold", 10]&nbsp;&nbsp;&nbsp;<BR>
<BR>
for x=1 to 5<BR>
&nbsp;&nbsp;&nbsp;for y=1 to 5<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.text[char[random[char["A"], char["Z"]]], x*10, y*10]<BR>
<BR>
    g.show[]<BR>
   </CODE>
  </P>

  <P>
   <IMG SRC="images/lettergrid.png" WIDTH=200 HEIGHT=200 ALT="Letter grid example">
  </P>

  <H3><A NAME="ShowingGraphics">Showing Graphics</A></H3>
  <P>
   Once a <CODE>graphics</CODE> object has been constructed, it can be shown
   on-screen, printed, or written to a file using the following methods:
  </P>
  
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Graphics Show Methods">
    <TR><TH>Method<TH>Description
    <TR><TD CLASS="lit">show[]<TD>Displays the graphic object using the
      default method.  On most platforms, this opens a new resizable window.
      Note that this method returns an object that can be used to repaint the
      graphics.  See the <A HREF="#Animation">Animation</A> section of the
      documentation for more.
      
    <TR><TD CLASS="lit">show[<I>width, height</I>]<TD>Displays the graphic
    object using the default method, specifying the width and height of the
     window as integers.  Note that this method returns an object that can be
    used to repaint the graphics.  See the <A HREF="#Animation">Animation</A>
    section of the documentation for more.

    <TR><TD CLASS="lit">show[<I>width, height, insets</I>]<TD>Displays the
      graphic object using the default method, specifying the width and height
      of the window as integers, and the insets as a floating-point value
      between 0 and 1, where 1 means to use 100% of the window with the graphic
      (no borders.)  An insets value of 0.95 causes 5% of the window's width
      and/or height to be borders.
      
    <TR><TD CLASS="lit">print[]<TD>Prints the graphics object to a single page
      on a printer.  This will produce a print dialog that allows you to
      select the printer, and the orientation and margins for the page.
    <TR><TD CLASS="lit">printTiled[<I>pagesWide, pagesHigh</I>]<TD>Prints the
      graphics object tiled across multiple pages on a printer.  This allows
      very large graphics to be printed.  The arguments indicate how many
      printer pages wide and high the graphic should be drawn.
    <TR><TD CLASS="lit">write[<I>filename, width, height</I>]
      <P>writeTransparent[<I>filename, width, height</I>]
      <P>write[<I>filename, width, height, insets</I>]
      <P>writeTransparent[<I>filename, width, height, insets</I>]
     <TD>Writes the
    image to a file with the specified width and height (usually in pixels).
    The format of the file is guessed from the filename's extension.  If the
      <CODE>writeTransparent</CODE> method is called, and if the image format
      supports it, the image will be rendered with a transparent background,
      allowing you to stack and create composite images with full
      anti-aliasing and background support.  The file formats supported by
      your version of Java may vary, but the following should be supported:
      
      <UL>
       <LI><B>JPEG</B>: Does not support transparency.  Requires Java 1.4 or
        later.
       <LI><B>PNG</B>: (Portable Network Graphics) Supports transparency and
        full anti-aliasing of transparent graphics.  Requires Java 1.4 or
        later.
       <LI><B>SVG</B>: (Scalable Vector Graphics) A vector format that is
        infinitely resizable.  Supports transparency.  By default, all
        backgrounds in SVG graphics are transparent.  Works in all versions
        of Java. Warning:  Due to a deficiency in the SVG standard, drawings
        with dimensions of length (e.g. "1 inch") may not work properly for
        some shapes, notably polygons and polylines.   
      </UL>

      <P>
       In the versions of these functions where <CODE>insets</CODE> is
       specified, the value of that argument indicates how wide a border
       should be left when drawing.  When specifying <CODE>1</CODE> (indicating
       100%) to the <CODE>insets</CODE> argument, the drawn image occupies
       100% of the width and height, with no border.  By default, only 95%
       (0.95) of the width or height is used, leaving a small 5% border around
       the drawn graphics.  Specifying the insets is important when rendering
       image files out at their original size.  See the <A
        HREF="Images">Images</A> section of the documentation for more.
       
    <TR><TD
         CLASS="lit">writeFormat[<I>filename, format, width, height</I>]<P>writeFormatTransparent[<I>filename, format, width, height</I>]
     <TD>Writes
    to a file, explicitly specifying the format.  The format should be a
    string containing one of <CODE>"svg", "SVG", "jpeg", "JPEG", "jpg", "JPG",
    "png", "PNG"</CODE>, or possibly another format that your Java platform
    understands.
  </TABLE>

  <P>
   The following draws a partially-transparent circle, and then successively
   displays it on-screen, prints it, and renders it to various image files:
  </P>

  <P CLASS="code">
   <CODE>
    g = new graphics<BR>
    g.color[0, 0, 1, 0.5]&nbsp;&nbsp;&nbsp;<CODE CLASS="comment">// Blue,
     half-transparent</CODE><BR>
    g.fillEllipseCenter[0,0,10,10]<BR>
    <BR>
    g.show[]<BR>
    g.print[]<BR>
    g.write["circle.jpg", 200, 200]<BR>
    g.write["circle.png", 200, 200]<BR>
    g.writeTransparent["circleTrans.png", 200, 200]<BR>
    g.write["circle.svg", 200, 200]
   </CODE>
  </P>

  <H3><A NAME="Images">Images</A></H3>
  <P>
   Bitmap images can be loaded and drawn to a graphics object, displayed in
   their own window, resized, printed (including tiled across several pages,)
   drawn over, saved out to files, etc.  You can also load an image or create
   it in memory, and read or write the values of individual pixels, allowing
   image processing or analysis.
  </P>
  
  <P>
   <EM>Note that Java 1.1 and earlier did not have a portable, public way to
     read and write individial pixels of images, so many of these methods
     require Java 1.2 or later.</EM>
  </P>

  <P>
   To load an image, call <CODE>new image[<I>URL</I>]</CODE>, passing it a
   URL.  The URL can be of any type your Java platform understands, including a
   <CODE>file:</CODE> URL indicating a file on your local system:
  </P>

  <P CLASS="CODE">
   <CODE CLASS="input">
    img1 = new image["http://futureboy.us/images/futureboydomethumb4.gif"]<BR>
    img2 = new image["file:yourfile.gif"]
   </CODE>
  </P>
  
  <P>
    To create a new (blank) image, specify the width and height in pixels:
  </P>
  
  <P CLASS="CODE">
   <CODE CLASS="input">
    img3 = new image[640, 480]
   </CODE>
  </P>

  <P>
   The image can be then shown in its own window by calling the
   <CODE>.show[]</CODE> method:
  </P>

  <P CLASS="CODE">
   <CODE CLASS="input">
    img1.show[]
   </CODE>
  </P>

  <P>
   The following table summarizes the methods available on an
   <CODE>image</CODE> object:
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Image Methods">
    <TR><TH>Method<TH>Description
    <TR><TD CLASS="lit">getHeight[]<TD>Returns the height of the image in
        pixels.
        
    <TR><TD CLASS="lit">getWidth[]<TD>Returns the width of the image in
        pixels.
        
    <TR><TD CLASS="lit">getPixel[]<TD>Returns the pixel's color as an array of
      [red, green, blue, alpha] components between, each between 0 and 1
        inclusive.
        
    <TR><TD CLASS="lit">setPixel[x, y, red, green, blue, alpha]<TD>Sets the
      specified pixel's color to the color specified by the red, green, blue,
        alpha components, each between 0 and 1 (inclusive).
        
    <TR><TD CLASS="lit">setPixel[x, y, red, green, blue]<TD>Sets the
      specified pixel's color to the color specified by the red, green, blue,
      components, each between 0 and 1 (inclusive).  The pixel will be fully
        opaque.
        
    <TR><TD CLASS="lit">averagePixels[left, top, right, bottom]<TD>Returns the
      average color of the pixels within the region specified by the given
      coordinates.  Each coordinate may be a floating-point value, and if an
      incomplete pixel is sampled, it is weighted accordingly.
      The return value is an array of [red, green, blue, alpha]
      components, each between 0 and 1 inclusive.  The values for the
      coordinates can range from 0 to (im.getWidth[] or im.getHeight[],)
      inclusive, indicating, for example, the left and right side of the pixel
      (or subpixel) to be sampled.  For example, in a 2x2 pixel image, you'd
        want to sample [0,0,2,2] to average the whole image.
        
    <TR><TD CLASS="lit">makeARGB[]<TD>Forces a loaded image to have an ARGB
        color model, that is, to have an 24-bit true color model with an 8-bit
        alpha channel that supports transparency.  By default, when loading an
        image, the color model is preserved and may not support true color nor
        transparency.
        
    <TR><TD CLASS="lit">write[<I>filename</I>]<TD> - Write the
        image to the specified filename.  The format of the file is guessed from
        the filename's extension. The file formats supported by your version of
        Java may vary, but the following should be supported:
      
      <UL>
       <LI><B>JPEG</B>: Does not support transparency.  Requires Java 1.4 or
        later.
       <LI><B>PNG</B>: (Portable Network Graphics) Supports transparency and
        full anti-aliasing of transparent graphics.  Requires Java 1.4 or
        later.
      </UL>
            
    <TR><TD CLASS="lit">show[]<TD>Displays the image (by default, in its own
      window.)

    <TR><TD CLASS="lit">print[]<TD>Prints the image to a printer.

    <TR><TD CLASS="lit">printTiled[<I>pagesWide, pagesHigh</I>]<TD>Prints the
      image to a printer, tiled across several pages to make a very large
      image.
</TABLE>

  <P>
   Images can be drawn onto a <CODE>graphics</CODE> object with the following
   methods on the <CODE>graphics</CODE> object:
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Graphics Image Methods">
    <TR><TH>Method<TH>Description
    <TR><TD CLASS="lit">draw[<I>img, left, top, width, height</I>]<TD>Draws the
      specified image onto the <CODE>graphics</CODE> object with the specified
      top left coordinates and the specified width and height.  Note that this
      method does <EM>not</EM> specifically preserve the image's aspect
      ratio and thus may distort the image if the width and the height are not
      in the same ratio as in the original image.
      
    <TR><TD CLASS="lit">fitCenter[<I>img, cx, cy, width, height</I>]<TD>Draws
      an image onto the <CODE>graphics</CODE> object with the specified center
      coordinates (cx,cy), making it fill the specified width and height <EM>as
       much as possible without modifying the aspect ratio.</EM> This will thus
      preserve the proportions of the image.
  </TABLE>

  <P>
   See the <A
   HREF="/fsp/colorize.fsp?fileName=rewriteImage.frink">rewriteImage.frink</A>
   sample program for an example of loading an image, writing a
   semi-transparent watermark over it, and then saving the image out to
   another file at its original size.
  </P>
  
  <H3><A NAME="Animation">Animation</A></H3>
  <P>
   As of the 2009-08-12 release, Frink supports generalized animation.
   Animation is performed by calling
   the <CODE>replaceGraphics[<I>g</I>]</CODE> method on a graphics window
   (obtained by <CODE><I>graphics</I>.show[]</CODE>) which replaces the
   graphics object with a new graphics object and repaints the window.
  </P>

   <P>A short sample of animation is available in
   the <A HREF="http://futureboy.us/fsp/colorize.fsp?fileName=animate.frink">animate.frink</A>
     sample program.
     
  <P>
   Starting with the 2009-02-03 release, an on-screen graphics window can be
   repainted as items are added to its <CODE>graphics</CODE> object.
   Repainting is not done automatically, but is under the programmer's
   control.  This allows the screen to be repainted only when desired.
  </P>

  <P>
   The <CODE><I>graphics</I>.show[]</CODE> method returns an object with a
   <CODE>repaint[]</CODE> or <CODE>replaceGraphics[<I>g</I>]</CODE> method
   that instructs the graphics window to be painted.  <EM>Tip:</EM> don't save
   this object if you're not planning on doing incremental animation, or set
   the variable to some value such as <CODE>undef</CODE> when animation is
   complete.  This will allow the window's resources to be garbage-collected
   as soon as possible.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    g = new graphics<BR>
    window = g.show[]<BR>
    <BR>
    for x = 1 to 10<BR>
    {<BR>
    <CODE CLASS="comment">// Do something that takes a long time...</CODE><BR>
    &nbsp;&nbsp;&nbsp;g.fillRectCenter[x,0,1,1]<BR>
    &nbsp;&nbsp;&nbsp;window.repaint[]<BR>
    }
   </CODE>
  </P>
      
  <H3><A NAME="SampleGraphicsPrograms">Sample Graphics Programs</A></H3>
  <P>
   Below is a small list of simple but interesting and powerful programs that
   demonstrate Frink's graphics.
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Graphics Sample Programs">
    <TR><TH>Filename<TH>Description
      
     <TR><TD><A HREF="http://futureboy.us/fsp/colorize.fsp?fileName=animate.frink">animate.frink</A><TD>Demonstrates
     simple animation.

     <TR><TD><A
       HREF="/fsp/colorize.fsp?fileName=graphpaper.frink">graphpaper.frink</A>
     <TD>Prints graph paper with 1 cm and 1 mm grids.  Demonstrates
      exactly-sized printing.

    <TR><TD><A
       HREF="/fsp/colorize.fsp?fileName=rewriteImage.frink">rewriteImage.frink</A>
     <TD>Loads a bitmap image and writes a semi-transparent
      watermark on it and then saves it back out to a file.  Demonstrates
      image loading, drawing over images, and saving image files
      at their original size.
      
    <TR><TD><A
    HREF="/fsp/colorize.fsp?fileName=SolarCooker2.frink">SolarCooker2.frink</A>
    <TD>Draws a parabola and focal point for a small solar cooker that you can
    cut out and use to make a precisely-shaped mirror for cooking hot dogs and
    such.

    <TR><TD><A
    HREF="/fsp/colorize.fsp?fileName=simplegraph3.frink">simplegraph3.frink</A>
    <TD>A <EM>very</EM> powerful but simple program to graph just about any
      equation, no matter how complicated or ill-behaved, using Frink's <A
       HREF="#IntervalArithmetic">Interval Arithmetic</A> capabilities.

    <TR><TD><A
    HREF="/fsp/colorize.fsp?fileName=spiral.frink">spiral.frink</A>
    <TD>Draws simple, colorful spirals.  Fiddle with the numbers to make
      different, interesting patterns.

    <TR><TD><A
    HREF="/fsp/colorize.fsp?fileName=drawSolarSystem.frink">drawSolarSystem.frink</A>
    <TD>Draws the current position of planets in the solar system.  (With
      exaggerated scale, otherwise they're invisible.)  Requires the <A
       HREF="/frinksamp/planets.frink">planets.frink</A> and <A
       HREF="/frinksamp/sun.frink">sun.frink</A> libraries.
  </TABLE>
  
  <H2><A NAME="TemperatureScales">Temperature Scales</A></H2>
  <P>
   Temperature scales that have their zero point (kelvin, Rankine) at absolute
   zero can be multiplied and converted normally.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">45 Rankine -&gt; K</CODE><BR>
   <CODE CLASS="output">25</CODE>
  </P>
  
  <P>
   Temperature scales like Fahrenheit, Celsius, and Reaumur cannot be
   represented as normal multiplicative unit definitions because their zero
   point is not at absolute zero. 
   Thus, to avoid ambiguous "do what I mean" interpretation, you must use the
   functions <CODE>Fahrenheit[x]</CODE> or the shorter
   <CODE>F[x]</CODE>, <CODE>Celsius[x]</CODE> or the shorter
   <CODE>C[x]</CODE>, and <CODE>Reaumur[x]</CODE> to convert to/from these
   temperature scales: 
  </P>

  <P CLASS="code">
   To represent a Fahrenheit temperature:<BR>
   <CODE CLASS="input">Fahrenheit[451]</CODE><BR>
   or <BR>
   <CODE CLASS="input">F[451]</CODE><BR>
   <CODE CLASS="output">505.9277777777778 K (temperature)</CODE>
  </P>

  <P CLASS="code">
   To convert another temperature scale to Fahrenheit:<BR>
   <CODE CLASS="input">Fahrenheit[30 K]</CODE><BR>
   or <BR>
   <CODE CLASS="input">F[30 K]</CODE><BR>      
   <CODE CLASS="output">-405.67</CODE>
  </P>

  <P CLASS="code">
   To represent a Celsius temperature:<BR>
   <CODE CLASS="input">Celsius[0]</CODE><BR>
   or <BR>
   <CODE CLASS="input">C[0]</CODE><BR>
   <CODE CLASS="output">273.15 K (temperature)</CODE>
  </P>

  <P CLASS="code">
   To convert another temperature scale to Celsius:<BR>
   <CODE CLASS="input">Celsius[30 K]</CODE><BR>
   or <BR>
   <CODE CLASS="input">C[30 K]</CODE><BR>
   <CODE CLASS="output">-243.15</CODE>
  </P>

  <P CLASS="code">
   To convert between scales (short version):<BR>
   <CODE CLASS="input">Fahrenheit[98.6] -&gt; Celsius</CODE><BR>
   or<BR>
   <CODE CLASS="input">F[98.6] -&gt; C</CODE><BR>
   <CODE CLASS="output">37.0</CODE>
  </P>

  <P CLASS="code">
   This is equivalent to saying:<BR>
   <CODE CLASS="input">Celsius[ Fahrenheit[98.6] ]</CODE><BR>
   or<BR>
   <CODE CLASS="input">C[ F[98.6] ]</CODE><BR>
   Except this way <EM>doesn't</EM> turn the result into a string like the
   <CODE>-&gt;</CODE> operator does.
  </P>

  <P>
   <B>Note:</B> The units <CODE>degC</CODE> and <CODE>degF</CODE> only
   indicate the difference in the <EM>size</EM> of a degree in these various
   scales.  They should only be used when you're indicating the
   <EM>difference</EM> between two temperatures, (say, how much energy to
   raise the temperature of a gram of water by 5 degrees Celsius,)
   <EM>not</EM> for absolute temperatures.  Conversely, the conversion
   functions above should <EM>not</EM> be used when the <EM>difference</EM>
    between temperatures in two scales should be compared.
  </P>

  <H2><A NAME="OtherDataSources">Other Data Sources</A></H2>
  <P>
   One of the main design goals of Frink was to allow new sources of data to
   be added in very easily.  These special sources are not necessarily defined
   in the <A HREF="/frinkdata/units.txt">data file</A>.  The three data
   sources listed below retrieve data on demand from up-to-the minute data on
   the Internet (and thus require connection to the Internet.)
  </P>

  <H3><A NAME="HistoricalUSPriceData">Historical U.S. Price Data</A></H3>

  <P CLASS="warning">
   <B>Obligatory Disclaimer:</B> This feature requires connection to the
   internet.  If you are using Frink on a handheld device, you may incur
   connection charges.  Also, since I cannot guarantee the availability of any
   internet sites, this feature is intended only as a bonus that may not work
   reliably if at all.  You may also require some
   <A HREF="#ProxyConfiguration">proxy configuration</A> if you use an FTP
   proxy server to access the web.
  </P>
  
  <P>
   The units "dollar" or "USD" indicate the value of a <EM>current</EM>
   U.S. dollar (which is arbitrarily chosen as the standard unit of currency.)
   Historical price data is available to allow comparisons between the
   historical "buying power" of U.S. currency.  This allows you to adjust
   historical prices for inflation.  These are represented by specially-named
   units containing both the currency and the year, separated by an
   underscore, for example:
  </P>

  <UL>
   <LI CLASS="code">1.25 dollar_1960
   <LI CLASS="code">dollar_1902
   <LI CLASS="code">dollars_1902
   <LI CLASS="code">10 dollars_1902
   <LI CLASS="code">10 USD_1902
   <LI CLASS="code">cent_1910
   <LI CLASS="code">5 cents_1926
   <LI CLASS="code">cent_1914
  </UL>

  <P>
   Data after 1913 is fetched live from the U.S. Department of Labor <A
   HREF="http://www.bls.gov/">Bureau of Labor Statistics</A>
   Consumer Price Index data, specifially by retrieving and parsing <A
    HREF="ftp://ftp.bls.gov/pub/special.requests/cpi/cpiai.txt">this
    file</A>.  If that file is unavailable, the data will be fetched from a
   static file distributed with Frink, which is only as recent as your version
   of Frink.
  </P>

  <P>
   Data from 1700 to 1912 is based on some general economists' guesses and
   should be taken with a grain of salt.  U.S. data before 1700 is not
   available, and probably wouldn't be meaningful unless you could convert
   between the value of pelts, tinder, and tallow.
  </P>

  <P>
   <B>Warning:</B> Fetching this file uses Java's FTP capability which doesn't
   work if you have more than one network card, or a network card and a dialup
   connection.  (See Java <A
   HREF="http://developer.java.sun.com/developer/bugParade/bugs/4107059.html">Bug
   4107059</A>) It'll just lock up when you request historical dollar data.
   That's nice.  In addition, the BLS web and FTP servers seem to have frequent
   outages, and historical data will not be available if the servers are down,
   or if you are not connected to the Internet.
  </P>

  <P>
   From 1913-present, you can even use monthly resolution by indicating the
   month after the year.  Months are 2 digits and padded with zeros:
  </P>

  <UL>
   <LI CLASS="code">dollar_1969_08
   <LI CLASS="code">dollars_1969_08
   <LI CLASS="code">14.75 dollar_1941_12
   <LI CLASS="code">14.75 USD_1941_12
   <LI CLASS="code">dollars_1941_12
   <LI CLASS="code">dollar_1941_12
   <LI CLASS="code">15 cents_1965_10
   <LI CLASS="code">4 cent_1929_01
  </UL>

  <P>
   Historical currency values can be converted to the current value.  For
   example to find today's cost of Mark Twain's passage to Europe and the Holy
   Land on the steamship <I>Quaker City</I> at a cost of $1250 in 1867
   (detailed in <A
   HREF="http://www.mindspring.com/~eliasen/twain/innocents/"><I>The Innocents
   Abroad</I></A>, the conversion of which was one of my first web projects):
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">1250 dollar_1867 -&gt; dollar</CODE><BR>
   <CODE CLASS="output">14982.240769251547535000</CODE>
  </P>

  <P>
   And, you can add the 5 dollars/day in gold that they were encouraged to
   bring along to cover expenses for the 6-month trip:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1250 dollar_1867 + 5 dollars_1867/day 6 months
    -&gt; dollar</CODE><BR>
   <CODE CLASS="output">26043.38587544437 </CODE>
  </P>

  <P>
   You can translate from one year and month to another, if you have a
   DeLorean, and want to watch a Reagan movie:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">50 cents_1955_11 -&gt; dollars_1985_10</CODE><BR>
   <CODE CLASS="output">2.020446096654275 </CODE>
  </P>

  <H3><A NAME="HistoricalBritishPriceData">Historical British Price Data</A></H3>

  <P CLASS="warning">
   <B>Obligatory Disclaimer:</B> This feature requires connection to the
   internet.  If you are using Frink on a handheld device, you may incur
   connection charges.  Also, since I cannot guarantee the availability of any
   internet sites, this feature is intended only as a bonus that may not work
   reliably if at all.  You may also require some
   <A HREF="#ProxyConfiguration">proxy configuration</A> if you use an HTTP
   proxy server to access the web.
  </P>
  
  <P>
   The units <CODE>Britain</CODE> or <CODE>Britain_Pound</CODE> or
   <CODE>Britain_currency</CODE> or <CODE>Great_Britain</CODE> or
   <CODE>Great_Britain_Pound</CODE> or <CODE>United_Kingdom_Pound</CODE>, or
   <CODE>England</CODE> or <CODE>England_currency</CODE> or <CODE>GBP</CODE>
   (the <A
   HREF="http://en.wikipedia.org/wiki/ISO_4217">ISO-4217</A>
   code for the U.K. Pound) indicate the <EM>current</EM> pound (but don't use
   <CODE>pound</CODE> by itself--that's a measure of mass.)  The exchange rate
   between the pound and all other world currencies, see below, is fetched
   live from the Internet.
  </P>

  <P>
   Historical price data is available to allow comparisons between
   the historical "buying power" of British currency, both pre- and
   post-decimalization.  Data goes back to the year
   1600.  I don't know if data before this would be very meaningful.
  </P>

  <P>
   Historical currency values are represented by specially-named units
   containing both the currency and the year, separated by an underscore.  All
   can be used in the plural, (<I>e.g.</I> <CODE>pound_1960</CODE> or
   <CODE>pounds_1960</CODE> or <CODE>GBP_1960</CODE> are all valid).  The
   following are examples of the plethora of values up to and including 1970
   (from 1971 on, it just became pounds and pence):
  </P>

  <TABLE SUMMARY="British Currency Unit Examples">
    <TR><TH>Example<TH>Description
    <TR><TD CLASS="lit">guinea_1865             <TD>A pound plus a shilling
      (21/20 pounds)
    <TR><TD CLASS="lit">pound_1865              <TD>Fundamental unit
    <TR><TD CLASS="lit">GBP_1865                <TD>Fundamental unit
    <TR><TD CLASS="lit">sovereign_1865          <TD>A pound coin
    <TR><TD CLASS="lit">merk_1865               <TD>13/6d (that is 13
      shillings and 6 pence) or 27/40 of a pound
    <TR><TD CLASS="lit">mark_1865               <TD>2/3 pound
    <TR><TD CLASS="lit">noble_1865              <TD>80 pence or 1/3 pound
    <TR><TD CLASS="lit">crown_1865              <TD>1/4 pound or 5 shillings
    <TR><TD CLASS="lit">florin_1865             <TD>2 shillings or 1/10 pound
    <TR><TD CLASS="lit">shilling_1865           <TD>1/20 pound or 12 pence
    <TR><TD CLASS="lit">groat_1865              <TD>4 pence or 1/60 pound
    <TR><TD CLASS="lit">penny_1865 or pence_1865<TD>1/12 shilling or 1/240 pound
    <TR><TD CLASS="lit">farthing_1865           <TD>1/4 penny or 1/960 pound
  </TABLE>

  <P>
   No wonder they went to decimalization.  It was either that or go to
   base-960 math.  
  </P>

  <P>
   To form combinations you can add them (using parentheses when necessary).
   For example, to convert a historical rate per day to current dollars/year:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">(4 pounds_1860 + 3 shilling_1860 + 5 pence_1860) / day
    -&gt; dollars/year</CODE><BR>
   <CODE CLASS="output">101853.3826649</CODE>
  </P>

  <P>
   I acknowledge that's a bit cumbersome.
  </P>

  <P>
   So, you can find out what a great amount of money was
   involved when the British Parliament announced a 20,000 pound prize in 1714
   for solving the 
   <A HREF="http://www.nmm.ac.uk/site/request/setTemplate:singlecontent/contentTypeA/conWebDoc/contentId/355/viewPage/1">Longitude Problem</A>:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">20000 pound_1714 -&gt; dollars</CODE><BR>
   <CODE CLASS="output">2807866.8</CODE>
  </P>

  <P>
   That's a lot of lettuce.  For more about the fascinating history of this
   problem, I highly recommend Dava Sobel's <A
   HREF="http://www.amazon.com/exec/obidos/ASIN/0140258795/ref=pd_ecc_rvi_1/104-0183884-9196715"><I>Longitude:
   The True Story of a Lone Genius Who Solved the Greatest Scientific Problem
   of His Time</I></A>. By God, Harrison, I will see you righted.
  </P>

  <P>
   Thanks to Dan Weiler who loaned me the above book which I never returned
   (and passed along to my Grandpa.)  Sorry, Dan, I'll buy you a book of your
   choice.
  </P>

  <H3><A NAME="InternationalExchangeRates">International Exchange Rates</A></H3>
  <P CLASS="warning">
   <B>Obligatory Disclaimer:</B> This feature requires connection to the
   internet.  If you are using Frink on a handheld device, you may incur
   connection charges.  Also, since I cannot guarantee the availability of any
   internet sites, this feature is intended only as a bonus that may not work
   reliably if at all.  You may also require some
   <A HREF="#ProxyConfiguration">proxy configuration</A> if you use an HTTP
   proxy server to access the web.
  </P>
  
  <P>
   Current exchange rate between almost all of the world's currencies is
   available.  Exchange rates are fetched live from an allegedly zero-delay
   source on the Internet.  The currency can either be specified by the name
   of the country, by the 3-letter <A
   HREF="http://en.wikipedia.org/wiki/ISO_4217">ISO-4217</A>
   code for the currency, or by one of the combinations shown below.  The
   following examples all work:
  </P>

  <UL>
   <LI>Ireland
   <LI>Ireland_currency
   <LI>Ireland_Punt
   <LI>IEP
   <LI>Japan
   <LI>Japan_currency
   <LI>Japan_Yen
   <LI>JPY
   <LI>yen (this works because only Japan has a currency called "yen")
   <LI>Yen
   <LI>United_Arab_Emirates
   <LI>United_Arab_Emirates_currency
   <LI>United_Arab_Emirates_Dirham
   <LI>AED
   <LI>Euro
   <LI>EUR
  </UL>

  <P>
   To list all of the currencies, you can use:<BR>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">units[currency]</CODE>
  </P>
  

  <P>
   So, I'm watching "The Amazing Race" and seeing a team pay 600 Baht in
   Thailand for a hotel room.  How much is that in a currency I'm familiar
   with?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">600 baht -&gt; USD</CODE><BR>
   <CODE CLASS="output">13.73724</CODE>
  </P>

  <P>
   I could have also used <CODE>Thailand_Baht</CODE> or <CODE>Thailand</CODE>
   in the above example.
  </P>

  <P>
   You can also get the current trade rates of various precious metals
   (normalized from the obscure troy weights that these values are measured
   in.)  These are referenced using the <EM>capitalized</EM> name (lower case
   brings up element properties for now... this will all be addressed when I
   add object-oriented behavior to Frink) or the 3-letter ISO code (which is
   an X followed by the chemical symbol):
  </P>

  <TABLE SUMMARY="Precious metals and their symbols">
   <TR><TH>Element<TH>ISO Code
   <TR><TD CLASS="lit">Gold<TD CLASS="lit">XAU
   <TR><TD CLASS="lit">Platinum<TD CLASS="lit">XPT
   <TR><TD CLASS="lit">Silver<TD CLASS="lit">XAG
   <TR><TD CLASS="lit">Palladium<TD CLASS="lit">XPD
  </TABLE>

  <P CLASS="code">
   <CODE CLASS="input">Gold</CODE><BR>
   <CODE CLASS="output">8765.9010519364188896 kg^-1 USD (price_per_mass)</CODE>
  </P>

  <P>
   Note that this is in units of currency/mass (the international exchange
   rates for these are specified in dollars/troyounce, (but try to find that
   written somewhere)), but you can use any units of mass you want:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1 ton Gold</CODE><BR>
   <CODE CLASS="output">7952291.666666666667 USD (currency)</CODE>
  </P>

  <P>
   Or find out how much it would be worth to melt down that necklace:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">3 gram 18 karat Gold</CODE><BR>
   <CODE CLASS="output">19.723277366856942501600 USD (currency)</CODE>
  </P>

  <P>
   <B>Note:</B> If you want to set a different base currency in your units
   file, and if you want currency conversions to still work, you should now)
   define the base currency as its 3-letter ISO-4217 currency code (say, "EUR"
   or "JPY").  This will allow the currency converter to unambiguously figure
   out which currency you mean.  The following special cases work as well:
  </P>

  <TABLE BORDER=1 SUMMARY="Currency Symbols">
    <TR><TH>Symbol<TH>Description
    <TR><TD CLASS="lit">dollar<TD>U.S. dollar
    <TR><TD CLASS="lit">Euro<TD>Euro
    <TR><TD CLASS="lit">euro<TD>euro
    <TR><TD CLASS="lit">&euro;<TD>Euro symbol (Unicode <CODE>\u20ac</CODE>)
    <TR><TD CLASS="lit">&yen;
     <TD>Japanese Yen symbol (Unicode <CODE>\u00a5</CODE>)
    <TR><TD CLASS="lit">&pound;
     <TD>U.K. Pound symbol (Unicode <CODE>\u0163</CODE>)
  </TABLE>

  <H2><A NAME="IntervalArithmetic">Interval Arithmetic</A></H2>
  <P>
   Frink has the magical ability to perform rigorous interval arithmetic
   throughout calculations.  So what is interval arithmetic?  Well, you can
   think of it as a "new kind of number" that represents a fuzzy range of
   values.  For example, you may know that a value lies between 1 and 2, but
   you're not quite sure where the value lies in that interval.  Depending on
   your philosophy, you can think of an interval as specifying a fuzzy error
   bound, or you can think of an interval as simultaneously taking on all
   values within its bounds.
  </P>

  <P>
   Frink can take this uncertain interval and propagate the uncertainty
   through its calculations, giving you the ability to see how the initial
   uncertainties in your values affect your final calculations.
  </P>

  <P>
   Currently, the way to indicate that something is an interval is to use the
   <CODE>new interval</CODE> syntax (although something more concise will
   likely be added later, and the output format may change.)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    a = new interval[2,3]<BR>
    b = new interval[5,7]
   </CODE>
  </P>

  <P>
   The intervals can then be manipulated in mathematical expressions, either
   with ordinary scalar variables or other intervals:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">a * 3</CODE><BR>
   <CODE CLASS="output">[6, 9]</CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a + b</CODE><BR>
   <CODE CLASS="output">[7, 10]</CODE><BR>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">a * b</CODE><BR>
   <CODE CLASS="output">[10, 21]</CODE>
  </P>

  <P>
   Intervals may also have a "middle" or "main" value which indicates the
   best-known value.  Note that values should be specified in increasing
   order.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    d = new interval[2, 2.5, 3]<BR>
    e = new interval[7, 8.2, 9.4]<BR>
    d * e<BR>
   </CODE>
   <CODE CLASS="output">[14, 20.5, 28.2]</CODE>
  </P>

  <P>
   Of course, all intervals used in a calculation must have "main" values or
   the main value will be dropped, creating an interval with only upper and
   lower bounds.
  </P>

  <P>
   Note:  The boundaries and "main" values for intervals must be real
   numbers.  (These numbers can also have dimensions like feet, meters, etc.)
   Although there is a theory of complex intervals, it's much harder and may
   not get implemented any time soon.  (If you want to speed the process, <A
    HREF="http://www.amazon.com/exec/obidos/tg/detail/-/3527401342" TARGET="_blank">the most expensive book in the world</A> is on <A
    HREF="http://www.amazon.com/exec/obidos/wishlist/1HBWTNB5L6H3J/ref=wl_em_to?add-fav=1" TARGET="_blank">my Amazon.com wishlist</A>, if you want to buy it for me.)
  </P>

  <P>
   Lest you think that intervals are simpler than they are, I find that people
   better understand them when they consider the following case:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    x = new interval[-2,2]
   </CODE>
  </P>

  <P>
   Now, let's square x.  Note that the values at each endpoint are equal to 4.
   However, over the range [-2,2], the value of x<SUP>2</SUP> ranges from 4,
   down to 0 (at x=0), and back up to 4.  Frink does the right thing for the
   values over this whole range:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">x^2</CODE><BR>
   <CODE CLASS="output">[0, 4]</CODE>
  </P>

  <P>
   Yeah, that <EM>is</EM> cool.  Frink tracks appropriate boundaries for
   intervals throughout all of your calculations.
  </P>

  <P>
   Frink's interval arithmetic is also rigorous in its treatment of error
   bounds.  It painstakingly controls the rounding direction of arithmetic
   operations so that the boundaries are guaranteed to include the
   next-largest or next-smallest representable floating-point number that
   contains the interval.  (See notes below on <A
    HREF="#IntervalArithmeticStatus">implementation status</A>.)  This
   is subtle, but I have spent a lot of work ensuring that the boundaries came
   out trustable, and no bigger than need be. For example:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">m = new interval[3,6]<BR>
    1.0/m</CODE><BR>
   <CODE CLASS="output">[0.16666666666666666666, 0.33333333333333333334]</CODE>
  </P>

  <P>
   Note that the bottom bound is rounded down, and the top bound is rounded
   up.
  </P>
  
  <P>
   Currently, almost all functions have been made interval-aware.
   Implementing all functions <EM>to arbitrary precision</EM> will take quite
   a bit of effort.  Of course, that would be much slower, too.  Error bounds
   are unfortunately not "sharp" for all operations (meaning as tight as they
   could possibly be with limited precision.)  I've noted them as such in the
   <A HREF="#IntervalArithmeticStatus">Interval Arithmetic Status</A> section
   below.
  </P>

  <P>
   Not all operators such as <CODE>&lt; &gt; =</CODE> make unambiguous sense
   when applied to intervals, so Frink has introduced new operators to
   disambiguate these cases, and will implement other operators to work with
   intervals.  See the <A HREF="#IntervalComparisonOperators">Interval
    Comparison Operators</A> section below for more details.
  </P>

  <P>
   By default, degenerate intervals which have the same upper and lower bounds
   are "collapsed" into a single real number.  If you want to maintain them as
   intervals, call the function <CODE>collapseIntervals[false]</CODE> before
   constructing or performing mathematics on those intervals.
  </P>

  <P>
   As everyone uses Interval Arithmetic for the first time, they come upon two
   characteristic problems in the field:  the dependence problem and the
   overestimation problem.  These are common to all interval analysis, and not
   just to Frink, and are covered in extensive detail in the <A
    HREF="faq.html#IntervalArithmetic">Interval Arithmetic section of the
    Frink FAQ.</A>
  </P>

  <P>
   For more information about the field of Interval Arithmetic, please visit
   the <A TARGET="_blank"
    HREF="http://www.cs.utep.edu/interval-comp/">Interval Computations</A>
   website. (Link opens in new window.)

  <H3><A NAME="IntervalArithmeticExample">Interval Arithmetic Example</A></H3>
  <P>
   Interval arithmetic is an incredibly powerful feature that allows programs
   that weren't necessarily written with intervals in mind to track error
   bounds throughout your calculations, and can be magically applied to
   programs that are already written.  For example, let's take some
   calculations to find the volume and density of a sphere:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    circumference = eval[input["Enter circumference of a sphere: "]]<BR>
    mass = eval[input["Enter the mass of the sphere: "]]<BR>
    diameter = circumference / pi<BR>
    radius = diameter / 2<BR>
    volume = 4/3 pi radius^3<BR>
    density = mass / volume<BR>
    println["The density is: " + (density -&gt; "g/cm^3")]
   </CODE>
  </P>

  <P>
   Now, you can run the program and enter something like "9.1 inches" for the
   circumference and "5.1 ounces" for the mass and find out the density of your
   baseball.  No surprises there.  But when you read the rules of Major League
   Baseball, you'll find that section 1.09 states:
  </P>

  <BLOCKQUOTE>
   <P>
    "The ball shall be a sphere formed by yarn wound around a small core of
    cork, rubber or similar material, covered with two stripes of white
    horsehide or cowhide, tightly stitched together. It shall weigh not less
    than five nor more than 5 1/4 ounces avoirdupois and measure not less than
    nine nor more than 9 1/4 inches in circumference."
   </P>
  </BLOCKQUOTE>

  <P>
   So, using your exact same program above, and a little interval input,
   Frink can calculate the effects of these allowed variations and show you
   the allowed range of densities of <EM>any</EM> legal baseball:
  </P>

  <P CLASS="code">
   <CODE CLASS="output">Enter circumference of a sphere:</CODE>
   <CODE CLASS="input">new interval[9, 9+1/4] inches</CODE><BR>
   <CODE CLASS="output">Enter the mass of the sphere:</CODE>
   <CODE CLASS="input">new interval[5, 5+1/4] ounces</CODE><BR>
   <CODE CLASS="output">The density is: [0.64720283343427980773,
    0.73778085086685322066] g/cm^3</CODE>
  </P>

  <P>
   The output indicates the range of uncertainties.  Note that two different
   intervals were used to perform this calculation, and the effects of their
   uncertainties was automatically tracked throughout all calculations.  All
   this in a program that wasn't even written with intervals in mind.
   Unscrupulous teams may also not that the official definition allows for a
   <EM>large</EM> variation in allowable densities of baseballs, which could
   be manipulated to your advantage.
  </P>

  <P>
   Also note that I put the units of measure (e.g. inches, ounces) outside the
   brackets.  You could put them inside the brackets, but you'd just have to
   write them twice in this case.  Intervals can, of course, contain units of
   measure.
  </P>

  <P>
   By the way, I'm working on a more concise notation for specifying
   intervals.  Join the <A HREF="#MailingList">mailing list</A> if you're
   interested in the discussion.
  </P>

  <H3><A NAME="IntervalComparisonOperators">Interval Comparison
    Operators</A></H3>
  <P>
   The relational operators (e.g. <CODE>&lt; == &gt;</CODE>, etc) work with
   intervals, but there are many ambiguous cases.  These operators try to Do
   The Right Thing when applied to intervals.  If you compare intervals that
   do not overlap, they return the appropriate result.  If, however, the
   intervals <EM>do</EM> overlap, they terminate the program with an error
   similar to the following:

  <BLOCKQUOTE>
   <P>
    Comparison expression: Using operator &gt; to compare intervals [1, 3]
    and [2, 4]<BR>
    This operator is only defined if there is no overlap between intervals.<BR>
    Please modify your program to use interval-aware comparison operators.
   </P>
  </BLOCKQUOTE>

  <P>
   To handle the overlapping cases, Frink defines operators like "certainly
   less than" (<CODE>CLT</CODE>) and "possibly less than" (<CODE>PLT</CODE>).
   These operators can directly replace the normal relational operators.
   These new operators also work with normal real numbers, so you can still
   write programs that run using either intervals or real numbers as input.
  </P>
  
  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Interval Comparison Operators">
    <TR><TH>Operator<TH>Description
    <TR><TD CLASS="lit">CEQ<TD>Certainly equals
    <TR><TD CLASS="lit">CNE<TD>Certainly not equals
    <TR><TD CLASS="lit">CLT<TD>Certainly less than
    <TR><TD CLASS="lit">CLE<TD>Certainly less-than-or-equal-to
    <TR><TD CLASS="lit">CGT<TD>Certainly greater than
    <TR><TD CLASS="lit">CGE<TD>Certainly greater-than-or-equal-to
    <TR><TD CLASS="lit">PEQ<TD>Possibly equals
    <TR><TD CLASS="lit">PNE<TD>Possibly not equals
    <TR><TD CLASS="lit">PLT<TD>Possibly less than
    <TR><TD CLASS="lit">PLE<TD>Possibly less-than-or-equal-to
    <TR><TD CLASS="lit">PGT<TD>Possibly greater than
    <TR><TD CLASS="lit">PGE<TD>Possibly greater-than-or-equal-to
  </TABLE>

  <P>
   Example:
  </P>

  <P CLASS="code">
   <CODE class="input">
    a = new interval[1,3]<BR>
    b = new interval[2,4]<BR>
    a PLT b<BR>
   </CODE>
   <CODE class="output">
    true<BR>
   </CODE>
   <CODE class="input">
    a CLT b<BR>
   </CODE>
   <CODE class="output">
    false
   </CODE>
  </P>

  <H3><A NAME="IntervalArithmeticStatus">Interval Arithmetic Status</A></H3>
  <P>
   As noted above, not all functions are implemented for intervals.  The
   following table notes the status of the implementation of various operators
   and functions.  If a function does not appear on this list, it may still
   return values for interval arguments, but you shouldn't trust it because I
   haven't evaluated it for discontinuities or non-monotonicity yet.
  </P>

  <TABLE BORDER=1 CELLSPACING=3 SUMMARY="Interval Arithmetic Status">
    <TR><TH>Function / Operator<TH>Arbitrary Precision?<TH>Rigorous Error
      Bounds?<TH>Notes
    <TR><TD CLASS="centerlit">+<TD CLASS="center">Y<TD CLASS="center">Y
    <TR><TD CLASS="centerlit">-<TD CLASS="center">Y<TD CLASS="center">Y
    <TR><TD CLASS="centerlit">*<TD CLASS="center">Y<TD CLASS="center">Y
    <TR><TD CLASS="centerlit">/<TD CLASS="center">Y<TD CLASS="center">Y
    <TR><TD CLASS="centerlit">mod<TD CLASS="center">Y<TD CLASS="center">Y
    <TR><TD CLASS="centerlit">^<TD CLASS="center">N<TD CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">floor[<I>x</I>]<TD CLASS="center">Y<TD
                                                               CLASS="center">Y
    <TR><TD CLASS="centerlit">ln[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">Y
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">log[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">exp[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">Y
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">sin[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">cos[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">tan[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">sec[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">csc[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">cot[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">arccos[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">Y
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">arcsin[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">Y
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">arctan[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">Y
     <TD>Performed to hardware precision only.
    <TR><TD CLASS="centerlit">arctan[<I>x</I>, <I>y</I>]<TD CLASS="center">N<TD
                                                                             CLASS="center">N
     <TD>Performed to hardware precision only.  Returns arctan[x/y] corrected
      for quadrant.  Arguments can be real or intervals.  Has some corrections
      to range of function to eliminate branch discontinuity across x=0 when y&lt;0.
    <TR><TD CLASS="centerlit">sqrt[<I>x</I>]<TD CLASS="center">N<TD
                                                               CLASS="center">N
     <TD>Performed to hardware precision for floating-point numbers, exact
      values for integers that produce exact integer values.
    <TR><TD CLASS="centerlit">infimum[<I>x</I>]<TD CLASS="center">Y<TD
                                                               CLASS="center">Y
     <TD>Returns the infimum (lower bound) of an interval.  If called with a
      number that is not an interval, just returns the number.
    <TR><TD CLASS="centerlit">supremum[<I>x</I>]<TD CLASS="center">Y<TD
                                                               CLASS="center">Y
     <TD>Returns the supremum (upper bound) of an interval.  If called with a
      number that is not an interval, just returns the number.
      
    <TR><TD CLASS="centerlit">magnitude[<I>x</I>]<TD CLASS="center">Y<TD
                                                               CLASS="center">Y
     <TD>Returns the absolute value of the endpoint furthest from zero.  If
      called with a real number, just returns the number.  If called with a
      complex number, returns the absolute value (the magnitude) of the
      complex number.
      
    <TR><TD CLASS="centerlit">mignitude[<I>x</I>]<TD CLASS="center">Y<TD
                                                               CLASS="center">Y
     <TD>Returns the absolute value of the endpoint <EM>closest to</EM> zero.
      If called with a real number, just returns the number.  If called with a
      complex number, since "mignitude" of a complex number is generally not
      defined, this also returns the absolute value (the magnitude) of the
      complex number.
      
    <TR><TD CLASS="centerlit">mainValue[<I>x</I>]<TD CLASS="center">Y
     <TD CLASS="center">Y
     <TD>Returns the main (middle) value of an interval.  If the interval does
      not have a middle value, returns <CODE>undef</CODE>. If called with a
      number that is not an interval, just returns the number.
  </TABLE>
  
  <H3><A NAME="DateTimeIntervals">Date/Time Intervals</A></H3>
  <P>
   An interval can also be composed of date/times.  The syntax is very similar:
  </P>

  <P CLASS="code">
   <CODE class="input">
    a = new interval[now[], now[] + 3 days]<BR>
   </CODE>
  </P>

  <P CLASS="code">
   <CODE class="input">
    b = new interval[#1969-08-19#, #2005-06-11#]<BR>
   </CODE>
  </P>
  
  <P>
   You can then perform <A HREF="#DateTimeArithmetic">Date/Time arithmetic</A>
   on the values.
  </P>

  <H2><A NAME="JavaIntrospection">Java Introspection</A></H2>
  <P>
   Missing a function that you need?  Frink can directly call Java code to let
   you take advantage of any Java library that's in your classpath.  Thus, you
   can use your favorite graphing package, connect to a database, perform
   lower-level networking, and more, directly from within Frink.
  </P>

  <P>
   The Java <CODE>null</CODE> will be converted to/from the Frink type
   <CODE>undef</CODE>.
  </P>

  <H3><A NAME="CreatingJavaObjects">Creating Java Objects</A></H3>
  <P>
   New Java objects can be created with the <CODE>newJava[classname]</CODE>
   and <CODE>newJava[classname, argList]</CODE> functions.  These call Java
   constructors with the specified arguments.  If the constructor takes a
   single argument, <CODE>argList</CODE> can be a single value, otherwise it
   should be an array of values.  The following creates a new Frame and calls
   some methods on the Frame to display it.  Note that the method calls
   require square brackets.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">f = newJava["javax.swing.JFrame", "Frink Rules!"]<BR>
    f.setSize[200,200]<BR>
    f.show[]<BR>
    f.toFront[]</CODE>
  </P>

  <P>
   Arrays of Java objects, including primitives, can be constructed with the
   <CODE>newJavaArray[classname, length]</CODE> method.  The classname should
   be a string containing either be a fully-qualified classname
   (e.g. <CODE>"java.util.Hashtable"</CODE>) or a primitive type name,
   (e.g. <CODE>"int"</CODE> or <CODE>"double"</CODE>).
  </P>

  <P>
   The methods on a Java object can be listed using the
   <CODE>methods[<I>obj</I>]</CODE> function:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">
    f = newJava["javax.swing.JFrame", [] ]<BR>
    sort[methods[f]]
   </CODE>
  </P>


  <H3><A NAME="CallingStaticJavaMethods">Calling Static Java Methods</A></H3>
  <P>
   If you don't have an instance of the class, you can call static methods in
   Java classes using the <CODE>callJava[classname, methodname, argList]</CODE>
   function.  The following uses the <CODE>java.lang.Math</CODE> class to
   generate a random number.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">n = callJava["java.lang.Math", "random", [] ]</CODE><BR>
   <CODE CLASS="output">0.38102192379837</CODE>
  </P>

  <P>
   Lame example, huh?  Especially when Frink can already generate random
   numbers.  The same syntax can be used to get a database driver, or
   something more interesting.
  </P>

  <H3><A NAME="AccessingStaticJavaFields">Accessing Static Java Fields</A></H3>
  <P>
   You can access static variables in a class without having an instance of
   the class by calling the <CODE>staticJava[classname, fieldname]</CODE>
   function.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">green = staticJava["java.awt.Color", "GREEN"]</CODE><BR>
   <CODE CLASS="output">JavaObject:java.awt.Color</CODE>
  </P>

  <P>
   If you've constructed a Frame as in the <A
    HREF="#CreatingJavaObjects">Creating Java Objects</A> section above, you
   can set its background color by:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">f.setBackground[green]</CODE>
  </P>

  <P>
   Now go wire all your Java code into Frink.  At the moment, not all Frink
   types are mapped to Java types.  If there's a mapping that you need, please
   let me know.
  </P>
  
  <H2><A NAME="EmbeddingFrink">Embedding Frink</A></H2>
  <P>
   Not only can you call Java from Frink, but you can call Frink from Java.
   It's quite easy to embed a Frink parser into any Java program and give
   those programs all of the power of Frink.  It can take just a few lines of
   Java:
  </P>

  <P CLASS="code">
   <CODE class="input">String results;<BR>
    Frink interp = new Frink();<BR>
    // Enable security here?  Currently commented-out.<BR>
    // interp.setRestrictiveSecurity(true);<BR>
    <BR>
    try<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;results = interp.parseString("2+2");<BR>
    }<BR>
    catch (frink.errors.FrinkEvaluationException fee)<BR>
    {<BR>
    &nbsp;&nbsp;&nbsp;// Do whatever you want with the exception<BR>
    }<BR>
   </CODE>
  </P>

  <P>
   <B>Warning</B>: Frink is a Turing-complete programming language, and
   <CODE>parseString()</CODE> evaluates a string as a complete program.  A
   Frink interpreter normally has the ability to read your filesystem, call
   arbitrary Java code, execute infinite loops, allocate infinite amounts of
   memory, write large amounts of output, and do other things which may
   compromise your security.  Thus, if you're taking input from
   untrusted users, it's critical to call:

  <P CLASS="code">
   <CODE><I>interp</I>.setRestrictiveSecurity(true);</CODE>
  </P>

  <P>
   before parsing any user input.  This will enable the highest
   level of security, prohibiting all untrusted actions.
  </P>
  
  <P>
   There are more methods for calling Frink from within a Java program.  One
   of the major problems is that converting from Frink types to Java types is
   almost always a narrowing operation.
  </P>

  <P>
   For example, if you try to put a Frink value into a Java integer:
  </P>

  <UL>
   <LI>It could be too large.

   <LI>It could be a non-integer (rational number, floating point).

   <LI>It could be complex.
    
   <LI>It may have wrong unit types.

   <LI>It could be something else like a String or an Object.
  </UL>

  <P>
   As a result, all of these interface methods throw a variety of exceptions.
  </P>

  <P>
   For more information, see the javadocs about <A HREF="integrate/">Frink's
    integration methods,</A> especially the <CODE>Frink</CODE> class.
  </P>

  <P>
   If you're interested in integrating Frink into your company's products,
   please contact <A HREF="mailto:eliasen@mindspring.com">Alan Eliasen</A>.
  </P>
   
  <H2><A NAME="SampleCalculations">Sample Calculations</A></H2>
  <P>
   The following sections demonstrates some of the real-world calculations I've
   made with Frink.
  </P>

  <H3><A NAME="MassAndVolume">Mass and Volume</A></H3>
  <P>
   Let's say you wanted to fill your bedroom up with water.  How much water
   would it take?  Let's say your room measures 10 feet by 12 feet wide by
   8 feet high.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">10 feet 12 feet 8 feet -> gallons</CODE><BR>
   <CODE CLASS="output">552960/77 (approx. 7181.298701298701)</CODE>
  </P>

  <P>
   It would take approximately 7181 gallons to fill it.  Note that you get
   both an exact fraction and an approximation.  (If you don't want to see the
   fraction, put a decimal point in any of the numbers, like 10. or 10.0.)
   How much would that weigh, if you filled it with water?  Frink has the unit
   "water" which stands for the density of water.
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">10. feet 12 feet 8 feet water -> pounds</CODE><BR>
   <CODE CLASS="output">59930.84215309883</CODE>
  </P>

  <P>
   So it would weigh almost 60,000 pounds.  What if you knew that your floor
   could only support 2 tons?  How deep could you fill the room with water?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">2. tons / (10 feet 12 feet water) -> feet</CODE><BR>
   <CODE CLASS="output">0.5339487791320047</CODE>
  </P>

  <P>
   So you could only fill it about 0.53 feet deep.  It'll be a pretty sad pool
   party.
  </P>

  <H3><A NAME="Liquor">Liquor</A></H3>
  <P>
   You can set variables on the fly, by using the assignment
   <CODE>=</CODE> operator.  Let's say you want to define a new unit
   representing the amount of alcohol in a can of (quality) 3.2 beer.  Keep in
   mind that 3.2 beer is measured by alcohol/weight, while almost all other
   liquors (and many beers) are usually measured in alcohol/volume.  The
   density ratio between water and alcohol is given by:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">water/alcohol</CODE><BR>
   <CODE CLASS="output">1.267</CODE>
  </P>

  <P>
   Water is thus 1.267 times denser than alcohol.  3.2 beer (measured by
   weight) is thus actually 4.0 percent alcohol as measured by volume.  Now
   let's set that variable in terms of a beer's density of alcohol per volume
   so we can compare:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">beer = 12 floz 3.2 percent water/alcohol</CODE>
  </P>

  <P>
   Then, you wanted to find out how many beers a big bottle of champagne is
   equal to:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">magnum 13.5 percent -&gt; beer</CODE><BR>
   <CODE CLASS="output">14.07</CODE>
  </P>

  <P>
   You probably don't want to drink that whole bottle.  Now let's say you're
   mixing Jungle Juice (using a 1.75 liter bottle of Everclear (190 proof!))
   and Kool-Aid to fill a 5-gallon bucket (any resemblance to my college
   parties is completely intentional.)  What percent alcohol is that stuff?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">junglejuice = 1.75 liter 190 proof / (5 gallon)<BR>
    junglejuice -&gt; "percent"</CODE><BR>
   <CODE CLASS="output">8.78372074090843481138500000 percent</CODE>
  </P>

  <P>
   It's really not <EM>that</EM> strong.  About 8.8%.  But if you drink 5 cups
   of that, at 12 fluid ounces each, how many beers have you had?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">5 12 floz junglejuice -&gt; "beer"</CODE><BR>
   <CODE CLASS="output">10.832 beer</CODE>
  </P>

  <P>
   Maybe that's why people were getting punched in the head.  <I>QED.</I>
  </P>

  <H3><A NAME="MoreLiquor">More Liquor</A></H3>
  <P>
   Some more useful calculations, most thanks to the lovely Steve Clymer:
  </P>

  <P>
   How many cases in a keg?  (A keg is a normal-sized keg, what those in the
   beer industry would call a "half barrel," or <CODE>1/2 beerbarrel</CODE> in
   Frink notation.  I don't think they sell full barrels.  I've never seen
   one.  It would weigh 258 pounds.  A "pony keg" is a "quarter barrel" or, in
   Frink notation, <CODE>ponykeg</CODE> or <CODE>1/4 beerbarrel</CODE>)
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">keg -&gt; case</CODE><BR>
   <CODE CLASS="output">62/9 (approx. 6.888888888888889)</CODE>
  </P>

  <P>
   How many 12 fluid ounce drinks (<I>i.e.</I> cans o' beer) in a keg?
  </P>
   
  <P CLASS="code">
   <CODE CLASS="input">keg -&gt; 12 floz</CODE><BR>
   <CODE CLASS="output">496/3 (approx. 165.33333333333334)</CODE>
  </P>

  <P>
   What is the price in dollars per fluid ounce of alcohol when buying a keg of
   3.2 beer?  (Remember that 3.2 beer is measured in alcohol/weight, so we
   correct by the density ratio of <CODE>water/alcohol</CODE> to get alcohol by
   volume:)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">(60 dollars)/(keg 3.2 percent water/alcohol) -&gt; "dollars/floz"</CODE><BR>
   <CODE CLASS="output">0.74593 dollars/floz</CODE>
  </P>

  <P>
   A bottle of cheap wine?  (A "winebottle" is the standard 750 ml size.)
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">(6.99 dollars)/(winebottle 13 percent) -&gt; "dollars/floz"</CODE><BR>
   <CODE CLASS="output">2.12 dollars/floz</CODE>
  </P>

  <P>
   A big plastic bottle of really bad vodka?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">(13.99 dollars)/(1750 ml 80 proof) -&gt; "dollars/floz"</CODE><BR>
   <CODE CLASS="output">0.59104811225625 dollars/floz</CODE>
  </P>

  <H3><A NAME="MovieMagic">Movie Magic</A></H3>
  <P>
   In the movie <I>Independence Day</I>, the alien mother ship is said to be
   500 km in diameter and have a mass 1/4 that of earth's moon.  If the mother
   ship were a sphere, what would its density be?  (The volume of a sphere is
   4/3 pi radius<SUP>3</SUP>)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1/4 moonmass / (4/3 pi (500/2 km)^3) -&gt; water</CODE><BR>
   <CODE CLASS="output">280.68</CODE>
  </P>

  <P>
   This makes the ship <EM>280 times</EM> denser than water.  This is 36 times
   denser than iron and more than 12 times denser than any known element!  As
   the ship is actually more a thin disc than a sphere, it would actually be
   even denser.  Since it contains lots of empty space, parts of it would have
   to be much, much denser.
  </P>

  <P>
   If the object is this dense and has such a large mass, what is its surface
   gravity?  Surface gravity is given by G mass / radius<SUP>2</SUP>, where G
   is the gravitational constant (which Frink knows about):
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">G 1/4 moonmass / (500/2 km)^2 -&gt; gravity</CODE><BR>
   <CODE CLASS="output">2.000079</CODE>
  </P>

  <P>
   The surface gravity of the spaceship is thus at least <EM>twice</EM>
   earth's gravity--and that's on the rim where gravity is weakest.  It
   would actually be much higher since it's much, much flatter than a sphere.
   I hope you're not the alien that has to go outside and paint it.
  </P>
  
  <H3><A NAME="FiscalCalculations">Fiscal Calculations</A></H3>
  <P>
   You can calculate the day that your company will run out of cash, based on
   their financial statements.  The following is an example for a real company,
   based on SEC filings, which read as the following:
  </P>

  <TABLE BORDER="1" SUMMARY="Sample Financial Data">
   <CAPTION>Cash and Cash Equivalents (in thousands)</CAPTION>
   <TR><TH>December 31, 2000<TH>June 30, 2001
   <TR><TD>$86,481<TD>$41,601
  </TABLE>

  <P>
   To make this more readable, you can define variables to hold values:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">burnrate = (#2001-06-30# - #2000-12-31#) / ((86481 - 41601) thousand dollars)</CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="input">burnrate -&gt; dollars/day</CODE><BR>
   <CODE CLASS="output">248012.89431247435 </CODE>
  </P>

  <P>
   You can calculate the number of days until the money runs out at this rate:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">41601 thousand dollars / burnrate -&gt;
    "days"</CODE><BR> 
   <CODE CLASS="output">167.7372 days</CODE>
  </P>

  <P>
   Using date/time math, starting from the last report date (June 30,
   2001) you can find out the exact date this corresponds to:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#2001-06-30# + 41601 thousand dollars /
    burnrate</CODE><BR>
   <CODE CLASS="output">AD 2001-12-14 04:41:38.101 PM (Fri) Mountain Standard Time</CODE>
  </P>

  <P>
   Just in time to see the cinema release of the first <I>Lord of the
   Rings</I> movie with your last six bucks.  Will they know it's
   Christmas Time at all?
  </P>


  <H3><A NAME="Ouch">Ouch!</A></H3>
  <P>
   At the moment, I'm watching CNN which is discussing some land-mines used in
   Afghanistan.  They showed a very small mine (about the size of a bran
   muffin) containing "51 grams of TNT" and they asked how much destructive
   force that carries.  Frink's data file includes how much energy is in a
   mass of TNT, specified by the unit "TNT".  How many feet in the air could
   51 grams of TNT throw me, assuming perfect efficiency, and knowing
   <CODE>energy = mass * gravity * height</CODE>?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">51 grams TNT -&gt; 185 pounds gravity feet</CODE><BR>
   <CODE CLASS="output">937.7628167428616 </CODE>
  </P>

  <P>
   Yikes.  937 feet.  But the only difference between explosives and other
   combustible fuels is the rapidity of combustion, not in the quantity of
   energy.  How much gasoline contains the same amount of energy?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">51 grams TNT -&gt; "teaspoons gasoline"</CODE><BR>
   <CODE CLASS="output">1.2903255 teaspoons gasoline</CODE>
  </P>

  <P>
   1.29 teaspoons?  That's not much at all.  You're buying a huge amount of
   energy when you fill up your car.
  </P>

  
  <H3><A NAME="SnipingEBayAuctions">Sniping eBay Auctions</A></H3>
  <P>
   I need a monocle, but I don't want to pay a lot for it.  The eBay monocle
   auction ends in 7 hours and 44 minutes... what time do I need to set the
   alarm clock for to remind me?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">now[] + 7 hours + 44 min</CODE><BR>
   <CODE CLASS="output">AD 2001-11-17 02:13:51.934 PM (Sat) Mountain Standard
    Time</CODE>
  </P>

  <P>
   <B>Epilogue 2001:</B> I didn't get the damned monocle.
  </P>

  
  <H3><A NAME="JunkyardWars">Junkyard Wars</A></H3>
  <P>
   I can't watch
   <A HREF="http://tlc.discovery.com/fansites/junkyard/junkyard.html">Junkyard
   Wars</A> (or lots of other television shows) without having Frink at my
   side.  This week the team has to float a submerged half-ton Cooper
   Mini... how many oil barrels will they need to use as floats?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">half ton -&gt; barrels water</CODE><BR>
   <CODE CLASS="output">2.8530101742118243</CODE>
  </P>

  <P>
   They're trying to hand-pump air down to the barrels, submerged "2
   fathoms" below the water.  If the guy can sustain 40 watts of pumping
   power, how many minutes will it take to fill the barrel?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">2 fathoms water gravity barrel -&gt; 40 watts minutes</CODE><BR>
   <CODE CLASS="output">2.376123072093987</CODE>
  </P>

  <P>
   And how many food Calories (a food Calorie (with a capital 'C') equals 1000
   calories with a small 'c') will he burn to fill a barrel?
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">2 fathoms water gravity barrel -&gt; Calories</CODE><BR>
   <CODE CLASS="output">1.3620653895637644</CODE>
  </P>

  <P>
   Better eat a Tic-Tac first.
  </P>

  <H3><A NAME="BodyHeat">Body Heat</A></H3>
  <P>
   I've seen lots of figures about how much heat the human body produces.  You
   can easily calculate the upper limit based on how much food you eat a day.
   Say, you eat 2000 Calories a day (again, food Calories with a capital "C"
   are equal to 1000 calories with a little "c".)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">2000 Calories/day -&gt; watts</CODE><BR>
   <CODE CLASS="output">96.91666666666667</CODE>
  </P>

  <P>
   So, your average power and/or heat output is slightly less than a 100-watt
   bulb.  (Note that your heat is radiated over a much larger area so the
   temperature is much lower.)  Many days I could be replaced entirely with a
   100-watt bulb and have no discernible effect on the universe.
  </P>

  <H3><A NAME="MicrowaveCookery">Microwave Cookery</A></H3>
  <P>
   I'm heating up yummy mustard greens in my microwave, but I don't want to
   overheat them.  I just want to warm them up.  If I run my 1100 watt
   microwave for 30 seconds, how much will their temperature increase?  I have
   a big 27 ounce (mass) can, and I'll assume that their specific heat is about
   the same as that of water (1 calorie/gram/degC):
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1100 W 30 sec / (27 oz 1 calorie/gram/degC) -&gt; degF</CODE><BR>
   <CODE CLASS="output">18.5350</CODE>
  </P>

  <P>
   30 seconds should raise the temperature by no more than 18 degrees
   Fahrenheit, assuming perfect transfer of microwave energy to heat.
  </P>

  <P>
   Knowing this, I could see how efficiently my microwave <EM>actually</EM>
   heats food.  I could heat a quantity of water and measure the temperature
   change in the water.  I'll do that sometime if I can find my good
   thermometer.
  </P>

  <H3><A NAME="Superman">Why is Superman so Lazy?</A></H3>
  <P>
   Superman is always rescuing school buses that are falling off of cliffs,
   flying to the moon, lifting cars over his head, and generally showing off.
   So why does he still allow so many accidents to happen?  Shouldn't he be
   able to rescue <EM>everybody</EM> who has a Volkswagen parked on their
   chest?
  </P>

  <P>
   While searching for answers, I found out three interesting things about
   Superman:
  </P>

  <OL>
   <LI>He's 6 feet 3 inches tall.
   <LI>He weighs 225 pounds.
   <LI>He gets his strength from being charged up with solar energy.
  </OL>

  <P>
   This is enough information to find some answers.  Frink has units called
   <CODE>sunpower</CODE> (the total power radiated by the sun) and
   <CODE>sundist</CODE> (the distance between the earth and the sun.)  Thus,
   we can find the sun's power that strikes an area at the distance of the
   earth (knowing the surface area of a sphere is 4 pi radius<SUP>2</SUP>):
  </P>

  <P CLASS="code">
   <CODE CLASS="input">earthpower = sunpower / (4 pi sundist^2)</CODE>
  </P>

  <P>
   This is about 1372 watts per square meter.  Superman is a pretty big
   guy--let's say the surface area he can present to the sun is 12 square
   feet.  (This is probably a bit high--it makes him an average of 23 inches
   wide over his entire height.)  This allows Superman to charge up at a power
   of:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">chargerate = earthpower 12 ft^2</CODE><BR>
   <CODE CLASS="input">chargerate -&gt; watts</CODE><BR>
   <CODE CLASS="output">1530.1602</CODE><BR>
  </P>

  <P>
   Superman thus charges up at the rate of 1530 joules/sec or 1530 watts.  At
   this rate, how long does he have to charge up before he can lift a 2 ton
   truck over his head?  (Knowing energy = mass * height * gravity)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">2 ton 7 feet gravity / chargerate -&gt; sec</CODE><BR>
   <CODE CLASS="output">24.80975</CODE><BR>
  </P>

  <P>
   So, charging up for 25 seconds allows him to save one dumb kid who is acting
   as a speed bump.  So his power is huge but not infinite.  He couldn't
   sustain a higher rate (unless he showed off less by lifting the car only a
   foot or two.)  Lifting a truck every 30 seconds or so isn't bad,
   though.  He could be saving a lot more people.  So why doesn't he?
  </P>

  <P>
   Well, we've all seen the movie.  He's using his super-powers to pick up
   chicks.  Literally.  Superman decides to take a break from saving lives and
   takes Lois Lane up in the sky for a joyride.  So how long does he have to
   charge up with solar energy to fly himself and Lois Lane (let's say she
   weighs 135 pounds) up to 15,000 feet?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">(225 + 135) pounds 15000 feet gravity / chargerate -&gt; minutes</CODE><BR>
   <CODE CLASS="output">59.809235</CODE><BR>
  </P>

  <P>
   So, Superman has to charge up with solar energy for an <EM>hour</EM> to
   cart Lois up there.  With the same energy, he could have saved over 120
   trapped kids.  Keep in mind that Lois could do her part, too.  If she left
   her purse behind or didn't weigh as much, he'd have more energy left over
   to save people.  If she would manage to shed just two pounds of cargo
   weight, Superman would have enough energy to save another kid's life.
  </P>

  <P>
   Sure, he's a great guy, and, sure, he's the Defender of Truth, Justice, and
   the American Way, but can't he find a better use for his super-powers than
   schlepping some shiksa into the stratosphere?  Shovel my walk, he could, in
   3 seconds--and me with the sciatica.
  </P>

  <H3><A NAME="FartJokes">Fart Jokes</A></H3>
  <P>
   I received one of those <A
   HREF="http://www.mapkreke.com/articles/facts.php">endlessly-forwarded
   e-mails</A> of dubious but "interesting facts" which said "if you fart
   continuously for 6 years and 9 months, you'll have enough gas to create the
   equivalent of an atomic bomb."  Hee hee.  Cute.  (Thanks to Heather May
   Howard... being unable to easily calculate the veracity of this statement
   was one of the primary influences that showed how existing programs were
   too limited and inspired the creation of Frink.)  But I didn't believe it
   and wanted to check it.  The Hiroshima bomb had a yield of 12.5 kilotons of
   TNT, which is a very small bomb by today's standards.  How many horsepower
   would that be?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">12.5 kilotons TNT / (6 years + 9 months) -&gt; horsepower</CODE><BR>
   <CODE CLASS="output">329.26013859711395</CODE>
  </P>

  <P>
   Can <EM>you</EM> produce a 329-horsepower blowtorch of a fart?  I doubt it.
   That's the power produced by a Corvette engine running just at its melting
   point.  A one-second fart with that much power could blow me 1000 feet
   straight up.  To produce that kind of energy, how much food would you have
   to eat a day?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">12.5 kilotons TNT / (6 years + 9 months) -&gt; Calories/day</CODE><BR>
   <CODE CLASS="output">5066811.55086559</CODE>
  </P>

  <P>
   Ummm... can <EM>you</EM> eat over 5 million Calories a day?  (Again, note
   that these are <EM>food</EM> Calories with a capital 'c' which are equal to
   1000 calories with a small 'c'.)  If you were a perfect fart factory,
   converting food energy into farts with 100% efficiency, and ate a normal
   2000 Calories/day, how many years would it <EM>really</EM> take?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">12.5 kilotons TNT / (2000 Calories/day) -&gt; years</CODE><BR>
   <CODE CLASS="output">17100.488984171367</CODE>
  </P>

  <P>
   17,000 years is still a huge underestimate; I don't know how much of your
   energy actually goes into fart production.  Oh well.  To continue the
   calculations, let's guess your butthole has a diameter of 1 inch (no,
   <EM>you</EM> go measure it.)  Let's also guess that the gas you actually
   produce in a fart is only 1/10 as combustible as pure natural gas.  What
   would be the velocity of the gas coming out?
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">12.5 kilotons TNT / natural_gas / (6 years + 9 months)
    / (pi (.5 in)^2) 10 -&gt; mph</CODE><BR>
   <CODE CLASS="output">280.1590446203110</CODE>
  </P>

  <P>
   Nobody likes sitting next to a 280-mile-per-hour fart-machine.
   <I>Lesson:</I> Even the smallest atomic bombs are <EM>really
   unbelievably</EM> powerful and whoever originally calculated this isn't any
   fun to be around if they really fart that much.
  </P>

  <P>
   Fart jokes.  Sheesh.  If Frink isn't a huge success, it's not because I
   didn't pander to the Lowest Common Denominator.
  </P>

  <H3><A NAME="AdvancedFarting">Advanced Farting</A></H3>
  <P>
   The above order-of-magnitude estimate shows how far off the mark that the
   fart e-mail was.  Not content with that, I found some medical studies that
   allowed me to do a more detailed analysis of the average person's available
   fart energy.
  </P>

  <P>
   What do you think are the most flammable gases in a fart?  Most people
   think it's methane, but I found some medical studies that disprove this.
   Most people hardly have <EM>any</EM> methane in their intestines.  For
   example, one study stated that only 4 out of 11 people had any detectable
   methane in their intestines!  So what's the rest of the gas?
  </P>

  <TABLE BORDER=1 CELLSPACING=5 SUMMARY="Gases Present in Human Intestines by Volume">
    <TR><TH>Gas<TH>Percent by Volume
    <TR><TD>Nitrogen<TD>64%
    <TR><TD>Carbon Dioxide<TD>14%
    <TR><TD>Hydrogen<TD>19%
    <TR><TD>Methane<TD>3.2%
    <TR><TD>Oxygen<TD>0.7%
  </TABLE>

  <P>
   These studies also note that the average person has 100 milliliters of gas
   is present in their intestinal tract at any given time.  The average person
   expels 400-2000 ml of gas daily (and I'm not talking about through the
   mouth and nose.)
  </P>

  <P>
   Okay, that's almost enough information to figure out available fart energy.
   Now all we need to know is the energy of combustion of the flammable gases.
   Of the above, only hydrogen and methane are readily combustible.  Looking
   up their energies of combustion:
  </P>
  
  <TABLE BORDER=1 CELLSPACING=5 SUMMARY="Combustion energy of gases in human intestine">
    <TR><TH>Gas<TH>Energy of Combustion in kJ/mol
    <TR><TD>Hydrogen (H<SUB>2</SUB>)<TD>285.8
    <TR><TD>Methane (CH<SUB>4</SUB>)<TD>890.8
  </TABLE>

  <P>
   Okay, that's plenty enough information to find out how much energy is
   released in a day of farting!  Say you're on the farty end of the scale,
   and you produce the 2000 ml of gas each day.
  </P>

  <P>
   Note that the energies above are given in kJ/mol, but we have volumes in
   milliliters.  As you may have learned in chemistry class, a mole of any gas
   at standard temperature and pressure takes up the same volume.  Frink knows
   this as <CODE>molarvolume</CODE>.
  </P>

  <P>
   The total energy in the hydrogen (keeping in mind that hydrogen makes up
   19% of the 2000 ml volume) is given by:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">h2energy = 2000 ml / molarvolume mol * 19 percent * 285.8 kJ/mol</CODE><BR>
   <CODE CLASS="output">4845.3656205695224816 m^2 s^-2 kg (energy)</CODE>
  </P>

  <P>
   The combustible hydrogen thus produces 4800 joules (per day.)  Now, for the
   methane, which makes a smaller percentage, but releases more energy per
   mole:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">methaneenergy = 2000 ml / molarvolume mol * 3.2 percent * 890.8 kJ/mol</CODE><BR>
   <CODE CLASS="output">2543.5537223989278488 m^2 s^-2 kg (energy)</CODE>
  </P>

  <P>
   The energy in the combustible methane is thus about 2500 joules (per day),
   about half the energy produced from the hydrogen.  Thus, the grand total of
   energy produced by combustible farts by a farty person in a day, in food
   Calories (with a capital C, remember--these are what a physicist would call
   a kilocalorie) is:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">methaneenergy + h2energy -&gt; Calories</CODE>
  </P>

  <P>
   Which gives a result of about 1.76 Calories/day of energy available from
   burning your farts.  (About 1.16 Calories from hydrogen, and about 0.60
   Calories from methane.)  This is out of the 2000 Calories that an average
   person eats a day.  Or, one part in about 1133 of the energy in the food
   you eat is available in fart energy, (again, for a gassy person.)
  </P>

  <P>
   Thus, a good estimate to the problem stated above is that a real (gassy)
   human would need to save their farts for:

  <P CLASS="code">
   <CODE CLASS="input">12.5 kilotons TNT / ((methaneenergy + h2energy) / day)
    -&gt; years</CODE><BR>
   <CODE CLASS="output">1.9379377133697419931e+7</CODE>
  </P>

  <P>
   or about <EM>19 million years</EM> to make the equivalent of the energy in
   a (small) atomic bomb!  So the estimate given in that e-mail is off by a
   factor of at least 2.8 million!
  </P>

  <P>
   Now, you know the true facts about farts.  Frink is now complete, and I
   couldn't be prouder.  Umm... thanks, Heather May.
  </P>

  <H3><A NAME="MoreIncorrectFacts">More Incorrect Facts</A></H3>
  <P>
   That e-mail has a higher density of incorrect facts than just about
   anything I've seen.  Below are several more examples.
  </P>

  <H4><A NAME="QE2">QE2</A></H4>
  <P>
   "The cruise liner, Queen Elizabeth II, moves only six inches for each gallon
   of diesel that it burns."
  </P>

  <P>
   From <A HREF="http://news.bbc.co.uk/1/hi/uk/319027.stm">a page of
   facts about the QE2,</A> we find that the ship consumes 18 tons of fuel per
   hour at a service speed of 28 knots.  By legislation in many areas, diesel
   fuel must have a density no higher than 0.85 kg/liter (if it were watered
   down, it would be higher.)
  </P>

  <P CLASS="code">
   <CODE CLASS="input">18 tons/hour / (28 knot) / (.85 kg/liter) -&gt; feet/gallon</CODE><BR>
   <CODE CLASS="output">Warning: reciprocal conversion<BR>
    33.52338503156235</CODE>
  </P>

  <P>
   They're very, very wrong.  It actually travels about 33.5 feet per gallon,
   or 157 gallons/mile.  They're only off by a factor of 67.  Still not great
   gas mileage, though.
  </P>

  <H4><A NAME="HamburgersAndCars">Hamburgers and Cars</A></H4>
  <P>
   The same e-mail states "pound for pound, hamburgers cost more than new
   cars."
  </P>

  <P>
   Let's see... let's try with a medium-expensive, light car.  A
   2001 Corvette Z06 weighs 3,115 pounds and costs $48,055.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">(48055 dollars) / (3115 lb) -&gt; dollars/lb</CODE><BR>
   <CODE CLASS="output">1373/89 (approx. 15.426966292134832)</CODE>
  </P>

  <P>
   I know <EM>I</EM> don't pay $15/lb for hamburger.
  </P>

  <P>
   Let's try with a light, very cheap car.  A quick lookup showed that a 2001
   Hyundai Accent costs $10,184 and weighs 2255 pounds.  That's still $4.51 a
   pound.  Do <EM>you</EM> pay that much for hamburger?  Maybe a finished
   hamburger in a good restaurant, certainly not for hamburger.  This is
   deceptive if not outright wrong.
  </P>

  <H4><A NAME="GetTheProvisions">"Get The Provisions..."</A></H4>
  <P>
   By the way, did you ever notice that in the movie <I>Stand By Me</I> that
   Gordie <EM>really</EM> gets ripped off for hamburger?  Supposedly set in
   1960, Gordie buys "a buck and a half of hamburger" which is slapped down in
   a tiny wrapper that couldn't contain more than 3/4 of a pound.  Probably a
   half pound--it looks like all wrapper.  (You estimate it.)  Converting to
   modern prices:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1.50 dollars_1960 / (.75 lb) -&gt; dollars/lb</CODE><BR>
   <CODE CLASS="output">26.96</CODE>
  </P>

  <P>
   Gordie paid a modern equivalent of $27/lb for that hamburger.  Perhaps a
   smarter shopper <EM>could</EM> have gotten more for Vern's 6 cents.
  </P>

  <H4><A NAME="Typing">Typing</A></H4>
  <P>
   The same e-mail says "the longest word that can be typed using only the
   left hand is 'stewardesses'."  Well, Frink is good for doing word stuff
   too.  Using the single word list from the 
   <A HREF="http://www.dcs.shef.ac.uk/research/ilash/Moby/">Moby wordlist</A>,
   the following program finds lots of 12-letter alternatives, and several
   longer:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    infile = "<I>path to words file</I>"<BR>
    <BR>
   </CODE>
   <CODE CLASS="comment">// Pattern which matches words containing only the<BR>
   </CODE>

   <CODE CLASS="comment">// characters under the left hand on a QWERTY
    keyboard<BR></CODE>
    <CODE CLASS="input">leftPattern = %r/^[qwertasdfgzxcvb]+$/i<BR>
    <BR>
    </CODE>
   <CODE CLASS="comment">// Pick out words that match the pattern<BR></CODE>
   <CODE CLASS="input">
    matches = select[lines[infile], leftPattern]<BR>
    <BR>
   </CODE>
   <CODE CLASS="comment">// Length sort<BR></CODE>
   <CODE CLASS="input">
    sort[matches, { |a,b| length[a] &lt;=&gt; length[b] } ]<BR>
    <BR>
    for [line] matches<BR>
    &nbsp;&nbsp;&nbsp;println[length[line] + ": $line"]
   </CODE>
  </P>

  <P>
   (Actually, my original program was only 2 lines, but this is easier to
   read.  The program could be written lots of ways.)  Some of the results are:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="output">
    12: stewardesses<BR>
    12: desegregates<BR>
    12: terracewards<BR>
    12: watercresses<BR>
    12: extravasated<BR>
    12: decerebrated<BR>
    12: gazetteerage<BR>
    12: desegregated<BR>
    12: extravagated<BR>
    12: tessaradecad<BR>
    12: resegregated<BR>
    12: reaggregated<BR>
    12: reverberated<BR>
    12: reverberates<BR>
    12: reasseverate<BR>
    12: aftereffects<BR>
    13: tesseradecade<BR>
    13: aftercataract<BR>
    13: devertebrated<BR>
    17: redrawerredrawers<BR>
   </CODE>
  </P>

  <P>
   I have no idea what that last word means.
  </P>

  <H3><A NAME="BiblicalReferences">Biblical References</A></H3>
  <P>
   So you want to build an ark, do you?  And not an Ark of the Covenant, but
   the boat.  How bad was that flood?
  </P>

  <P>
   The bible is also quite precise in its measurement of the flood.  Genesis
   7:19-20 states that "And the waters prevailed exceedingly upon the earth;
   and all the mountains, that were under the whole heaven, were covered.
   Fifteen cubits upward did the waters prevail; and the mountains were
   covered."
  </P>

  <P>
   Okay, so the highest mountains of the earth were covered, plus an extra 15
   cubits (approx 27 feet) for good measure.  The current measurements for
   highest mountain is Mt. Everest at 29030.8 feet (according to the highly
   dubious and utterly non-trustable 2002 Guinness Book of World Records.)  I
   know that Everest is growing slowly, (best estimates are 2.4 inches/year)
   so we'll discount for that.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    depth = 29030 feet + 15 biblicalcubits - (2.4 inches/year 4000 years)
   </CODE>
  </P>

  <P>
   About 28257 feet of water.  This was deposited over 40 days.  The rainfall
   was thus:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">rainfall = depth / (40 days)</CODE>
  </P>

  <P>
   Or about 353 inches/hour, or 29 feet/hour.  A good rain around here is
   about an inch an hour.  The very rainiest places on earth like <A
   HREF="http://extremescience.com/wettest.htm">Cherrapunji</A> get about this
   much rain in a <EM>year</EM>.  (I'm campaigning Colorado farmers to sin a
   bit more...)
  </P>

  <H3><A NAME="Emc2">E=mc<SUP>2</SUP></A></H3>
  <P>
   Everyone knows Einstein's E=mc<SUP>2</SUP> equation, but to apply it is
   often very difficult because the units come out so strange.  Let's see, I
   have mass in pounds, and the speed of light is 186,282
   miles/second... ummm... what does that come out to?  In Frink the
   calculation becomes transparently simple.
  </P>

  <P>
   If you took the matter in a teaspoon of water, and converted that to
   energy, how many gallons of gasoline would that equal?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">teaspoon water c^2 -&gt; "gallons gasoline"</CODE><BR>
   <CODE CLASS="output">3164209.862836101 gallons gasoline</CODE>
  </P>

  <P>
   Unbelievable.  The energy in a teaspoon of water, if we could extract it,
   is equal to burning more than 3 <EM>million</EM> gallons of gasoline.
  </P>

  <H3><A NAME="DaysOld">Days Old</A></H3>
  <P>
   The November 2001 edition of <I>Sky &amp; Telescope</I> magazine has a
   charming article called "Stellar Guides for Your Birthday" by Jeff
   A. Farinacci (p. 63), which provides a list of "nearby" stars and their
   distances in light-years or light-days.  This allows you to look at the
   light coming from a star that was emitted the day you were born.  It
   includes a <A
   HREF="http://skyandtelescope.com/resources/software/programs/daysold.bas">28-line
   BASIC program</A> to calculate how many days old you are on a certain date.
   As you know by now, the essential calculation can be done in one line of
   Frink.  For example, the bright star Pollux is about 33.7 light-years away
   (12314 days, based on the Hipparcos satellite's parallax measurement of
   96.74 milliarcseconds) and the light it emitted on the day I was born will
   finally reach earth on the date:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#1969-08-19# + 12314 days</CODE><BR>
   <CODE CLASS="output">AD 2003-05-07 12:00:00.000 AM (Wed) Mountain Daylight Time</CODE>
  </P>

  <P>
   or, to calculate the date directly from the parallax, we can use the
   following, where <CODE>au</CODE> is an astronomical unit (the average
   distance between the earth and the sun,) and <CODE>c</CODE> is the speed of
   light, the values of which are known to Frink:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">#1969-08-19# + au / (96.74 milliarcsec) / c</CODE><BR>
  </P>

  <P>
   This gives the same date as the calculation above (May 7, 2003.)  I was
   amazed to find that the universe has conspired to produce a beautiful
   conjunction on this date.  Pollux will form a straight line with the moon
   and Jupiter in the western sky on that night:
  </P>

  <P>
   <IMG SRC="images/conjunction.png" WIDTH="412" HEIGHT="414"
    ALT="View of the sky on May 7, 2003"><BR>
   (Screenshot courtesy of the wonderful <A
    HREF="http://www.skyviewcafe.com/">Sky View Caf&eacute;</A> applet)
  </P>

  <P>
   (Note:  The three objects aren't as close together as it may look in this
   picture.  The sky is big.)  These screenshots show how it will look at 10 PM
   Mountain Daylight Time.
  </P>

  <P>
   Below is a 45-degree chunk of sky looking due west.  This will give you a
   better idea of how the sky will look as you face west.  You'll probably see
   Pollux and Castor quite clearly.  Castor is the bright star directly
   to the right of Pollux.  Castor and Pollux will appear to make a horizontal
   line at this time.
  </P>

  <P>
   <IMG SRC="images/conjunction2.png" WIDTH="437" HEIGHT="397"
    ALT="45-degree view of the sky looking West during conjunction">
  </P>

  <P>
   It shouldn't be hard to find.  Look west.  The moon will be the brightest
   object in the sky, and Jupiter will be the second-brightest.  Follow the
   line from Jupiter to the moon.  Pollux is by far the brightest star along
   that line (it has a dimmer twin Castor, which will be on the right.)  The
   moon is in the center and Jupiter and Pollux are equal distances on either
   side of the moon.  Follow the wise men.  Bring gold.  I already have lots
   of frankincense and myrrh.
  </P>

  <P>
   <B>Alan's Editorializing</B>: This article also underlines one of the
   things I am growing to miss in most physical equations and all programs
   written in other languages... the loss of units.  Everything is an
   unexplained number, and inscrutable conversion factors are strewn liberally
   throughout.  This is exactly the type of thing that Frink was designed to
   address.  For example, a line in the article indicates:
  </P>

  <P>
   <I>The parallax-to-distance formula is simple: d=1/p, where p is the
    parallax angle in arcseconds and d is the distance in parsecs (3.26
    light-years).</I>
  </P>

  <P>
   This description is unfortunate.  1 divided by an angle (which is
   dimensionless) is still dimensionless, <EM>not</EM> a distance.  This is
   better specified by saying that the formula is distance=(orbital
   radius)/(parallax angle).  Since the parallax angles are specified with
   respect to Earth's orbital radius, you can write the equation as
   <CODE><I>d</I> = au/<I>p</I></CODE>. "<CODE>au</CODE>" is an astronomical
   unit, the average distance between the Earth and the Sun, which is included
   in Frink's standard data file.  Then, p can be specified in <EM>any</EM>
   angular units and distance can be automatically converted to light-years or
   light-days instead of parsecs (or into feet, if you want).  As always,
   <EM>Frink makes the units of measurement transparent, and helps to ensure
   that your calculations make sense.</EM> So, using the <A
   HREF="http://astro.estec.esa.nl/Hipparcos/">Hipparcos</A> satellite's
   measurements for the parallax of the closest star, Proxima Centauri (okay,
   second-closest, smartypants):
  </P>

  <P CLASS="code">
   <CODE CLASS="input">au / (.7723 arcsec) -&gt; lightyears</CODE><BR>
   <CODE CLASS="output">4.223182420960891 </CODE>
  </P>

  <P>
   This way, we learn something about the <EM>nature</EM> of the physical
   calculation which we can generalize, rather than having an equation that
   only works with one weird system of measurement.  (Although professional
   astronomers like to use parsecs, I think it's a horrible, intentionally
   exclusive, geocentric measurement and they're just being difficult.  There
   was even an article in <I>Sky &amp; Telescope</I> a while back which
   intimated that some astronomers would sneer and giggle at you if you used
   light-years in a professional publication or speech.)  Using our deeper
   knowledge, we can see how much more accurate the Hipparcos satellite would
   be if it were put into Jupiter's orbit, or how accurate its instruments
   need to be to achieve a certain accuracy in distance measurements.  We've
   learned something more general.
  </P>

  <P>
   Below is the same program as in Sky &amp; Telescope, but more flexible.
   You can enter the exact second of your birth using <A
   HREF="/frinkdata/dateformats.txt">any of the date formats that Frink
   recognizes.</A> You enter the desired age as "12314 days" or "1 billion
   seconds" or any other duration.
  </P>

  <P CLASS="code">
   <CODE CLASS="input">
    str = input["Enter your birthdate: "]<BR>
    birthdate = eval["# $str #"]  // Parse as a date<BR>
    str = input["Enter desired age: "] <BR>
    age = eval[str]<BR>
    println["You will be $str old on " + (birthdate + age)]<BR>
   </CODE>
  </P>

  <P CLASS="code">
   <CODE CLASS="output">Enter your birthdate: </CODE>
   <CODE CLASS="input">1969-08-19 04:54 PM Mountain</CODE><BR>
   <CODE CLASS="output">Enter desired age: </CODE>
   <CODE CLASS="input">1 billion seconds</CODE><BR>
   <CODE CLASS="output">You will be 1 billion seconds old on AD 2001-04-27
     06:40:40.000 PM (Fri) Mountain Daylight Time
   </CODE>
  </P>

  <H4>Finding Your Own Star</H4>
  <P>
   Now you want your own star, don't you?  You might take a look at a list of
   the brightest stars in the sky at
   <A
    HREF="http://www.cosmobrain.com/cosmobrain/res/brightstar.html">Cosmobrain</A>
   and look the stars' distances in light-years.  This will give you an idea
   of the bright stars, and give you their Hipparcos catalog numbers.  Using
   the Hipparcos catalog number given in that table, you can look up that star
   from 
   <A HREF="http://astro.estec.esa.nl/Hipparcos/HIPcatalogueSearch.html">this
    Hipparcos search form,</A> find its Geometrical Parallax (field H11, which
   is probably given in milliarcseconds) and plug that number into the
   equation shown above.  At some point, I may make a Frink Server Page that
   automates this.  But you might learn more just by doing the calculations
   yourself.
  </P>

  <P>
   Whether you have a kid who is 8.6 years old (for Sirius which is the
   brightest star in the sky and 3141 light-days away,) someone turning 11.4
   (Procyon), turning 16.8 (Altair) or someone turning 65.1 (Aldebaran,) a
   star is a great gift and  might just start a love of astronomy.  I can't
   promise that the moon and the planets will line up for <EM>them</EM>,
   though.
  </P>

  <P>
   Note that there is some uncertainty in measuring parallaxes, often several
   percent, and thus the dates are somewhat uncertain, so it's a gift you can
   give <EM>any</EM> time around the date.  For example, the standard error
   for the parallax of Pollux is 0.87 milliarcseconds (parallax error is field
   H16 in the Hipparcos catalog, specified in milliarcseconds) which leads to
   an actual date that can vary from around January 17, 2003 to August 27,
   2003 -- a range of over 7 months.  Just have fun and celebrate your stars
   when you want!
  </P>

  <H3><A NAME="ModelSolarSystem">Model Solar System</A></H3>
  <P>
   This one is fun.  I didn't have a grasp of the size difference between the
   Earth and the Moon so I wanted to make a little scale model in my home.  It
   would be best to use spheres of the appropriate sizes, but I don't have
   that many balls.  Instead, I decided to cut circles out of paper.  My
   deciding dimension was the size of the piece of paper I used to cut out the
   pieces.  I could only get a 7-inch diameter circle for the Earth (3.5-inch
   radius), so this defined my scale, which I saved in a variable for use in
   later calculations:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">scale = earthradius / (3.5 inches)</CODE><BR>
   <CODE CLASS="output">7.166851856017998E7 </CODE>
  </P>

  <P>
   The standard data file contains information about the dimensions of the
   planets, <CODE>earthradius</CODE> being one of those.  Now how big should
   the Moon circle be?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">moonradius / scale -&gt; inches</CODE><BR>
   <CODE CLASS="output">0.9547455176283174 </CODE>
  </P>

  <P>
   Okay, using my rolling ruler, I cut out a circle with radius 0.95 inches
   (diameter 1.9 inches).  There's the Moon.  It's interesting to see the
   difference in size between the Earth and Moon:
  </P>

  <P>
   <IMG SRC="images/earthmoon.jpg" WIDTH="280" HEIGHT="210" 
        ALT="Earth-Moon Sizes">
  </P>

  <P>
   Now, to place them properly... how far away should they be at that scale?
  </P>

  <P CLASS="code">
   <CODE CLASS="input">moondist / scale -&gt; feet</CODE><BR>
   <CODE CLASS="output">17.59705489913335 </CODE>
  </P>

  <P>
   Okay, stick the Earth to one wall, and then measure a distance 17.5 feet
   away, and stick the Moon to that.  <EM>Installed!</EM>
  </P>

  <P>
   From each vantage point, you can see how big the other actually looks from
   that distance.  Standing by the Earth, you can see how big the Moon looks
   (you've seen the Moon, but it's a smaller angle than you might guess... the
   Moon really doesn't take up much sky, only about half a degree in
   diameter.)  You can verify this by holding a fingernail out at arm's
   length, comparing it to the size of your Moon model, and then going outside
   and doing the same to the Moon, if you can see it.
  </P>

  <P>
   Now walk over to the Moon and look at the Earth.  It would be pretty big!
   Earth would appear about 3.66 times wider in diameter (in Frink notation,
   <CODE>earthradius/moonradius</CODE>, or 13.4 times larger in area (
   <CODE>pi earthradius^2 / (pi moonradius^2)</CODE> ).
  </P>

  <P>
   Just to verify, I wanted to make sure that the visible angles in my model
   match real life.  The visual angle of an object which does not subtend a
   large angle can be expressed as <CODE>angle = width / distance</CODE>.  The
   angle normally comes out in radians if width and distance are in the same
   units, but this is Frink.  You can get the answer out in degrees, or
   arcminutes if that's where your heart lies:
  </P>

  <P CLASS="code">
   <CODE CLASS="input">1.9 inches / (17.5 feet) -&gt; arcminutes</CODE><BR>
   <CODE CLASS="output">31.10342316424469 </CODE>
  </P>

  <P>
   Yep, that's just the right number of arcminutes.  From Earth, the Sun and
   the Moon both appear just over half a degree in diameter, or about 32
   arcminutes (an arcminute is 1/60 of a degree).  It all works out.  Note
   that in the standard data file, radians are dimensionless units (a radian
   is defined as "1".)  This is because radians are dimensionless units, but
   you can convert values in radians to other angular units.
  </P>

  <P>
   By the way, a more accurate angular formula that is valid for large
   <EM>and</EM> small angles subtended by a sphere with a given radius at a
   specified distance is:
  </P>
  
  <P CLASS="code">
   <CODE CLASS="input">2 arcsin[<I>radius</I>/(<I>radius</I> + <I>distance</I>)] -&gt; degrees</CODE>
  </P>

  <P>
   Note that inverse trigonometric functions (<CODE>arcsin</CODE>,
   <CODE>arccos</CODE>, <CODE>arctan</CODE>) have their output in radians.
   This is easily converted to whatever angular units you want, as above.  You
   don't see that the output is in radians (if you use the standard data file)
   because radians are dimensionless numbers.  You just gotta be a bit careful
   here, or make the minor change in your units file to make radians a
   fundamental dimension.  (Read the documentation in the units file... the
   units file is otherwise radians-correct.)
  </P>
  
  <P>
   <B>Nostalgic Digression:</B> I remember a cool black-and-white movie we saw
   in my Kindergarten class about making a scale model of the solar system.
   It involved a <EM>huge</EM> vertical circular sign representing the Sun
   that somebody had built for the film and a car driving a measured distance
   away to look at it.  (A bit confusing, though.  I remember them saying
   "here we are, 93 million miles away!" and they were still in the same
   park.)  Good stuff, and I'm glad I finally made my own model.  It helps me
   understand how cool the Apollo missions were.  But my enthusiasm is
   tempered by the fact that I'm just now figuring out stuff they tried to
   teach me in Kindergarten.
  </P>

  <P>
   Now go make your own model.  Pick your own scale to fit your surroundings
   and materials.  It's fun.  In my model, Jupiter would have to
   be a sphere 6.59 feet in diameter, placed about 5.5 miles away right now.
   I'll have to get a bigger place.
  </P>

  <P>
   Now that you know how to calculate the size in Frink yourself, I've gone
   ahead and built a Frink Server Page that lets you
   <A HREF="/fsp/solar.fsp"><B>design your own!</B></A>
  </P>

  <P>
   <B>Homework:</B>  In your model, figure and/or plot the following:
  </P>

  <UL>
   <LI>Orbit of the Space Shuttle (about 300 km above the surface of the
    Earth)  Wow.  That's barely up there.
   <LI>Orbit of a geosynchronous satellite (42164 km from the <EM>center</EM>
    of the Earth, or about 22300 miles from the <EM>surface</EM> of the Earth.)
    Stand this far away from the Earth circle... that's how big it would look.
   <LI>The sizes of the Sun, other planets, and their moons.
   <LI>The speed of light in your model.
  </UL>

  <H3><A NAME="MCO">Saving Hundreds of Millions of Dollars</A></H3>
  <BLOCKQUOTE>
   <P>
    "The MCO [Mars Climate Orbiter] MIB [Mishap Investigation Board] has
    determined that the root cause for the loss of the MCO spacecraft was the
    failure to use metric units in the coding of a ground software file,
    "Small Forces," used in trajectory models.  Specifically, thruster
    performance data in English units instead of metric units was used in the
    software application code titled SM_FORCES (small forces)."<BR> --<A
    HREF="http://www.space.com/media/mco_report.pdf">Mars Climate Orbiter
    Mishap Investigation Board, Phase I Report</A>
   </P>
  </BLOCKQUOTE>

  <P>
   This is not to take away from the designers of a wonderfully complex
   spacecraft that can travel to Mars; that's an incredibly difficult problem,
   and I couldn't do it.  However, this is just the type of error that Frink
   was designed to help avoid, and because <EM>I</EM> make these type of
   errors a lot, I've designed this tool to help me.  Frink tracks units
   through <EM>all</EM> calculations and makes conversions between them
   transparent.  This is why I'm working toward making Frink a feasible
   solution for calculations of this type.
  </P>

  <P>
   <B>Update:</B>  I received the following from <A
    HREF="http://www.norvig.com/">Peter Norvig</A>:
  </P>

  <BLOCKQUOTE>
   <P>
    "I ran across Frink, and as a member of the MCO review board, I
    appreciate your efforts.  Note, however that more than just language
    support is necessary.  First, you'd have to have conventions on data
    I/O -- the misinterpreted data was from a file, not from another
    function in the program.  Also, there was an issue of software reuse
    -- the errant portion of the system had been used before on a previous
    mission, and in that case it was used in a non-critical,
    non-navigational way.  It was not properly reviewed because the team
    did not realize that in MCO it became critical."
   </P>
  </BLOCKQUOTE>

  <P>
   The points above are well-taken.  Proper parsing of units can be easily
   achieved in Frink with a simple, appropriate comment in the data file. <A
   HREF="/fsp/colorize.fsp?fileName=unittable.frink">unittable.frink</A> shows
   how Frink can parse a file containing units of measure.  All that is needed
   is to add a <EM>single comment</EM> to the data file that contains the
   units of measure of each data column.  Frink then reads each column with
   the appropriate units of measure and scale, using any units of measure that
   Frink knows about as input, and Frink parses them and works with them
   properly.  See its <A HREF="unittable.txt">sample data file</A>.
  </P>

  <P>
   Frink and its <CODE>eval[x]</CODE> function could always trivially handle
   the case where each number in a file has its units of measure specified
   with the number, e.g. "<CODE>3.5 km/s</CODE>".  That's literally
   <EM>zero</EM> effort to parse with Frink, and is slightly less compact, but
   that's a very small price to pay, compared to mission failure.
  </P>

  <P>
   Of course, there's no simple solution for someone completely not reading
   the specification documents, but the fact that a file completely omits any
   units of measure would be a good warning flag to double-check your sources,
   I'm growing to fear and avoid any system that treats every physical
   measurement as an unexplained dimensionless number, as most programming
   languages have for the past few decades.  We can do better.
  </P>

  <H2><A NAME="ChangingSyntax">Changing Syntax</A></H2>
  <P>
   Keep in mind that the syntax represented in this document <EM>will</EM>
   change as Frink evolves.  The current parser just makes it easier for me to
   test certain features, and I intentionally refuse to spend a lot of time on
   it at this point.  The internals of the language should be the first
   concern, and the external representation is free to change.  Frink should
   be equally usable whether you want to load and save your data in the
   current mathematical notation, in a (LISP-like) prefix notation, in a (HP
   calculator-like) Reverse-Polish postfix notation, from a
   visually-based GUI, in MathML, TeX, XML, or whatever other
   flavor-of-the-month format the kids are crazy about these days.  The
   internals of the language are intentionally agnostic on this point, as they
   should be in a flexible design.
  </P>

  <P>
   On the other hand, I always want to keep Frink easy to use and transparent
   for the quick calculations as it is now.  Turning it into a language that
   forces an encumbering programming paradigm is out of the question.
  </P>

  <P>
   <B>Alan's Unsolicited Advice:</B> Anytime you're involved with a project
   where you hear people saying "we want to use 'X' technology" before they've
   even thought about representing the problem they're trying to solve, look
   up for the cloud of doom, which floats nigh.  It's like hiring a carpenter,
   who, before he knows what you want to make, insists on using
   mortice-and-tenon joints.
  </P>

  <H2><A NAME="Acknowledgements">Acknowledgements</A></H2>
  <P>
   "This product includes software developed by the Apache Software Foundation
   (<A HREF="http://www.apache.org/">http://www.apache.org/</A>)."  
  </P>

  <P>
   They made me say that.  The included part is the nifty <A
    HREF="http://jakarta.apache.org/oro/index.html">ORO</A> regular expression
   library.  I hacked it significantly so that it would compile and run on a
   Java 1.1 platform (so that Frink can be used on small devices running
   PersonalJava 1.1 and run in the JVM in just about any browser out there.)
  </P>

  <P>
   Frink's parser is built using the wonderful
   <A HREF="http://www.jflex.de/">JFlex</A> and
   <A HREF="http://www.cs.princeton.edu/~appel/modern/java/CUP/">JavaCUP</A>.
  </P>

  <H2><A NAME="DonateToFrink">Donate to Frink</A></H2>
  <P>
   If you've gotten this far, hopefully you've seen something you liked.  If
   you find Frink useful, I'd appreciate if you took a look at some of the
   ways you can <A HREF="donate.html">donate to Frink's development</A>.
   Thanks!
  </P>

  <P>
   Please send comments or questions to
   <A HREF="mailto:eliasen@mindspring.com">Alan Eliasen</A>.
  </P>

  <P>
   <A HREF="/">Back to Alan's Home Server</A>
  </P>
 </BODY>
</HTML>

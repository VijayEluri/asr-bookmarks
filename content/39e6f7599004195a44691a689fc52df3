<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html; charset=ISO-8859-1"
 http-equiv="content-type">
  <title>DSL Engine</title>
</head>
<body>
<h1>What is it for?</h1>
&nbsp;Implementing a Domain Specific Languages for small tasks is a
common approach. You may want to restrict the user with very specific
language to extend and script your system, or your problem area could
be well defined using a non-common syntax and semantics, which is not
available in your favourite programming language - in such cases you'd
better implement your own language. It is quite easy, when you start
building languages you will find this work very addictive - but, it is
much better to have an appropriate toolset. DSLengine is not a silver
bullet, not a universal tool - it is just a demonstration of the
approach, based on extending the existing meta-language. Some Scheme
versions have this possibility to be extended: Common Lisp-like
<i>define-macro</i> feature. DSLengine demonstrates the usage of this feature
and a way to implement almost any language you can imagine on top of
Scheme - with all the advantages of the existing and mature
compiler and runtime environment.<br>
<h1>How to get it?</h1>
Just download the latest release from the SF <a
 href="http://sourceforge.net/projects/dslengine/">project page.</a><br>
<br>
<h1>Related stuff?</h1>
The recursive descendant parsing is a well known technique, with many
mature implementations. I recommend to have a look at the <a
 href="http://www.cs.ruu.nl/%7Edaan/parsec.html">Parsec</a>, which is
included in most <a href="http://www.haskell.org/">Haskell</a>
implementations. Some ideas about metaprogramming could be gathered
from <a href="MetaOCaml">MetaOCaml</a> and <a
 href="http://www.haskell.org/">Template Haskell</a>.<br>
<br>

<A href="http://sourceforge.net"> <IMG
src="http://sourceforge.net/sflogo.php?group_id=112027&amp;type=5"
width="210" height="62" border="0" alt="SourceForge.net Logo" /></A>

</body>
</html>

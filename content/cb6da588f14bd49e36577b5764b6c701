<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> <link rel="shortcut icon" href="/m/plaxo/img/favicon.ico" type="image/x-icon"> <title>Plaxo &raquo; A Recipe for OpenID-Enabling Your Site</title> <script src="/m/plaxo/js/layout/layout.js" type="text/javascript" charset="utf-8"></script> <meta name=ROBOTS content=NOARCHIVE> <meta name=description content="Plaxo helps members keep in touch with the people who really matter, helping them to connect, keep each other's contact data up-to-date, and share photos, videos, blogs and more."> <meta name=keywords content="Plaxo, address book, calendar"> <script language=javascript src="/css/m/js/onload.js?"></script><script language=javascript src="/css/m/js/pngfix.js?"></script><script language=javascript>var g_plx_template='';function plxCommonOnLoad(){if(window.doOnload)doOnload()}</script>
 <style> #header .headerText { font-size: 13px; line-height: 44px; color: #fff; float: right; margin-right: 10px; } img { border: 0 none; } .cs_body { background: #fff; margin: 16px auto; text-align: center; width: 980px; } .content_container { width: 760px; margin: 16px auto; text-align: left; } div#error_bar { background: #FFE96C none repeat scroll 0 50%; } div#info_bar { background: #c8e0ff none repeat scroll 0 50%; } img#error_icon, img#info_icon { float: left; height: 52px; margin: -15px 20px 0 110px; width: 58px; } div#error_text, div#info_text { color:#303030; font-size:11px; margin-left:188px; margin-right:20px; padding:6px 0; } .searchBorder input { border-color: #ffffff; } div#error_bar { margin-top: 0; } </style> <script language=javascript src="/css/m/js/corp.js?"></script> <link rel=stylesheet href="/min?g=css_default"> <link rel=stylesheet href="/min?b=m/plaxo/css&amp;f=layout/px4Layout.css"> </head> <body id=oneColumnLayout onload="plxCommonOnLoad()" class="plaxo chromeOn"> <div id=px4header> <div class=px4holder> <div class=px4headerLeft> <div class=logo> <a href="/?src=logo"><img src="/m/plaxo/img/px4/plaxologo.gif"></a> </div> <div class=user> <div class=userRight> <div class="userInfoTop signInHeader">Your Address Book <strong>For Life</strong></div> <div class="userInfoBottom signInHeader"> <a href="/auth">Sign In</a> <span class=spacer>|</span> <a href="/join">Sign Up</a> </div> </div> </div> </div> <div class=px4headerRight></div> <div style="clear: both;"></div> </div> </div> <div class=superBarContainer> </div> <noscript><div id=subHeader><div id=flash class=error>It looks like you have JavaScript disabled. You&rsquo;ll need to <a href="http://www.google.com/support/bin/answer.py?answer=23852" target=_blank>turn it on</a> for many Pulse features to work.</div></div></noscript> <div id=content class="mainContent roundedSmall" style="margin-top:16px;"> <div class=contentTop> <div class="corner cornerTL">&nbsp;</div> <div class="corner cornerTR">&nbsp;</div> </div> <div class=page>
<style type="text/css">
.page .body_content { margin: 1em; }
.body_content a { text-decoration: underline; }
.body_content ul, .body_content ol {
  margin-top: auto;
}
.body_content li {
  margin-top: 1em;
}
.body_content a img {
  border-width: 2px;
  border-style: solid;
}
.page p, .page ul, .page ol {
  margin: 1em 0;
}
.page ul, .page ol {
  padding-left: 40px;
}
.page {
  padding: 1em 0 ;
}
</style>
<div class="body_content">
<h1>A Recipe for OpenID-Enabling Your Site</h1>
<p><em>Prepared by <a href="http://josephsmarr.com">Joseph Smarr</a> at <a href="http://www.plaxo.com">Plaxo</a> on July 18, 2007.</em></p>
<p>This is a step-by-step tutorial guide for implementing <a href="http://openid.net">OpenID</a> consumer-side support with a web site that already has users with accounts. It will explain how to easily let new users sign up for an account on your site using their OpenID URL and how to let existing users attach their OpenID(s) so they can sign in using them.</p>
<p>I developed this guide by talking to fellow OpenID developers at the <a href="http://iiw.windley.com/wiki/Workshop_2007">Internet Identity Workshop</a> and elsewhere, and by <a href="/api/openid">implementing OpenID support for Plaxo</a> using these instructions. I've also&nbsp;posted <a href="http://www.flickr.com/photos/plaxo/sets/72157600872488686/detail/">detailed screenshots</a> of Plaxo's implementation for reference.&nbsp;I've intended for this guide to be clear and complete and to follow best-practices, but if you have any questions or feedback, please let me know at <script language=javascript>ob_male('joseph','plaxo.com');</script> or by posting a comment on <a href="http://blog.plaxo.com">Plaxo's blog</a>.</p>
<p>This guide may look a bit long, but my hope is you can just follow it straight through without thinking much, and you'll be completely done by the time you reach the end! :)</p>
<h2>Overview</h2>
<p><strong>I'm assuming your web site currently has:</strong></p>
<ul>
<li>A user database with rows for each user
<ul>
<li>Each user has a unique internal user ID
<li>Users currently sign in using a username/e-mail and password</li></ul>
<li>A registration flow for signing up new users and getting collecting basic profile info
<li>A signin page for authenticating users
<ul>
<li>Internally you authenticate users based on username/e-mail and password, look up their unique user ID, and use it in the rest of your site</li></ul>
<li>A settings page for users to manage their account info.</li></ul>
<p>If your site doesn't look like this, you should still be able to follow along, but some of the sections may not be relevant to you.</p>
<p><strong>Here's an overview of what you're going&nbsp;to add to your site:</strong></p>
<ol>
<li>A <strong>new database table</strong> to map OpenIDs to your internal user IDs
<ul>
<li>It's a many-to-one relationship (each user can have multiple OpenIDs attached to their account, but a given OpenID can only be claimed by a single user)
<li>This table will be a global registry to look up users by OpenID, so in general you'll need to make it a single shared table for all your users</li></ul>
<li>A small bit of OpenID UI on your <strong>registration page</strong> for new users
<ul>
<li>New users will enter their OpenID, authenticate with their OpenID provider, and return to your registration flow authenticated with any profile info they've chosen to share with your site</li></ul>
<li>A small bit of OpenID UI on your <strong>signin page</strong> for existing users
<ul>
<li>Users that have attached an OpenID to their account will enter their OpenID, authenticate with their OpenID provider, and return to your signin page authenticated. You can then map their OpenID to their user ID and sign them in like you would if they'd entered their username/e-mail and password.</li></ul>
<li>An OpenID <strong>settings page</strong> where users can list, add, and remove the OpenIDs attached to their account</li></ol>
<p><strong>Here's a summary of what you're going to build:</strong></p>
<ol>
<li>An <strong>OpenID database table</strong>
<ul>
<li>Columns: (openid_url, user_id). openid_url is a text&nbsp;string, user_id is whatever you currently use internally to represent users.
<li>primary key on openid_url (unique, for looking up users by OpenID)
<li>index on user_id (for listing all OpenIDs attached to a given user's account)</li></ul>
<li>A new web page / CGI to <strong>look up the OpenID</strong> entered by a user and <strong>redirect to their OpenID provider</strong>
<ul>
<li>Need to look up whether the OpenID entered already belongs to an existing user on your site
<li>Need to redirect to the OpenID provider (using an OpenID library) so the user can authenticate (details below)</li></ul>
<li>A new web page / CGI to <strong>handle the&nbsp;response</strong> from the user's OpenID provider
<ul>
<li>Need to verify the response (using an OpenID library)
<li>For new users, you'll need to send them to your registration flow and pre-fill any registration info they sent you from their OpenID provider. You'll also need to modify your registration flow slightly to not ask these users for a password (since they'll be signing in with their OpenID).
<li>For existing users, you'll need to attach the verified OpenID to their account (if this is the first time they've used it) and sign them in to their account by looking up the corresponding user id.</li></ul>
<li>A new web page / CGI to <strong>manage a user's attached OpenIDs</strong>
<ul>
<li>Need to be able to fetch and list all OpenIDs attached to the currently signed-in user
<li>Need to let users attach an additional OpenID (using the flow mentioned above)
<li>Need to let users remove (i.e. detach) an existing OpenID</li></ul>
<li>A hook in your delete-user code to <strong>remove any attached OpenIDs upon deletion</strong></li></ol>
<p><strong>You'll need the following resources to get started:</strong></p>
<ul>
<li>An OpenID consumer library in your programming language of choice. Plaxo's backend is in C++, so we used <a href="http://kin.klever.net/libopkele/">libopkele</a> (thanks to Michael and the rest of the <a href="http://kin.klever.net/">Klever</a> team for providing this great open-source library!), but there are <a href="http://openid.net/wiki/index.php/Libraries">libraries available</a> in lots of languages.
<li>Some standard OpenID graphics for use in your UI, e.g. the&nbsp;<a href="http://www.plaxo.com/images/openid/login-bg.gif">small icon</a> and logo (<a href="http://www.plaxo.com/images/openid/openid-logo-small.png">small</a>, <a href="http://www.plaxo.com/images/openid/openid-logo.png">normal</a>, <a href="http://www.plaxo.com/images/openid/openid-logo.pdf">PDF</a>)
<li>An OpenID provider site to test with. Some examples are <a href="http://www.myopenid.com">MyOpenID.com</a>, <a href="http://www.livejournal.com">LiveJournal</a>, and <a href="http://www.claimid.com">ClaimID</a>. Also, if you have an&nbsp;AOL/AIM screen name, you can use&nbsp;&nbsp;http://openid.aol.com/SCREENAME as an OpenID.</li></ul>
<p><strong>Implementing OpenID consumer support will have the following immediate benefits:</strong></p>
<ul>
<li>Any of the over 120 million users with OpenIDs will be able to sign up for your site more easily and quickly than before, since they won't need to create and remember yet another login and password and since they can provide pre-filled registration info.
<li>You will be able to start collecting OpenIDs for your users, so as more OpenID-enabled services become available, your users will be able to easily take advantage of them in conjunction with your site.
<li>You will demonstrate your thought leadership and commitment to your users by supporting&nbsp;this key emerging open standard for online identity.</li></ul>
<p><strong>In addition, as OpenID support continues to spread, you can expect the following additional benefits in the future:</strong></p>
<ul>
<li>The ability to automatically link your users' accounts on other web sites so you can share information for mashups and remove the friction of making your users enter the same information in multiple places.
<li>The ability to be notified when users change their info on other sites, so you can always have their latest info on your site.
<li>The ability to accept signed, trusted claims from other sites and services, such as age verification, validated e-mail addresses, confirmed group memberships, and more.</li></ul>
<h2>Implementation details</h2>
<ol start="0">
<li>Install an <strong>OpenID consumer library</strong>
<ul>
<li>There are <a href="http://openid.net/wiki/index.php/Libraries">OpenID libraries</a> already available in many popular programming languages that will do almost all of the heavy lifting for you. The team at <a href="http://www.janrain.com">JanRain</a> wrote a bunch of them and are generally super-smart and knowledgeable when it comes to OpenID, so they'd probably make a good resource if you need help here.
<li>Depending on the library, you may need to provide a persistent store for associations with OpenID provider sites. Essentially this is just storing a mapping from a server/handle string to an association string. You'll need to store the association at least for the session (to verify an OpenID authentication) but ideally you should store them longer so you won't have to re-associate every time you redirect to the OpenID provider (doing so will result in a faster redirect). You can use memcached, a database, or any other persistent storage medium you have access to.</li></ul>
<li>Create a new<strong> OpenID database table</strong>
<ul>
<li>Use a schema like this (this will work with MySQL, but you may have to tweak it slightly if you use a different database or if you represent your internal user IDs differently): <pre>create table user_openids (
  openid_url varchar(255) not null,
  primary key (openid_url),

  user_id int not null,
  index (user_id)
);</pre>
<li>Keep a single global table so you can use it to look up OpenIDs for all your users (even if you have your users partitioned into multiple databases).
<li>Store OpenID URLs in <em>canonicalized</em> form for robust lookup (i.e. so if users enter their OpenID slightly differently next time, you can still map it to their account). Most OpenID libraries will provide a canonicaliztion function, but briefly you should add http:// if it's missing and&nbsp;you should convert the protocol and domain to lowercase (but NOT the rest of the URL), so e.g. "WWW.AOL.COM/myOpenID" should be stored as "http://www.aol.com/myOpenID". You should also probably remove any trailing slashes from the URL.
<li>If you usually have a layer of database-access code, you should expose the following functions to your application (in each case I've sketched the SQL to implement the function). As a reminder, all functions that take an&nbsp;OpenID as input should canonicalize it prior to looking it up in the database.
<ul>
<li><strong>GetUserId</strong>(<em>openid_url</em>)<br><code>select user_id from user_openids where openid_url = <em>openid_url</em></code> <br>
<li><strong>GetOpenIDsByUser</strong>(<em>user_id</em>)<br><code>select openid_url from user_openids where user_id = <em>user_id</em></code> <br>
<li><strong>AttachOpenID</strong>(<em>openid_url</em>, <em>user_id</em>)<br><code>insert into user_openids values (<em>openid_url</em>, <em>user_id</em>)</code> <br>
<li><strong>DetachOpenID</strong>(<em>openid_url</em>, <em>user_id</em>)<br><code>delete from user_openids where openid_url = <em>openid_url</em> and user_id = <em>user_id</em></code> <br>
<li><strong>DetachOpenIDsByUser</strong>(<em>user_id</em>)<br><code>delete from user_openids where user_id = user_id<br></code></li></ul></li></ul>
<li>Add OpenID UI to your <strong>registration page</strong>
<ul>
<li>Add a section to your registration page where OpenID users can sign up using their OpenID. The UI goal should be that OpenID users can easily identify that your site supports OpenID, but that users without OpenID can continue to register normally without being confused. You can either put an OpenID input box directly on the page or link to an OpenID page where users can enter their OpenID.
<li>Wherever you put it, you should follow the community standards for naming and styling the text field where users enter their OpenID:
<ul>
<li>Use "openid_url" as the ID and name attributes of the text field (this will allow plug-ins to easily identify and handle OpenID input boxes across different web sites)
<li>Add the <a href="http://www.myopenid.com/static/openid-icon-small.gif">small OpenID logo</a> as a background image to the text box, using CSS like this:<pre>background: #FFFFFF url('/images/openid-icon-small.gif') no-repeat scroll 0pt 50%;
padding-left: 18px;</pre></li></ul>
<li>It's also a good idea to provide a brief explanation of what OpenID is and how your users can use it on your site (since you'll probably get curious people clicking through to take a look).
<li>Wrap the OpenID text box in a form that will submit to your OpenID login CGI, which we'll build below.
<li>Upon providing an OpenID and signing in to the OpenID provider, you'll need to redirect your user back to your registration page with a couple of small tweaks. First, you should show the OpenID that the user is registering with, preferably with the small OpenID logo next to it to consistently&nbsp;identify it as an OpenID (see the screenshots below for an example). Second, you should NOT ask the user for a site-specific password, since they'll be signing in with their OpenID. So hide the password fields and make sure your registration code will allow this (you may need to stick in a random password behind the scenes if your code requires some password text, just don't show it to the user). [Note: it's fine to let users enter a site-specific password later by using your account settings page, but the point here is that one of the major benefits you're providing OpenID users is that they no longer<em> need </em>to maintain separate credentials for each site they use.]
<li>Here are some screenshots of how we added OpenID to Plaxo's registration flow:<br><a title="Plaxo registration page with OpenID link" href="http://www.flickr.com/photos/plaxo/839038415/"><img height="75" alt="Plaxo registration page with OpenID link" src="http://farm2.static.flickr.com/1016/839038415_f89f2e8f0b_s.jpg" width="75" border="2"></a> <a title="Plaxo OpenID page" href="http://www.flickr.com/photos/plaxo/839038427/"><img height="75" alt="Plaxo OpenID page" src="http://farm2.static.flickr.com/1206/839038427_219fbfc132_s.jpg" width="75" border="2"></a> <a title="Returning to Plaxo registration with a verified OpenID" href="http://www.flickr.com/photos/plaxo/839038449/"><img height="75" alt="Returning to Plaxo registration with a verified OpenID" src="http://farm2.static.flickr.com/1248/839038449_71058ada30_s.jpg" width="75" border="2"></a> <a title="Plaxo registration is pre-filled with simple-registration data from the OpenID provider" href="http://www.flickr.com/photos/plaxo/839074877/"><img height="75" alt="Plaxo registration is pre-filled with simple-registration data from the OpenID provider" src="http://farm2.static.flickr.com/1355/839074877_78f39bf5c6_s.jpg" width="75" border="2"></a> </li></ul>
<li>Add OpenID UI to your <strong>signin page</strong>
<ul>
<li>Add a section to your signin page where OpenID users can sign in using their OpenID. This will work both for existing users of your site that have attached an OpenID to their account and new users, who will be able to sign up using their OpenID (using the same flow as above). Like with the registration page, the UI goal should be a balance between being obvious to OpenID users without overly distracting or confusing the rest of your users. You should name and style your OpenID box as specified above in the registration page. And like above, the form surrounding the OpenID input box should go to&nbsp;the OpenID login CGI you're about to build.
<li>In addition to your main signin page, you may also have signin UI in your home page or elsewhere. You should ideally provide an option to sign in using OpenID in every place you provide a traditional signin option.
<li>Here are some screenshots of how we added OpenID to Plaxo's signin pages:<br><a title="Plaxo signin page with OpenID option" href="http://www.flickr.com/photos/plaxo/839038439/"><img height="75" alt="Plaxo signin page with OpenID option" src="http://farm2.static.flickr.com/1075/839038439_a8bf14a918_s.jpg" width="75"></a> <a title="Plaxo homepage signin UI with OpenID option" href="http://www.flickr.com/photos/plaxo/839038393/"><img height="75" alt="Plaxo homepage signin UI with OpenID option" src="http://farm2.static.flickr.com/1404/839038393_6229c75d66_s.jpg" width="75"></a> <a title="Plaxo homepage signin UI with OpenID option selected" href="http://www.flickr.com/photos/plaxo/839038403/"><img height="75" alt="Plaxo homepage signin UI with OpenID option selected" src="http://farm2.static.flickr.com/1403/839038403_921ccb13aa_s.jpg" width="75"></a></li></ul>
<li>Create a new <strong>OpenID login</strong> web page / CGI </li>
<ul>
<li>Your CGI should take two basic input (query) parameters:
<ul>
<li><strong>openid_url</strong>: the OpenID entered by the user (for registration, signin, attaching, etc.)
<li><strong>action_type</strong>: the operation the user wants to perform. Possible values will be <em>login</em>, <em>complete</em>, <em>attach</em>, <em>list</em>, and <em>delete</em>. (If you're using Rails or a similar system, these could also be controller methods and thus part of the URL itself.)</li></ul>
<li>Implement the <strong>login</strong> action (this is where the UI you added to the registration and signin flows will both submit to) </li>
<ol>
<li>Look up the provided openid_url using the <strong>GetUserId</strong> function described above.
<li>If&nbsp;the&nbsp;OpenID is already attached to a user in your system, check to see if the user is currently signed in to your site. </li>
<ol>
<li>If the user is not signed in, they are attempting to sign in as an existing user, so prepare to redirect to their OpenID provider, but set a flag to NOT ask the provider for registration info (since the user is not signing up for a new account).
<li>If the user is already signed in, and this OpenID already belongs to them (i.e. the OpenID URL is mapped to the same user_id as the currently signed-in user), then you don't have to do anything (this user is already signed in and already attached that OpenID, so this is a no-op). This is an edge case.
<li>If the user is already signed in but the OpenID belongs to a <em>different</em> user, show an error message saying that this OpenID has already been claimed by another user. You can also provide the user the option to sign out and try again. This is an edge case. </li></ol>
<li>If the OpenID is NOT currently in your database, the user is trying to sign up for a new account, so prepare to redirect to their OpenID provider and ask for registration info.
<li>Save the provided openid_url in your session, since you'll need it to remember it when the OpenID provider redirects back to you, and the provider may not return it to you. If you don't have a session, you can use your database, but it has to be somewhere persistent and protected from user-tampering (i.e. not in a cookie or something that could be changed or forged by the user).&nbsp;<br>(The reason you need to store the requested OpenID is that OpenID lets users <em>delegate</em> their OpenID to another provider behind-the-scenes. For instance, if I try to sign up with the OpenID josephsmarr.com, I may have actually <a href="http://simonwillison.net/2006/Dec/19/openid/">delegated</a>&nbsp;that URL to a different OpenID like jsmarr.myopenid.com, and when the provider returns to you to complete authentication, you need to remember that I wanted to sign up as josephsmarr.com and not jsmarr.myopenid.com. Luckily your OpenID library will most likely handle this for you, but you still have to keep the originally requested OpenID in your session for now. This may be solved in the upcoming OpenID 2.0 spec.)
<li>Construct your return_to URL for the OpenID provider to return to after the user has authenticated. This will be your OpenID login CGI with the <em>complete </em>action specified.
<li>If you've determined above that the user is registering for a new account, decide what registration info to ask for. Most OpenID providers support the <a href="http://www.openidenabled.com/openid/simple-registration-extension">simple-registration extension</a>, which is a list of common registration fields that you can request as required or optional for your site, including full name, e-mail, nickname, gender, date of birth, gender, postal code, country, language, and time zone. If you ask for these fields and the user consents to provide them, you can pre-fill them into your registration flow, thus removing time and friction from your registration process. If your OpenID consumer library doesn't natively support requesting simple-registration parameters, see if they have a general facility for supporting extensions, or worst-case you can manually add it to the generated redirect URL before redirecting.
<li>Call <strong>checkid_setup</strong> in your OpenID library to generate the URL to redirect to the user's OpenID provider. Pass in the (canonicalized) OpenID provided by the user and the return_to URL you constructed above. Also pass in the simple registration info you want if appropriate. Depending on your library, you may need to trap and handle some&nbsp;errors from this function. But assuming everything goes well, it will give you back a URL to redirect to.
<li>Have your CGI redirect to the provided URL, ideally by issuing a server-side redirect response.
<li>The user will be redirected to their OpenID provider's web site. They will be asked to sign in (unless they've recently signed in there), they will be asked whether they trust your web site, and if you've asked for simple registration info, they'll be asked what info they want to share with you. Once they complete this process, the OpenID provider will redirect the user back to the return_to URL you supplied, which will then let you initiate your <em>complete</em> action to finish the job.<br><br>Here are some screenshots of signing into an OpenID provider (myopenid.com in this case) and being prompted to share some registration info with Plaxo:<br><a title="OpenID provider signin page" href="http://www.flickr.com/photos/plaxo/839964012/"><img height="75" alt="OpenID provider signin page" src="http://farm2.static.flickr.com/1398/839964012_e464d87ebb_s.jpg" width="75"></a> <a title="OpenID provider registration info page" href="http://www.flickr.com/photos/plaxo/839964326/"><img height="75" alt="OpenID provider registration info page" src="http://farm2.static.flickr.com/1328/839964326_bbcebbdfcc_s.jpg" width="75"></a></li></ol>
<li>Implement the <strong>complete</strong> action (this is where the user gets redirected after signing in to their OpenID provider):
<ol>
<li>When the OpenID provider redirects to your return_to URL, they will add a bunch of additional query string parameters that contain the information needed to verify the user's authentication with this OpenID. Depending on the OpenID library you're using, you may need to gather these up into a data structure to pass in to the verification function, or it may do it for you.
<li>Get the OpenID the user initially requested from your session (you stored it before redirecting to the OpenID provider above).
<li>Call <strong>id_res</strong> in your OpenID library to verify the authentication data you've been sent by the OpenID provider. Pass in the OpenID that the user initially requested, along with the query parameters as needed. This function will check to see if everything looks valid. If you get an error back, display an appropriate error message to your user. Otherwise you've now confirmed that the user has authenticated the OpenID they provided to you.
<li>Optional: after successfully verifying the OpenID, you may wish to set a persistent cookie for your site with the OpenID used so that you can recognize that the user has an OpenID next time they come to your site and pre-fill the OpenID box on the signin page. If you do this, make sure to also clear the cookie when the user explicitly signs out.
<li>Look up the verified OpenID again using the <strong>GetUserId</strong> function. If you don't find it in your database, check to see if the user is currently signed in on your site. If they are, perform the <em>attach</em> action below to attach this OpenID to their existing account. Otherwise, it's time to start the registration process for a new account using this OpenID. Start by storing the verified OpenID in your session so your account creation code will remember the user has already verified this OpenID. (Do NOT use the same session variable you used to store the <em>requested</em> OpenID, since the user can type in anything there.) <br>Then redirect your user to your registration flow and pass along the simple registration data you got back (if any). You will probably have to map the fields&nbsp;returned by simple-registration to the registration parameters that your site normally takes.
<ul>
<li>As described above, the registration page should show the OpenID prominently in the account information, and you should NOT ask the user to enter a password for your site, since they'll be using their OpenID to sign in. In addition, you should pre-fill any registration info provided from their OpenID provider. It is fine to ask for additional registration info and maintain your current policies about which fields are required and optional. (Using OpenID should be an <em>acceleration</em> for registering on your site, but&nbsp;should not require you to change what information you require or otherwise change your site's normal behavior). Finally, you should provide a link for existing users of your service to attach this OpenID to their existing account, if they have one. This will handle the case of existing users that weren't signed in and entered their OpenID and have no found themselves in the new-user registration flow. [Since this isn't common, it's better to just have&nbsp;a small link at the beginning of the registration flow rather than asking every user "do you want to register a new account or sign in to an existing account" when they first verify their OpenID.]
<li>When the user completes your site's registration flow and you create a user account, attach the verified OpenID to the newly created account using your <strong>AttachOpenID</strong> function. [If your user table and OpenID table are in separate databases and cannot be part of the same transaction, there is a small chance that the attach command could fail and leave you with an orphaned user account. There's no easy way to prevent this in 100% of cases, but since it's rare and the user can always sign up again, in most cases you can ignore this race condition and just hope for the best.</li></ul>
<li>If you found that the verified OpenID was attached to an existing account, you can now sign the user in as you normally would if they'd signed in through your traditional method. (If the user happens to be signed in to a different account, sign them out and then sign them in as the user the OpenID is attached to, since they just proved they own it). </li></ol>
<li>Implement the <strong>attach</strong> action (for existing users to attach additional OpenIDs to their account):
<ol start="0">
<li>(This action will be called as part of the <em>complete</em> action when the user is already signed in and has just verified a new OpenID. So make sure the user is signed in before calling this action.)
<li>Attach the verified OpenID to the signed-in user's account using your <strong>AttachOpenID</strong> function.
<li>Show a confirmation message that this OpenID has now been attached and can be used to sign in from now on. Consider redirecting to the <em>list</em> action so the user can now see this OpenID among the list of attached OpenIDs for their account.<br><br>Here's a screenshot of Plaxo's attach confirmation page:<br><a title="Attaching an OpenID to an existing Plaxo account" href="http://www.flickr.com/photos/plaxo/839991898/"><img height="75" alt="Attaching an OpenID to an existing Plaxo account" src="http://farm2.static.flickr.com/1203/839991898_d6828ba472_s.jpg" width="75"></a></li></ol>
<li>Implement the <strong>list</strong> action (for showing a signed-in user the OpenIDs attached to their account):
<ol>
<li>Require the user to be signed in (redirect through your signin page first if needed).
<li>Fetch the list of attached OpenIDs for the signed-in user by calling your <strong>GetOpenIDsByUser</strong> function.
<li>Show the list of OpenIDs in a web page with&nbsp;a link by each one to detach it if the user wants. The links will call the <em>delete</em> action below and pass in the OpenID to delete as the <em>openid_url</em> parameter.
<li>Provide a link or&nbsp;input box to attach an additional OpenID. This will take the user&nbsp;through the <em>login</em> and <em>attach</em> flows (since the user is already signed in) and end up back on the <em>list</em> page.
<li>If your site already has a general settings page, you should provide a link to "Manage your OpenIDs" that links to this <em>list</em> page. You may also decide to build this functionality directly into your current settings page.<br><br>Here's a screenshot of Plaxo's list page, as well as links to it from our current settings pages:<br><a title="Listing your attached OpenIDs on Plaxo" href="http://www.flickr.com/photos/plaxo/839074973/"><img height="75" alt="Listing your attached OpenIDs on Plaxo" src="http://farm2.static.flickr.com/1394/839074973_e5f1227e5b_s.jpg" width="75"></a> <a title="Link to manage OpenIDs in Plaxo 3.0 settings" href="http://www.flickr.com/photos/plaxo/839074949/"><img height="75" alt="Link to manage OpenIDs in Plaxo 3.0 settings" src="http://farm2.static.flickr.com/1335/839074949_022fca33fe_s.jpg" width="75"></a> <a title="PLink to manage OpenIDs in Plaxo 2.0 settings" href="http://www.flickr.com/photos/plaxo/839074963/"><img height="75" alt="Link to manage OpenIDs in Plaxo 2.0 settings" src="http://farm2.static.flickr.com/1237/839074963_90745b3050_s.jpg" width="75"></a></li></ol>
<li>Implement the <strong>delete</strong> action (for detaching an OpenID from a user's account):
<ol>
<li>Require the user to be signed in (redirect through your signin page first if needed).
<li>Optional: Check whether the user is trying to delete the last credential they could use to sign in to your site. If the user has not set up a normal password on your site and this is the only OpenID attached to their account, deleting their last OpenID would essentially lock them out of their account forever. If you don't have a good way to recover users in this situation, show an error message if the user tries to delete their last attached credential, saying essentially "You can't delete the last OpenID attached to your account because you'd have no way to sign in. First attach another OpenID or create a password for this site."
<li>Assuming it's ok to proceed, detach the OpenID provided by the openid_url parameter from the signed-in user's account by calling your <strong>DetachOpenID</strong> function. If the OpenID provided is not currently attached to the user's account, you can choose to show an error or just treat it as a no-op success.
<li>Show a confirmation message that this OpenID has now been detached and can no longer be used to sign in to your site.&nbsp;Tell the user that if they want to re-attach this OpenID, they will have to go through the normal verification process to re-attach it.&nbsp;Consider redirecting to the <em>list</em> action so the user can see the updated list of OpenIDs attached to their account.<br><br>Here are some screenshots of detaching an OpenID from a Plaxo account:<br><a title="Confirming that a user wants to detach an OpenID from their Plaxo account" href="http://www.flickr.com/photos/plaxo/839075059/"><img height="75" alt="Confirming that a user wants to detach an OpenID from their Plaxo account" src="http://farm2.static.flickr.com/1421/839075059_c0444091f5_s.jpg" width="75"></a> <a title="Confirmation of a detached OpenID" href="http://www.flickr.com/photos/plaxo/839964000/"><img height="75" alt="Confirmation of a detached OpenID" src="http://farm2.static.flickr.com/1068/839964000_079d70211a_s.jpg" width="75"></a></li></ol>
<li>Add a hook to your delete-user routine to <strong>detach all OpenIDs </strong>from that user.
<ol>
<li>If your site currently lets users delete their accounts, it's important that you also detach any OpenIDs that were attached so they can be re-attached to another account later. You can do this by calling your <strong>DetachOpenIDsByUser</strong> function inside your delete-user routine, or by otherwise triggering this function when deleting a user.</li></ol></li></ul></ol>
<h2>...and you're done!</h2>
<p>If you've made it this far, congratulations! You've now got all the tools you need to OpenID-enable your web site. The steps above should be thorough and complete, but it helps to bear in mind the following best-practices throughout your implementation:</p>
<ul>
<li>Whenever you're displaying a user's OpenID on a page, precede it with the small OpenID icon to clearly identify it. See the registration screenshots above as an example. (A possible exception is on the list page if your UI makes it clear that you're presenting a list of OpenIDs, but it wouldn't hurt!)
<li>In general, you should require opt-in consent from your users before you display their OpenIDs in public or to other users of your site. A user may want to share their OpenID as a public identifier, but you should assume by default that they want to use it as a private means of signing in and not an attribute on their public profile.
<li>Starting with the OpenID 2.0 spec (to be completed very soon; most sites currently use v1.1, but don't worry, you don't have to change anything above to comply with OpenID 2.0 servers), users will also be able to sign in using <a href="http://www.xdi.org/i-names-explained.html">i-names</a> like <tt>=joseph.smarr</tt> as OpenIDs. This should hopefully be transparent to your implementation, but if you plan to publicly display users' i-names in the future, now would be a good time to start restricting your users from registering normal nicknames that start with an = or @ sign, since they could be confused with authenticated i-names. Many sites already disallow nicknames that start with characters like this, but it's worth a look.
<li>OpenID is already&nbsp;being widely adopted, but remember that the problem of providing web-scale user-centric identity is still a work in progress, so speak up if you have questions or feedback on how things work! Contribute to sites like openid.net and OpenIDEnabled.com, post comments and blog entries, or whatever else you can do join the conversation. If you're passionate about identity on the web, providing OpenID support on your site is a great start. Becoming an ongoing contributor&nbsp;in the community will continue the investment and help ensure we all get the web we want as users!</li></ul>
</div>
 </div> <div class=contentBottom> <div class="corner cornerBL">&nbsp;</div> <div class="corner cornerBR">&nbsp;</div> </div> </div> <div class=px4footer> <div class=px4holder> <div class="content roundedSmall"> <div class=footerleft> <div class=logo><a href="/"><img src="/m/plaxo/img/px4/footerlogo.gif" width=43 height=43 alt=Plaxo></a></div> <div class=navigation> <div class=primary> <a href="/" rel=nofollow>Home</a><span class=sep>|</span> <a href="/auth" rel=nofollow>Sign In</a><span class=sep>|</span> <a href="/join" rel=nofollow>Sign Up</a><span class=sep>|</span> <a href="/people/tools?src=footer" class=highlight>Plaxo Premium</a> </div> <div class=secondary> <a href="/about" rel=nofollow>About</a><span class=sep>|</span> <a href="/api" rel=nofollow>Developers</a><span class=sep>|</span> <a href="http://www.plaxo.com/directory">Directory</a><span class=sep>|</span> <a href="/downloads" rel=nofollow>Downloads</a><span class=sep>|</span> <a href="http://ecards.plaxo.com/ecard/" rel=nofollow>eCards</a><span class=sep>|</span> <a href="http://help.plaxo.com/" target=_blank>Help</a> </div> </div> </div> <div class="languagebar roundedsmall"> <a href="javascript:toggleLanguageChooser();"> <img src="/m/plaxo/img/px4/world.png" width=17 height=17 alt="The World!"> <span class=language>English</span> <img src="/m/plaxo/img/px4/dropper.png" width=17 height=17 alt="See More"> </a> <div id=language_chooser style="display: none;" class=language_chooser> <a href="javascript:setLocale('en')">English</a> <a href="javascript:setLocale('de')">Deutsch</a> <a href="javascript:setLocale('es')">Español</a> <a href="javascript:setLocale('fr')">Français</a> <a href="javascript:setLocale('hr')">Hrvatski (Beta)</a> <a href="javascript:setLocale('it')">Italiano</a> <a href="javascript:setLocale('ja')">日本語</a> <a href="javascript:setLocale('kr')">Korean</a> <a href="javascript:setLocale('nl')">Nederlands</a> <a href="javascript:setLocale('pt')">Português</a> <a href="javascript:setLocale('zhs')">简体中文</a> </div> </div> <div class=clearBoth></div> </div> </div> <div class=px4holder> <div class=afterFooterLeft>Copyright 2002-2010 Plaxo, Inc. All rights reserved.</div> <div class= afterFooterRight> <a href="/about/privacy" rel=nofollow>Privacy Policy</a> <span class=sep>|</span> <a href="/about/terms_of_service" rel=nofollow>Terms of Service</a> </div> </div> </div> <script language=javascript>var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-30607-1']);_gaq.push(['_setCampSourceKey','src']);_gaq.push(['_setDomainName','plaxo.com']); _gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';ga.setAttribute('async','true');document.documentElement.firstChild.appendChild(ga)})();</script>
 </body> </html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
    "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<meta name="generator" content="AsciiDoc 8.5.2" />
<title>NoBug Reference Manual</title>
<style type="text/css">
/* Debug borders */
p, li, dt, dd, div, pre, h1, h2, h3, h4, h5, h6 {
/*
  border: 1px solid red;
*/
}

body {
  margin: 1em 5% 1em 5%;
}

a {
  color: blue;
  text-decoration: underline;
}
a:visited {
  color: fuchsia;
}

em {
  font-style: italic;
  color: navy;
}

strong {
  font-weight: bold;
  color: #083194;
}

tt {
  color: navy;
}

h1, h2, h3, h4, h5, h6 {
  color: #527bbd;
  font-family: sans-serif;
  margin-top: 1.2em;
  margin-bottom: 0.5em;
  line-height: 1.3;
}

h1, h2, h3 {
  border-bottom: 2px solid silver;
}
h2 {
  padding-top: 0.5em;
}
h3 {
  float: left;
}
h3 + * {
  clear: left;
}

div.sectionbody {
  font-family: serif;
  margin-left: 0;
}

hr {
  border: 1px solid silver;
}

p {
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}

ul, ol, li > p {
  margin-top: 0;
}

pre {
  padding: 0;
  margin: 0;
}

span#author {
  color: #527bbd;
  font-family: sans-serif;
  font-weight: bold;
  font-size: 1.1em;
}
span#email {
}
span#revnumber, span#revdate, span#revremark {
  font-family: sans-serif;
}

div#footer {
  font-family: sans-serif;
  font-size: small;
  border-top: 2px solid silver;
  padding-top: 0.5em;
  margin-top: 4.0em;
}
div#footer-text {
  float: left;
  padding-bottom: 0.5em;
}
div#footer-badges {
  float: right;
  padding-bottom: 0.5em;
}

div#preamble {
  margin-top: 1.5em;
  margin-bottom: 1.5em;
}
div.tableblock, div.imageblock, div.exampleblock, div.verseblock,
div.quoteblock, div.literalblock, div.listingblock, div.sidebarblock,
div.admonitionblock {
  margin-top: 1.0em;
  margin-bottom: 1.5em;
}
div.admonitionblock {
  margin-top: 2.0em;
  margin-bottom: 2.0em;
  margin-right: 10%;
  color: #606060;
}

div.content { /* Block element content. */
  padding: 0;
}

/* Block element titles. */
div.title, caption.title {
  color: #527bbd;
  font-family: sans-serif;
  font-weight: bold;
  text-align: left;
  margin-top: 1.0em;
  margin-bottom: 0.5em;
}
div.title + * {
  margin-top: 0;
}

td div.title:first-child {
  margin-top: 0.0em;
}
div.content div.title:first-child {
  margin-top: 0.0em;
}
div.content + div.title {
  margin-top: 0.0em;
}

div.sidebarblock > div.content {
  background: #ffffee;
  border: 1px solid silver;
  padding: 0.5em;
}

div.listingblock > div.content {
  border: 1px solid silver;
  background: #f4f4f4;
  padding: 0.5em;
}

div.quoteblock, div.verseblock {
  padding-left: 1.0em;
  margin-left: 1.0em;
  margin-right: 10%;
  border-left: 5px solid #dddddd;
  color: #777777;
}

div.quoteblock > div.attribution {
  padding-top: 0.5em;
  text-align: right;
}

div.verseblock > div.content {
  white-space: pre;
}
div.verseblock > div.attribution {
  padding-top: 0.75em;
  text-align: left;
}
/* DEPRECATED: Pre version 8.2.7 verse style literal block. */
div.verseblock + div.attribution {
  text-align: left;
}

div.admonitionblock .icon {
  vertical-align: top;
  font-size: 1.1em;
  font-weight: bold;
  text-decoration: underline;
  color: #527bbd;
  padding-right: 0.5em;
}
div.admonitionblock td.content {
  padding-left: 0.5em;
  border-left: 3px solid #dddddd;
}

div.exampleblock > div.content {
  border-left: 3px solid #dddddd;
  padding-left: 0.5em;
}

div.imageblock div.content { padding-left: 0; }
span.image img { border-style: none; }
a.image:visited { color: white; }

dl {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
dt {
  margin-top: 0.5em;
  margin-bottom: 0;
  font-style: normal;
  color: navy;
}
dd > *:first-child {
  margin-top: 0.1em;
}

ul, ol {
    list-style-position: outside;
}
ol.arabic {
  list-style-type: decimal;
}
ol.loweralpha {
  list-style-type: lower-alpha;
}
ol.upperalpha {
  list-style-type: upper-alpha;
}
ol.lowerroman {
  list-style-type: lower-roman;
}
ol.upperroman {
  list-style-type: upper-roman;
}

div.compact ul, div.compact ol,
div.compact p, div.compact p,
div.compact div, div.compact div {
  margin-top: 0.1em;
  margin-bottom: 0.1em;
}

div.tableblock > table {
  border: 3px solid #527bbd;
}
thead, p.table.header {
  font-family: sans-serif;
  font-weight: bold;
}
tfoot {
  font-weight: bold;
}
td > div.verse {
  white-space: pre;
}
p.table {
  margin-top: 0;
}
/* Because the table frame attribute is overriden by CSS in most browsers. */
div.tableblock > table[frame="void"] {
  border-style: none;
}
div.tableblock > table[frame="hsides"] {
  border-left-style: none;
  border-right-style: none;
}
div.tableblock > table[frame="vsides"] {
  border-top-style: none;
  border-bottom-style: none;
}


div.hdlist {
  margin-top: 0.8em;
  margin-bottom: 0.8em;
}
div.hdlist tr {
  padding-bottom: 15px;
}
dt.hdlist1.strong, td.hdlist1.strong {
  font-weight: bold;
}
td.hdlist1 {
  vertical-align: top;
  font-style: normal;
  padding-right: 0.8em;
  color: navy;
}
td.hdlist2 {
  vertical-align: top;
}
div.hdlist.compact tr {
  margin: 0;
  padding-bottom: 0;
}

.comment {
  background: yellow;
}

.footnote, .footnoteref {
  font-size: 0.8em;
}

span.footnote, span.footnoteref {
  vertical-align: super;
}

#footnotes {
  margin: 20px 0 20px 0;
  padding: 7px 0 0 0;
}

#footnotes div.footnote {
  margin: 0 0 5px 0;
}

#footnotes hr {
  border: none;
  border-top: 1px solid silver;
  height: 1px;
  text-align: left;
  margin-left: 0;
  width: 20%;
  min-width: 100px;
}


@media print {
  div#footer-badges { display: none; }
}

div#toc {
  margin-bottom: 2.5em;
}

div#toctitle {
  color: #527bbd;
  font-family: sans-serif;
  font-size: 1.1em;
  font-weight: bold;
  margin-top: 1.0em;
  margin-bottom: 0.1em;
}

div.toclevel1, div.toclevel2, div.toclevel3, div.toclevel4 {
  margin-top: 0;
  margin-bottom: 0;
}
div.toclevel2 {
  margin-left: 2em;
  font-size: 0.9em;
}
div.toclevel3 {
  margin-left: 4em;
  font-size: 0.9em;
}
div.toclevel4 {
  margin-left: 6em;
  font-size: 0.9em;
}
/* Workarounds for IE6's broken and incomplete CSS2. */

div.sidebar-content {
  background: #ffffee;
  border: 1px solid silver;
  padding: 0.5em;
}
div.sidebar-title, div.image-title {
  color: #527bbd;
  font-family: sans-serif;
  font-weight: bold;
  margin-top: 0.0em;
  margin-bottom: 0.5em;
}

div.listingblock div.content {
  border: 1px solid silver;
  background: #f4f4f4;
  padding: 0.5em;
}

div.quoteblock-attribution {
  padding-top: 0.5em;
  text-align: right;
}

div.verseblock-content {
  white-space: pre;
}
div.verseblock-attribution {
  padding-top: 0.75em;
  text-align: left;
}

div.exampleblock-content {
  border-left: 3px solid #dddddd;
  padding-left: 0.5em;
}

/* IE6 sets dynamically generated links as visited. */
div#toc a:visited { color: blue; }
</style>
<script type="text/javascript">
/*<![CDATA[*/
window.onload = function(){asciidoc.footnotes(); asciidoc.toc(2);}
var asciidoc = {  // Namespace.

/////////////////////////////////////////////////////////////////////
// Table Of Contents generator
/////////////////////////////////////////////////////////////////////

/* Author: Mihai Bazon, September 2002
 * http://students.infoiasi.ro/~mishoo
 *
 * Table Of Content generator
 * Version: 0.4
 *
 * Feel free to use this script under the terms of the GNU General Public
 * License, as long as you do not remove or alter this notice.
 */

 /* modified by Troy D. Hanson, September 2006. License: GPL */
 /* modified by Stuart Rackham, 2006, 2009. License: GPL */

// toclevels = 1..4.
toc: function (toclevels) {

  function getText(el) {
    var text = "";
    for (var i = el.firstChild; i != null; i = i.nextSibling) {
      if (i.nodeType == 3 /* Node.TEXT_NODE */) // IE doesn't speak constants.
        text += i.data;
      else if (i.firstChild != null)
        text += getText(i);
    }
    return text;
  }

  function TocEntry(el, text, toclevel) {
    this.element = el;
    this.text = text;
    this.toclevel = toclevel;
  }

  function tocEntries(el, toclevels) {
    var result = new Array;
    var re = new RegExp('[hH]([2-'+(toclevels+1)+'])');
    // Function that scans the DOM tree for header elements (the DOM2
    // nodeIterator API would be a better technique but not supported by all
    // browsers).
    var iterate = function (el) {
      for (var i = el.firstChild; i != null; i = i.nextSibling) {
        if (i.nodeType == 1 /* Node.ELEMENT_NODE */) {
          var mo = re.exec(i.tagName);
          if (mo && (i.getAttribute("class") || i.getAttribute("className")) != "float") {
            result[result.length] = new TocEntry(i, getText(i), mo[1]-1);
          }
          iterate(i);
        }
      }
    }
    iterate(el);
    return result;
  }

  var toc = document.getElementById("toc");
  var entries = tocEntries(document.getElementById("content"), toclevels);
  for (var i = 0; i < entries.length; ++i) {
    var entry = entries[i];
    if (entry.element.id == "")
      entry.element.id = "_toc_" + i;
    var a = document.createElement("a");
    a.href = "#" + entry.element.id;
    a.appendChild(document.createTextNode(entry.text));
    var div = document.createElement("div");
    div.appendChild(a);
    div.className = "toclevel" + entry.toclevel;
    toc.appendChild(div);
  }
  if (entries.length == 0)
    toc.parentNode.removeChild(toc);
},


/////////////////////////////////////////////////////////////////////
// Footnotes generator
/////////////////////////////////////////////////////////////////////

/* Based on footnote generation code from:
 * http://www.brandspankingnew.net/archive/2005/07/format_footnote.html
 */

footnotes: function () {
  var cont = document.getElementById("content");
  var noteholder = document.getElementById("footnotes");
  var spans = cont.getElementsByTagName("span");
  var refs = {};
  var n = 0;
  for (i=0; i<spans.length; i++) {
    if (spans[i].className == "footnote") {
      n++;
      // Use [\s\S] in place of . so multi-line matches work.
      // Because JavaScript has no s (dotall) regex flag.
      note = spans[i].innerHTML.match(/\s*\[([\s\S]*)]\s*/)[1];
      noteholder.innerHTML +=
        "<div class='footnote' id='_footnote_" + n + "'>" +
        "<a href='#_footnoteref_" + n + "' title='Return to text'>" +
        n + "</a>. " + note + "</div>";
      spans[i].innerHTML =
        "[<a id='_footnoteref_" + n + "' href='#_footnote_" + n +
        "' title='View footnote' class='footnote'>" + n + "</a>]";
      var id =spans[i].getAttribute("id");
      if (id != null) refs["#"+id] = n;
    }
  }
  if (n == 0)
    noteholder.parentNode.removeChild(noteholder);
  else {
    // Process footnoterefs.
    for (i=0; i<spans.length; i++) {
      if (spans[i].className == "footnoteref") {
        var href = spans[i].getElementsByTagName("a")[0].getAttribute("href");
        href = href.match(/#.*/)[0];  // Because IE return full URL.
        n = refs[href];
        spans[i].innerHTML =
          "[<a href='#_footnote_" + n +
          "' title='View footnote' class='footnote'>" + n + "</a>]";
      }
    }
  }
}

}
/*]]>*/
</script>
</head>
<body>
<div id="header">
<h1>NoBug Reference Manual</h1>
<span id="author">Christian Thäter, Benny Lyons</span><br />
<div id="toc">
  <div id="toctitle">Table of Contents</div>
  <noscript><p><b>JavaScript must be enabled in your browser to display the table of contents.</b></p></noscript>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="quoteblock">
<div class="quoteblock-content">
<div class="paragraph"><p>NoBug is a debugging library for instrumenting C and C++ programs
inspired by ideas originating from Design-by-Contract.</p></div>
</div>
<div class="quoteblock-attribution">
</div></div>
<div class="quoteblock">
<div class="quoteblock-content">
<div class="paragraph"><p>Everyone makes mistakes, but with NoBug you won&#8217;t make them twice!</p></div>
</div>
<div class="quoteblock-attribution">
</div></div>
</div>
</div>
<h2 id="_overview">Overview</h2>
<div class="sectionbody">
<div class="paragraph"><p>The following features are provided by NoBug:</p></div>
<div class="ulist"><ul>
<li>
<p>
Three different check levels: from detailed to final no-overhead
</p>
</li>
<li>
<p>
Scope tags: tell whenever a function or loop is considered to be bug free
</p>
</li>
<li>
<p>
Precondition, Postcondition and Invariant checks and generic assertions
</p>
</li>
<li>
<p>
Data structures can be dumped
</p>
</li>
<li>
<p>
Application activities can be logged
</p>
</li>
<li>
<p>
Runtime customizable logging via an environment variable
</p>
</li>
<li>
<p>
Different logging targets to stderr, syslog, debugger, &#8230;
</p>
</li>
<li>
<p>
Annotation of your sourcecode about known bugs, things to do, etc.
</p>
</li>
<li>
<p>
Tracking resources (files, locks, etc.) used by your program; help in
    detecting misuse
</p>
</li>
<li>
<p>
Detecting potential deadlocks
</p>
</li>
<li>
<p>
Simulate errors by injecting faults
</p>
</li>
<li>
<p>
Coverage checking to find out if all (instrumentated) errors are properly handled
</p>
</li>
<li>
<p>
Additionally, the NoBug project is used to maintain a script and
    some tools to setup testsuites
</p>
</li>
</ul></div>
<div class="paragraph"><p>In contrast to traditional debuggers, NoBug is a non-interactive debugger that
is linked to your application doing hard-coded tests in an efficient way
without much overhead. Depending on the build level you choose, NoBug features
will be an integral part of your application making it possible to gather
debugging data for each stage of the application development, including
collecting debugging info for finally deployed applications.</p></div>
<div class="paragraph"><div class="title">What NoBug can&#8217;t do</div><p>NoBug is a (macro-)library, it is not a C/C++ language extension. This
means that code must be called at runtime to benefit from the set up
contracts. What&#8217;s not tested is likely slipping through the net. Being
part of the program itself, it is affected by memory corruption.
Certain kinds of misuse may introduce new bugs (assert expressions with
side effects for example).</p></div>
<h3 id="_support">Support</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="mailinglist"></a></p></div>
<div class="paragraph"><p>When you need help with NoBug, have some ideas about potential features or
think you found a bug, then you can contact the NoBug community and developers
by sending mail to the NoBug mailinglist. Subscription is available at
<a href="http://lists.pipapo.org/cgi-bin/mailman/listinfo/nobug">http://lists.pipapo.org/cgi-bin/mailman/listinfo/nobug</a>.</p></div>
</div>
<h2 id="_building_and_installing">Building and Installing</h2>
<div class="sectionbody">
<h3 id="_supported_platforms">Supported Platforms</h3><div style="clear:left"></div>
<div class="paragraph"><p>NoBug has been developed on Linux, using GCC. It should be possible to port
it to any other POSIX compliant operating system. Platform/compiler
specific things are kept optional. Currently Linux with a GCC that conforms to
C99 is supported for both 32 and 64 bit architectures. For non-GCC compilers,
some features are not available or degraded.</p></div>
<div class="tableblock">
<table rules="all"
width="100%"
frame="hsides"
cellspacing="0" cellpadding="4">
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
<thead>
<tr>
<th align="left" valign="top">CPU    </th>
<th align="left" valign="top">OS          </th>
<th align="left" valign="top">Compiler    </th>
<th align="left" valign="top">State</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" valign="top"><p class="table">x86_64</p></td>
<td align="left" valign="top"><p class="table">Debian</p></td>
<td align="left" valign="top"><p class="table">gcc4</p></td>
<td align="left" valign="top"><p class="table">supported <span class="footnote"><br />[Reference Platform]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">x86</p></td>
<td align="left" valign="top"><p class="table">other Linux</p></td>
<td align="left" valign="top"><p class="table">gcc4</p></td>
<td align="left" valign="top"><p class="table">supported <span class="footnote"><br />[Please report distro specific problems]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">armel</p></td>
<td align="left" valign="top"><p class="table">maemo5</p></td>
<td align="left" valign="top"><p class="table">gcc4</p></td>
<td align="left" valign="top"><p class="table">supported <span class="footnote"><br />[check fails in SDK (emulator bug)]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">x86*</p></td>
<td align="left" valign="top"><p class="table">Mac OS X</p></td>
<td align="left" valign="top"><p class="table">gcc4</p></td>
<td align="left" valign="top"><p class="table">supported</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">x86</p></td>
<td align="left" valign="top"><p class="table">OpenSolaris</p></td>
<td align="left" valign="top"><p class="table">gcc4</p></td>
<td align="left" valign="top"><p class="table">supported</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">x86</p></td>
<td align="left" valign="top"><p class="table">OpenSolaris</p></td>
<td align="left" valign="top"><p class="table">suncc</p></td>
<td align="left" valign="top"><p class="table">mostly    <span class="footnote"><br />[some features are not
available, needs more testing]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"></p></td>
<td align="left" valign="top"><p class="table">*BSD</p></td>
<td align="left" valign="top"><p class="table"></p></td>
<td align="left" valign="top"><p class="table">planned   <span class="footnote"><br />[Need volunteer for testing]<br /></span></p></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph"><p>NoBug has few mandatory dependencies on other software and libraries,
some things such as valgrind support are optional and should be automatically
detected by <tt>./configure</tt>. Nevertheless it
requires <em>pkg-config</em> to be installed or you&#8217;ll get some weird errors at
bootstrapping (<tt>autoreconf</tt>) already.</p></div>
<h3 id="_release_tarballs">Release Tarballs</h3><div style="clear:left"></div>
<div class="paragraph"><p>Releases are available at:
 <a href="http://www.pipapo.org/nobug-releases/">http://www.pipapo.org/nobug-releases/</a></p></div>
<div class="paragraph"><p>Gpg signed tarballs are being used for distribution. The first step involves
checking the signature:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ gpg nobug-VERSION.tar.gz.gpg</tt></pre>
</div></div>
<div class="paragraph"><p>This will produce a nobug-VERSION.tar.gz and report if the signature could be
validated.</p></div>
<div class="paragraph"><p>Since they are built with GNU Autotools, the usual build and install procedure
will work:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ tar xzvf nobug-VERSION.tar.gz
$ cd nobug-VERSION
$ mkdir -p build
$ cd build
$ ../configure
$ make
$ make check           # optional, runs the testsuite
$ make install         # to be done as root,
                       # depending on distribution and setup</tt></pre>
</div></div>
<h3 id="_development_version_via_git">Development Version via Git</h3><div style="clear:left"></div>
<div class="paragraph"><p>You can obtain a development version using Git.  The Git repository can be
cloned from <tt>git://git.pipapo.org/nobug</tt>.</p></div>
<div class="paragraph"><p>Clone the Git repository with:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ git clone git://git.pipapo.org/nobug</tt></pre>
</div></div>
<div class="paragraph"><p>After cloning the repository, then bootstrap the Autotools:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ cd nobug
$ autoreconf -i                # creates the configure file</tt></pre>
</div></div>
<div class="paragraph"><p>Then the usual</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ cd build &amp;&amp; ../configure &amp;&amp; make &amp;&amp; make install</tt></pre>
</div></div>
<div class="paragraph"><p>(as above) will work. Careful users may run</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ make check</tt></pre>
</div></div>
<div class="paragraph"><p>to run a testsuite before installing.</p></div>
<h4 id="_keeping_git_up_to_date">Keeping Git Up To Date</h4>
<div class="paragraph"><p>To update to any new revision, just enter the nobug dir and</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ git pull</tt></pre>
</div></div>
<div class="paragraph"><p>After that you can build as above</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ cd build &amp;&amp; ../configure &amp;&amp; make &amp;&amp; make install</tt></pre>
</div></div>
<div class="paragraph"><p>This default pull will update from the <em>master</em> branch which is meant to be an
on-going stable version (latest release and bugfixes).</p></div>
<div class="paragraph"><p>Major new releases are assembled in the <em>devel</em> branch, generally this is not
considered production ready.</p></div>
<div class="paragraph"><p>All other branches are volatile and may be deleted or rebased anytime without
further notice.</p></div>
<h3 id="_what_is_installed">What Is Installed</h3><div style="clear:left"></div>
<div class="paragraph"><p>Currently, NoBug installs the following:</p></div>
<div class="ulist"><ul>
<li>
<p>
A single nobug.h headerfile. Include this in your code.
</p>
</li>
<li>
<p>
Static libraries. Statically link these to your application:
</p>
<div class="ulist"><ul>
<li>
<p>
<tt>libnobug.a</tt> for singlethreaded programs.
</p>
</li>
<li>
<p>
<tt>libnobugmt.a</tt> for multithreaded programs.
</p>
</li>
</ul></div>
</li>
<li>
<p>
Dynamic Libraries. Dynamically link these to your application:
</p>
<div class="ulist"><ul>
<li>
<p>
<tt>libnobug.so</tt> for singlethreaded programs.
</p>
</li>
<li>
<p>
<tt>libnobugmt.so</tt> for multithreaded programs.
</p>
</li>
<li>
<p>
associated libtool descriptors (<tt>libnobug*.la</tt>)
</p>
</li>
</ul></div>
</li>
<li>
<p>
Pkgconfig control files:
</p>
<div class="ulist"><ul>
<li>
<p>
<tt>nobug.pc</tt> for singlethreaded programs.
</p>
</li>
<li>
<p>
<tt>nobugmt.pc</tt> for multithreaded programs.
</p>
</li>
</ul></div>
</li>
<li>
<p>
The <tt>nobug_rbdump</tt> utility to inspect NoBug ringbuffers.
</p>
</li>
</ul></div>
<h3 id="_generating_this_documentation">Generating This Documentation</h3><div style="clear:left"></div>
<div class="paragraph"><p>There are Makefile targets for generating the documentation, either one of the
following does what you might expect:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ make nobug_manual.txt nobug_manual.html nobug_manual.pdf</tt></pre>
</div></div>
<div class="paragraph"><p>Alternatively, you can generate all the documentation in one go as follows:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ make doc</tt></pre>
</div></div>
<div class="paragraph"><p>Building the documentation has quite some more dependencies than building
NoBug itself. Unless you are a packager you may prefer to refer to the online
documentation or the shipped <em>README</em> which is the complete NoBug reference
manual in text form. Generating the documentation requires: gawk, asciidoc,
graphviz and LaTeX. Check the <tt>[header]</tt> section of doc/latex.conf for required
packages.</p></div>
</div>
<h2 id="_using_nobug">Using NoBug</h2>
<div class="sectionbody">
<div class="paragraph"><p>Your application will have to include the header file <em>nobug.h</em> before NoBug
can be used. Prior including this, a Build-level has to be choosen,
Build-levels are discussed later, c.f., <a href="#buildlevel">buildlevel</a>.
Build-levels are used to define the amount of information NoBug provides to
you. Maximum information is generally required while developing an application
and the ALPHA build-level is most apropriate during this phase; whereas the
released phase of an application will usually only require sparse information,
for which the RELEASE build-level has been conceived.</p></div>
<div class="paragraph"><p>A build-level must always be specified, otherwise the compiler will complain
while attempting to compile your application.  You can specifiy a build level in
one of two ways: use a define statement in one of your modules, or pass the
build-level using the -D flag to your compiler.  Assuming we&#8217;d like to select
the ALPHA build-level in your application, then your module would assume the
following form:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>#define EBUG_ALPHA
#include &lt;nobug.h&gt;</tt></pre>
</div></div>
<div class="paragraph"><p>Subsequently you&#8217;ll have to link the appropriate library to your application.</p></div>
<div class="paragraph"><p>A number of different libraries are available to link depending on whether you
require to statically or dynamically link, or whether your application is multi
or single threaded.  The link order is important on your link line.  Link the NoBug
library <em>after</em> your application&#8217;s modules.  Here&#8217;s how to statically link,
single-threaded applications:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>gcc -o mybinary  <span style="color: #009900">$(WHATEVER_FLAGS)</span> <span style="color: #990000">\</span>
       mymodules<span style="color: #990000">.</span>o <span style="color: #990000">...</span> -lnobug</tt></pre></div></div>
<div class="paragraph"><p>However, for more flexibility in selecting a build-level, you might wish to
define various targets in your makefile, one for each build-level.  In such
cases, the -D flag in your makefile is most appropriate; so your link line for
an ALPHA build with multi-threaded support would look like the following:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>gcc -o mybinary -DEBUG_ALPHA <span style="color: #009900">$(WHATEVER_FLAGS)</span> <span style="color: #990000">\</span>
       mymodules<span style="color: #990000">.</span>o -lnobugmt</tt></pre></div></div>
<div class="paragraph"><p>The NoBug libraries must be initialised before they can be used. To initialise
it call the <tt>NOBUG_INIT</tt> macro, which must be used before any NoBug features
can be used or any thread is created. This is discussed in more detail in the
<a href="#multithreading">multithreading</a> chapter.</p></div>
<div class="paragraph"><p>So putting all this together, our application using NoBug might look something
like the following:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#define</span></span> EBUG_ALPHA   <span style="font-style: italic"><span style="color: #9A1900">/* If we don't use the -D Flag to cc */</span></span>
<span style="font-weight: bold"><span style="color: #000080">#include</span></span> <span style="color: #FF0000">&lt;nobug.h&gt;</span>   <span style="font-style: italic"><span style="color: #9A1900">/* Include the NoBug API */</span></span>

<span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
        NOBUG_INIT<span style="color: #990000">;</span>  <span style="font-style: italic"><span style="color: #9A1900">/* Initialise NoBug libs */</span></span>

        <span style="color: #990000">...</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Many aspects of NoBug can be configured by overriding macros before <em>nobug.h</em> is
included.</p></div>
<h3 id="_autotools_support">Autotools Support</h3><div style="clear:left"></div>
<div class="paragraph"><p>A project using NoBug can use autoconf to check for execinfo and
valgrind:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>AC_CHECK_HEADER<span style="color: #990000">([</span>execinfo<span style="color: #990000">.</span>h<span style="color: #990000">],</span> AC_DEFINE<span style="color: #990000">(</span>HAVE_EXECINFO_H<span style="color: #990000">))</span>
PKG_CHECK_MODULES<span style="color: #990000">(</span>VALGRIND<span style="color: #990000">,</span> <span style="color: #990000">[</span>valgrind<span style="color: #990000">],</span>
                            <span style="color: #990000">[</span>AC_DEFINE<span style="color: #990000">(</span>HAVE_VALGRIND_H<span style="color: #990000">)])</span></tt></pre></div></div>
<div class="paragraph"><p>For Multithreaded programs, you should also check for the availability of pthreads
and flavour with the <tt>ACX_PTHREAD</tt> maxro, see:</p></div>
<div class="paragraph"><p><tt><a href="http://ac-archive.sourceforge.net/ac-archive/acx_pthread.html">http://ac-archive.sourceforge.net/ac-archive/acx_pthread.html</a></tt></p></div>
<div class="paragraph"><p>When the resulting <tt>HAVE_PTHREAD</tt>, <tt>HAVE_EXECINFO_H</tt> and
<tt>HAVE_VALGRIND_H</tt> are defined by the configure script, the
relevant features become available.</p></div>
<div class="paragraph"><p><tt>NOBUG_USE_PTHREAD</tt>, <tt>NOBUG_USE_VALGRIND</tt> and <tt>NOBUG_USE_EXECINFO</tt> will be
defined depeding on the information gathered by configuration. If you do not
want to use any of these features in NoBug, you can override these macros by
setting them to <tt>0</tt> before including <em>nobug.h</em>.</p></div>
<div class="paragraph"><p>If <tt>NVALGRIND</tt> is defined, there will be no support for valgrind.</p></div>
<div class="paragraph"><p>There are many other macros which can be set and overridden by the user to
control behavior. Your help would be appreciated in expanding this documentation
if you find some features useful; or simply contact any of the authors.</p></div>
<div class="paragraph"><div class="title">Using Nobug from a Project using autoconf/automake</div><p>Here is a rather elaborate snippet how to put this all together into a
<tt>configure.ac</tt> file:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900"># define autoheader templates for the config macros</span></span>
AH_TEMPLATE<span style="color: #990000">(</span>EBUG_ALPHA<span style="color: #990000">,</span>
        <span style="color: #990000">[</span>Define to <span style="color: #993399">1</span> <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> selecting NoBug ALPHA build level<span style="color: #990000">])</span>
AH_TEMPLATE<span style="color: #990000">(</span>EBUG_BETA<span style="color: #990000">,</span>
        <span style="color: #990000">[</span>Define to <span style="color: #993399">1</span> <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> selecting NoBug BETA build level<span style="color: #990000">])</span>
AH_TEMPLATE<span style="color: #990000">(</span>NDEBUG<span style="color: #990000">,</span>
        <span style="color: #990000">[</span>Define to <span style="color: #993399">1</span> <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> selecting NoBug RELEASE build level<span style="color: #990000">])</span>

<span style="font-style: italic"><span style="color: #9A1900"># set configure options up</span></span>
AC_ARG_ENABLE<span style="color: #990000">(</span>alpha<span style="color: #990000">,</span> AC_HELP_STRING<span style="color: #990000">([</span>--enable-alpha<span style="color: #990000">],</span>
                <span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #0000FF">select</span></span> NoBug ALPHA build level<span style="color: #990000">]),</span>
        <span style="color: #009900">nobug_level</span><span style="color: #990000">=</span>alpha
        AC_DEFINE<span style="color: #990000">(</span>EBUG_ALPHA<span style="color: #990000">),</span>
<span style="color: #990000">[</span>
AC_ARG_ENABLE<span style="color: #990000">(</span>beta<span style="color: #990000">,</span> AC_HELP_STRING<span style="color: #990000">([</span>--enable-beta<span style="color: #990000">],</span>
                <span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #0000FF">select</span></span> NoBug BETA build level<span style="color: #990000">]),</span>
        <span style="color: #009900">nobug_level</span><span style="color: #990000">=</span>beta
        AC_DEFINE<span style="color: #990000">(</span>EBUG_BETA<span style="color: #990000">),</span>
<span style="color: #990000">[</span>
AC_ARG_ENABLE<span style="color: #990000">(</span>release<span style="color: #990000">,</span> AC_HELP_STRING<span style="color: #990000">([</span>--enable-release<span style="color: #990000">],</span>
                <span style="color: #990000">[</span><span style="font-weight: bold"><span style="color: #0000FF">select</span></span> NoBug RELEASE build level<span style="color: #990000">]),</span>
        <span style="color: #009900">nobug_level</span><span style="color: #990000">=</span>release
        AC_DEFINE<span style="color: #990000">(</span>NDEBUG<span style="color: #990000">),</span>

<span style="font-style: italic"><span style="color: #9A1900"># default to ALPHA</span></span>
        <span style="color: #009900">nobug_level</span><span style="color: #990000">=</span>alpha
        AC_DEFINE<span style="color: #990000">(</span>EBUG_ALPHA<span style="color: #990000">)</span>
<span style="color: #990000">)])])</span>

<span style="font-style: italic"><span style="color: #9A1900"># check for required and optional packages</span></span>
ACX_PTHREAD
AC_CHECK_HEADER<span style="color: #990000">([</span>execinfo<span style="color: #990000">.</span>h<span style="color: #990000">],</span> AC_DEFINE<span style="color: #990000">(</span>HAVE_EXECINFO_H<span style="color: #990000">))</span>
PKG_CHECK_MODULES<span style="color: #990000">(</span>VALGRIND<span style="color: #990000">,</span> <span style="color: #990000">[</span>valgrind<span style="color: #990000">],</span>
        AC_DEFINE<span style="color: #990000">(</span>HAVE_VALGRIND_H<span style="color: #990000">))</span>

<span style="font-style: italic"><span style="color: #9A1900"># finally check for nobug itself, multithreaded here</span></span>
PKG_CHECK_MODULES<span style="color: #990000">(</span>NOBUGMT_EXAMPLE<span style="color: #990000">,</span> <span style="color: #990000">[</span>nobugmt <span style="color: #990000">&gt;=</span> <span style="color: #993399">201006.1</span><span style="color: #990000">],</span>
        AC_DEFINE<span style="color: #990000">(</span>HAVE_NOBUGMT_H<span style="color: #990000">),</span>
        AC_MSG_ERROR<span style="color: #990000">([</span>NoBug pkg-config metadata missing<span style="color: #990000">])</span>
<span style="color: #990000">)</span></tt></pre></div></div>
<h3 id="_additional_tools">Additional Tools</h3><div style="clear:left"></div>
<div class="paragraph"><p>Various peripheral tools can be used by NoBug depending on the requirements
of the application and the detail desired by the user.  Such tools can provide
additional, detailed information on the application and its behaviour.
However, some applications may not require such detail and the associated
overhead in information, and users may decide to omit excess information by
excluding such tools.</p></div>
<div class="paragraph"><p>At the moment NoBug supports the optional inclusion of gdb, valgrind and support
for multi-threaded applications and the information that can be provided by
these tools.  However, support for other tools may be supplied in the future,
e.g. the dbx debugger on OpenSolaris.</p></div>
<h3 id="_link_appropriate_library">Link Appropriate Library</h3><div style="clear:left"></div>
<div class="paragraph"><p>Finally, the appropriate library (for either single or multi-threaded
applications) is linked to the project.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<strong>libnobug</strong>
</dt>
<dd>
<p>
Link-in this library for single threaded applications.
</p>
</dd>
<dt class="hdlist1">
<strong>libnobugmt</strong>
</dt>
<dd>
<p>
Link with this library for multi-threaded applications.
</p>
</dd>
</dl></div>
<div class="paragraph"><p>NoBug installed static and dynamic libraries. When your application
uses multiple dynamic libraries which use NoBug or you build a dynamic
library, then you have to link against the dynamic library.</p></div>
<div class="paragraph"><p>You can use the <tt>pkg-config</tt> tool to gather information about NoBug in
your build system. For example you can query the NoBug version which is
installed on your system:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ pkg-config --modversion nobug
201006.1</tt></pre>
</div></div>
</div>
<h2 id="_initialization">Initialization</h2>
<div class="sectionbody">
<h3 id="_global_initialization">Global Initialization</h3><div style="clear:left"></div>
<div class="paragraph"><p>Before anything from NoBug can be used, NoBug must be initialised. This
is archived by calling the <tt>NOBUG_INIT()</tt> macro before using any other of the
NoBug facilities.</p></div>
<div class="paragraph"><p><tt>NOBUG_INIT</tt> can be called more than once, subsequent calls will be a no-op,
thus initialising in main and in libraries won&#8217;t interfere with one another.</p></div>
<div class="paragraph"><p>Care must be taken when one already using NoBug features from dynamic
initialized things in C++, one has to ensure that NoBug gets initialized first
possibly by pulling up a singleton at very first.</p></div>
<h3 id="_destroying_nobug">Destroying NoBug</h3><div style="clear:left"></div>
<div class="paragraph"><p>Since NoBug is intended to be available throughout its whole lifetime,
destroying it is not to be advised. Nevertheless, there is a destroy function</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>void nobug_destroy (void);</tt></pre>
</div></div>
<div class="paragraph"><p>to shutdown NoBug, and this frees all resources associated with it.
This is mostly used in the NoBug testsuite itself to check for leaks,
and it might be useful for other programs which employ some kind of
leak checker.</p></div>
<h3 id="_init_logging_flags">Init logging Flags</h3><div style="clear:left"></div>
<div class="paragraph"><p>If you want to use environment variable controlled debuging, then you have to
initialize each defined flag with</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_INIT_FLAG(flagname)</tt></pre>
</div></div>
<div class="paragraph"><p>or</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_INIT_FLAG_LIMIT(flagname, default)</tt></pre>
</div></div>
<div class="paragraph"><p>or one of the C++ compatibility macros.</p></div>
<div class="paragraph"><p>This is documented later in the <a href="#logconfig">logging configuration</a> chapter.</p></div>
<h3 id="_threads">Threads</h3><div style="clear:left"></div>
<div class="paragraph"><p>In Multithreaded programs you should assign an identifier to each
thread. A thread identifier is a string which will be automatically
appended with an underscore and an incrementing integer. It is is
created using the following:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_THREAD_ID_SET(name)</tt></pre>
</div></div>
<div class="paragraph"><p>For example, calling <tt>NOBUG_THREAD_ID_SET("worker")</tt> will result in a thread
identifier <em>worker_1</em>.</p></div>
<div class="paragraph"><p>If you don&#8217;t set an identifier, then NoBug will automatically assign
one.  This is further documented in the <a href="#multithreading">multi threading</a>
section of this manual.</p></div>
<div class="paragraph"><div class="title">Initialization example</div><p><a id="initexample"></a></p></div>
<div class="paragraph"><p>Thus the boilerplate code to pulling up NoBug in a multithreaded program looks
like (omit <tt>NOBUG_THREAD_ID_SET()</tt> in single threaded programs):</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#include</span></span> <span style="color: #FF0000">&lt;nobug.h&gt;</span>
<span style="font-weight: bold"><span style="color: #000000">NOBUG_DEFINE_FLAG</span></span><span style="color: #990000">(</span>example<span style="color: #990000">);</span>

<span style="color: #990000">...</span>

<span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #000000">NOBUG_INIT</span></span><span style="color: #990000">();</span>
    <span style="font-weight: bold"><span style="color: #000000">NOBUG_THREAD_ID_SET</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"main"</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #000000">NOBUG_INIT_FLAG</span></span><span style="color: #990000">(</span>example<span style="color: #990000">);</span>

    <span style="color: #990000">...</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
</div>
<h2 id="_debugging_information_granularity_the_build_levels">Debugging Information Granularity: The Build Levels</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="buildlevel"></a></p></div>
<div class="paragraph"><p>There are three different levels of debugging information available: alpha, beta
and release.  One of these levels must be specified before compiling, otherwise
an error while compiling will occur.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<strong>ALPHA</strong>
</dt>
<dd>
<p>
        This debugging level is envisaged for the development phase of a project
        where exhaustive testing and logging are required. All NoBug features
        are enabled.
</p>
</dd>
<dt class="hdlist1">
<strong>BETA</strong>
</dt>
<dd>
<p>
        This debugging level is more appropriate for projects beyond the
        development phase and ready for field-testing with users willing to
        test the software. The most expensive debugging features are disabled
        at this level.
</p>
</dd>
<dt class="hdlist1">
<strong>RELEASE</strong>
</dt>
<dd>
<p>
        This level is for final, end-users. Logging is mostly retained but
        assertions and other checking is disabled.
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">Select a Build Level</div><p>A logging level can be selected by either using a define before including
<tt>nobug.h</tt>, or by passing the appropriate level using the -D switch
to the compiler:</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<strong>ALPHA</strong>
</dt>
<dd>
<p>
       <tt>-DEBUG_ALPHA</tt> / <tt>#define EBUG_ALPHA</tt>
</p>
</dd>
<dt class="hdlist1">
<strong>BETA</strong>
</dt>
<dd>
<p>
       <tt>-DEBUG_BETA</tt> / <tt>#define EBUG_BETA</tt>
</p>
</dd>
<dt class="hdlist1">
<strong>RELEASE</strong>
</dt>
<dd>
<p>
       <tt>-DNDEBUG</tt> / <tt>#define NDEBUG</tt>
</p>
</dd>
</dl></div>
<div class="paragraph"><p>If a log level has not been selected, NoBug will abort the
compilation with an error.</p></div>
</div>
<h2 id="_logging_concepts">Logging Concepts</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="loggingconcepts"></a></p></div>
<div class="paragraph"><p>Nearly all NoBug Macros emit some <a href="#logformat">log message</a>. NoBug gives
the user fine grained control over these log messages to display only
interesting information without loosing details.</p></div>
<div class="paragraph"><p>Log messages can be routed to various destinations.  The following destintaions
are available:</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<strong>RINGBUFFER</strong>
</dt>
<dd>
<p>
        The underlying storage backend. Messages are appended to the
        end of the buffer, overwriting older messages at the front of
        the buffer. NoBug comes with a highly efficient ringbuffer
        implementation. This ringbuffer is temporary by default but
        can be made persistent on disk which can be inspected with the
        <em>nobug_rbdump</em> tool.
</p>
</dd>
<dt class="hdlist1">
<strong>CONSOLE</strong>
</dt>
<dd>
<p>
        This is either just stderr, or, if running under a supported
        debugger, the debuggers facilities to print messages will be used.
</p>
</dd>
<dt class="hdlist1">
<strong>FILE</strong>
</dt>
<dd>
<p>
        The user can open files for log messages.
</p>
</dd>
<dt class="hdlist1">
<strong>SYSLOG</strong>
</dt>
<dd>
<p>
        Messages are sent to the standard system logging daemon.
</p>
</dd>
<dt class="hdlist1">
<strong>APPLICATION</strong>
</dt>
<dd>
<p>
        There are hooks which allow the programmer to catch logmessages and
        display them in an application which are defined by the application.
</p>
</dd>
</dl></div>
<div class="paragraph"><p>Each log message has a priority describing its severity in the same way as
syslog messages do.</p></div>
<div class="paragraph"><p>All non-fatal messages are associated with a programmer defined flag
describing the source of the message (subsystem, module, &#8230;). This is
referred to as <em>channels</em> in other logging systems. <a href="#logflags">Flags</a> make
it possible to configure logging in much detail at runtime.</p></div>
<div class="paragraph"><p>Putting this all together: A user can define which source/flag will be logged at
what priority level and to which destination. To make this all easier, NoBug
tries to provide reasonable defaults.</p></div>
<h3 id="_configuration">Configuration</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="logconfig"></a></p></div>
<div class="paragraph"><div class="title">Log Levels</div><p>Each log macro has an explicit or implicit log-level which
correspondends to syslog levels. Logging is only emitted when the
message is more severe or the same as a defined limit.</p></div>
<div class="paragraph"><p>INDEX Default levels for logging;loggingleveldefaults; table showing defaults log levels</p></div>
<div class="tableblock">
<table rules="all"
width="100%"
frame="hsides"
cellspacing="0" cellpadding="4">
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
<thead>
<tr>
<th align="left" valign="top">            </th>
<th align="left" valign="top">ALPHA    </th>
<th align="left" valign="top">BETA    </th>
<th align="left" valign="top">RELEASE</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" valign="top"><p class="table">ringbuffer <span class="footnote"><br />[ringbuffer must always be most verbose]<br /></span></p></td>
<td align="left" valign="top"><p class="table">TRACE</p></td>
<td align="left" valign="top"><p class="table">INFO</p></td>
<td align="left" valign="top"><p class="table">NOTICE</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">console</p></td>
<td align="left" valign="top"><p class="table">INFO</p></td>
<td align="left" valign="top"><p class="table">NOTICE</p></td>
<td align="left" valign="top"><p class="table">-1 <span class="footnote"><br />[no log to console in release]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">file</p></td>
<td align="left" valign="top"><p class="table">TRACE</p></td>
<td align="left" valign="top"><p class="table">NOTICE</p></td>
<td align="left" valign="top"><p class="table">WARNING</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">syslog</p></td>
<td align="left" valign="top"><p class="table">-1 <span class="footnote"><br />[no syslog for test runs]<br /></span></p></td>
<td align="left" valign="top"><p class="table">NOTICE</p></td>
<td align="left" valign="top"><p class="table">WARNING</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">application</p></td>
<td align="left" valign="top"><p class="table">INFO</p></td>
<td align="left" valign="top"><p class="table">WARNING</p></td>
<td align="left" valign="top"><p class="table">ERROR</p></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph"><p>Depending on the build level, there is a default logging target and a default
limit which is selected when the user doesn&#8217;t specify one.</p></div>
<div class="paragraph"><div class="title">The following default limits are</div><p><a id="limitslogging"></a></p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
In <strong>ALPHA</strong> builds
</dt>
<dd>
<p>
     <tt>NOBUG_LOG_LIMIT_ALPHA</tt> is used which defaults to <tt>LOG_INFO</tt>
</p>
</dd>
<dt class="hdlist1">
In <strong>BETA</strong> builds
</dt>
<dd>
<p>
     <tt>NOBUG_LOG_LIMIT_BETA</tt> is used and defaults to <tt>LOG_WARNING</tt>
</p>
</dd>
<dt class="hdlist1">
In <strong>RELEASE</strong> builds
</dt>
<dd>
<p>
     <tt>NOBUG_LOG_LIMIT_RELEASE</tt> is used and defaults to <tt>LOG_CRIT</tt>
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">The default targets are</div><p><a id="targetslogging"></a></p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
In <strong>ALPHA</strong> builds
</dt>
<dd>
<p>
    <tt>NOBUG_LOG_TARGET_ALPHA</tt> defaulting to <tt>NOBUG_TARGET_CONSOLE</tt>
</p>
</dd>
<dt class="hdlist1">
In <strong>BETA</strong> builds
</dt>
<dd>
<p>
     <tt>NOBUG_LOG_TARGET_BETA</tt> defaulting to <tt>NOBUG_TARGET_FILE</tt>
</p>
</dd>
<dt class="hdlist1">
In <strong>RELEASE</strong> builds
</dt>
<dd>
<p>
     <tt>NOBUG_LOG_TARGET_RELEASE</tt> defaulting to <tt>NOBUG_TARGET_SYSLOG</tt>
</p>
</dd>
</dl></div>
<div class="paragraph"><p>You can override all these values with other limits or targets before
including <em>nobug.h</em>. As an alternative, <tt>NOBUG_LOG_LIMIT</tt> and
<tt>NOBUG_LOG_TARGET</tt> can be defined to override all defaults at once.</p></div>
<h3 id="_log_flags">Log Flags</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="logflags"></a></p></div>
<div class="paragraph"><p>Flags are used to inform NoBug about subsystems/modules or even finer
grained sections of the code. These are referred to as <em>channels</em> in other
logging libraries.</p></div>
<div class="paragraph"><p>Flags are generally used as follows:</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
Declare the flag.
</p>
</li>
<li>
<p>
Define the flag.
</p>
</li>
<li>
<p>
Initialise the flag.
</p>
</li>
</ol></div>
<div class="paragraph"><p>To declare a flag, it is suggested to do so in a header file:
<a id="DECLAREFLAG"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_DECLARE_FLAG(flagname)</tt></pre>
</div></div>
<div class="paragraph"><p>The flag should then be defined most appropriately in some implementation file
by using one of the following macros:
<a id="DEFINEFLAG"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_DEFINE_FLAG(flagname)</tt></pre>
</div></div>
<div class="paragraph"><p>or:
<a id="DEFINEFLAGLIMIT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_DEFINE_FLAG_LIMIT(flagname, limit)</tt></pre>
</div></div>
<div class="paragraph"><p>Moreover, macros are available that accept a <em>parent</em> flag as a parameter, which is then
used to initialize the defaults from another flag:
<a id="DEFINEFLAGPARENT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_DEFINE_FLAG_PARENT(flagname, parent)</tt></pre>
</div></div>
<div class="paragraph"><p>or
<a id="DEFINEFLAGPARENTLIMIT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_DEFINE_FLAG_PARENT_LIMIT(flagname, parent, limit)</tt></pre>
</div></div>
<div class="paragraph"><p>This can be used to create hierarchies of flags.</p></div>
<h4 id="_c_support_c_logflags">C++ support, C++ logflags</h4>
<div class="paragraph"><p><a id="Cpluspluslogflags"></a></p></div>
<div class="paragraph"><p>Additional macros are available for applications written in C++:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_CPP_DEFINE_FLAG(name)
NOBUG_CPP_DEFINE_FLAG_PARENT(name, parent)
NOBUG_CPP_DEFINE_FLAG_LIMIT(name, default)
NOBUG_CPP_DEFINE_FLAG_PARENT_LIMIT(name, parent, default)</tt></pre>
</div></div>
<div class="paragraph"><p>These macros statically initialize the flags when they are defined, there is no
need to call <tt>NOBUG_INIT_FLAG()</tt> (see below).</p></div>
<h4 id="_logging_flag_initialization">Logging Flag Initialization</h4>
<div class="paragraph"><p><a id="INITFLAG"></a></p></div>
<div class="paragraph"><p>After a flag has been declared and defined, it has to be initialised:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_INIT_FLAG(flagname)</tt></pre>
</div></div>
<div class="paragraph"><p>or</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_INIT_FLAG_LIMIT(flagname, default)</tt></pre>
</div></div>
<div class="paragraph"><p>Use either of these macros once at the begining your program for each flag.
This macros will parse the <em>$NOBUG_LOG</em> envirionment variable at runtime
initializing the given flag dynamically.</p></div>
<div class="paragraph"><p>For flags defined with <tt>NOBUG_DEFINE_FLAG(flagname)</tt> the defaults are
initialized as in the <a href="#loggingleveldefaults">table above</a>, while
<tt>NOBUG_DEFINE_FLAG_LIMIT(flagname, level)</tt> is used to initialize the default
target (depending on build level) to <tt>level</tt>.</p></div>
<h4 id="_force_declarations_only">Force declarations only</h4>
<div class="paragraph"><p><a id="NOBUGDECLAREONLY"></a></p></div>
<div class="paragraph"><p>When <tt>NOBUG_DECLARE_ONLY</tt> defined to be <tt>1</tt> then all flag definitions here become
declarations only. When this is defined to be <tt>0</tt> (which is the default) then
all definitions behave as described. This can be used to construct a
headerfile which only contains definitions, but, by default, yield only
declarations. This provides one convenient single point to maintain flag
configurations.</p></div>
<div class="listingblock">
<div class="title">flags.h</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#include</span></span> <span style="color: #FF0000">&lt;nobug.h&gt;</span>

<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> if not included from flags.c then declare the flags,</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> else define them</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #000080">#ifndef</span></span> FLAGS_C
<span style="font-weight: bold"><span style="color: #000080">#define</span></span> NOBUG_DECLARE_ONLY <span style="color: #993399">1</span>
<span style="font-weight: bold"><span style="color: #000080">#endif</span></span>

<span style="font-style: italic"><span style="color: #9A1900">/* use only DEFINE_FLAG here */</span></span>
<span style="font-weight: bold"><span style="color: #000000">NOBUG_DEFINE_FLAG</span></span><span style="color: #990000">(</span>example<span style="color: #990000">);</span>

<span style="font-style: italic"><span style="color: #9A1900">/*</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> Reset it to 0 to cause no trouble</span></span>
<span style="font-style: italic"><span style="color: #9A1900"> */</span></span>
<span style="font-weight: bold"><span style="color: #000080">#ifndef</span></span> FLAGS_C
<span style="font-weight: bold"><span style="color: #000080">#undef</span></span> NOBUG_DECLARE_ONLY
<span style="font-weight: bold"><span style="color: #000080">#define</span></span> NOBUG_DECLARE_ONLY <span style="color: #993399">0</span>
<span style="font-weight: bold"><span style="color: #000080">#endif</span></span></tt></pre></div></div>
<div class="listingblock">
<div class="title">flags.c</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#define</span></span> FLAGS_C
<span style="font-weight: bold"><span style="color: #000080">#include</span></span> <span style="color: #FF0000">"flags.h"</span>
<span style="color: #990000">...</span></tt></pre></div></div>
<h3 id="_controlling_what_gets_logged">Controlling what gets logged</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="NOBUGENV"></a></p></div>
<div class="paragraph"><p>The <tt>NOBUG_INIT_FLAG...</tt> series of macros parse the environment variable
<em>$NOBUG_LOG</em>. This enviromnet variable is thus used to configure what is
logged at runtime. Its syntax is as following:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>logdecl<span style="color: #009900">_</span>list <span style="color: #990000">--&gt;</span> logdecl<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">any</span></span><span style="color: #990000">(</span> <span style="color: #FF0000">','</span> logdecl<span style="color: #009900">_</span>list<span style="color: #990000">).</span>

logdecl <span style="color: #990000">--&gt;</span> flag<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">opt</span></span><span style="color: #990000">(</span>limitdecl<span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">any</span></span><span style="color: #990000">(</span>targetdecl<span style="color: #990000">)).</span>

flag <span style="color: #990000">--&gt;</span> <span style="color: #FF0000">"identifier of a flag"</span><span style="color: #990000">.</span>

limitdecl <span style="color: #990000">--&gt;</span> <span style="color: #FF0000">':'</span><span style="color: #990000">,</span> <span style="color: #FF0000">"LIMITNAME"</span><span style="color: #990000">.</span>

targetdecl <span style="color: #990000">--&gt;</span> <span style="color: #FF0000">'@'</span><span style="color: #990000">,</span> <span style="color: #FF0000">"targetname"</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">opt</span></span><span style="color: #990000">(</span>targetopts<span style="color: #990000">).</span>

targetopts <span style="color: #990000">--&gt;</span> <span style="color: #FF0000">'('</span><span style="color: #990000">,</span> <span style="color: #FF0000">"options for target"</span><span style="color: #990000">,</span> <span style="color: #FF0000">')'</span><span style="color: #990000">,</span> <span style="font-weight: bold"><span style="color: #000000">opt</span></span><span style="color: #990000">(</span>targetopts<span style="color: #990000">).</span></tt></pre></div></div>
<div class="paragraph"><p>Roughly speaking, <em>$NOBUG_LOG</em> contains a comma separated list of declarations
for flags, which is the name of the flag followed by a limit which is all
written in uppercase letters and preceeded by a colon, followed by target
declarations which are the names of targets, introduced by an at sign. Target
declarations can have options, which are described in the next section. Limit
and target declarations are optional and defaults are selected from the
<a href="#loggingleveldefaults">table above</a>. The defaults presented here are
currently an approximation of what might be viable. The default values used
here may be redefined in a future release.</p></div>
<h4 id="_targets_and_options">Targets and Options</h4>
<div class="paragraph"><p><a id="loggingoptions"></a></p></div>
<div class="paragraph"><p>The Following options are available:</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>@ringbuffer</tt>
</dt>
<dd>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>(file=</tt><em>filename</em><tt>)</tt>
</dt>
<dd>
<p>
    set <em>filename</em> for the backing ringbuffer
</p>
</dd>
<dt class="hdlist1">
<tt>(size=</tt><em>nnn</em><tt>)</tt>
</dt>
<dd>
<p>
    set size of the ringbuffer to <em>nnn</em> bytes, rounded-off up to the next page
    boudary
</p>
</dd>
<dt class="hdlist1">
<tt>(append)</tt>
</dt>
<dd>
<p>
    don&#8217;t erase existing ringbuffer, start where it left off
</p>
</dd>
<dt class="hdlist1">
<tt>(keep)</tt>
</dt>
<dd>
<p>
    keep file after application ends
</p>
</dd>
<dt class="hdlist1">
<tt>(temp)</tt>
</dt>
<dd>
<p>
    unlink file instantly at creation
</p>
</dd>
</dl></div>
</dd>
</dl></div>
<div class="paragraph"><p>The default ringbuffer is a temporary file in <em>/tmp</em> with the <tt>temp</tt> option.
This means it will not be available and accessible for inspection, but it also
won&#8217;t leave any stale data behind when the application ends.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>@console</tt>
</dt>
<dd>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>(fd=</tt><em>n</em><tt>)</tt>
</dt>
<dd>
<p>
    redirect console output to fd <em>n</em>
</p>
</dd>
</dl></div>
</dd>
</dl></div>
<div class="paragraph"><p>When running under a debugger, NoBug tries to use debugger facilities
to print console messages.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>@file</tt>
</dt>
<dd>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>(name=</tt><em>filename</em><tt>)</tt>
</dt>
<dd>
<p>
    log to <em>filename</em>
</p>
</dd>
<dt class="hdlist1">
<tt>(append)</tt>
</dt>
<dd>
<p>
    append to (existing) logfile
</p>
</dd>
</dl></div>
</dd>
<dt class="hdlist1">
<tt>@syslog</tt>
</dt>
<dd>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>(ident=</tt><em>name</em><tt>)</tt>
</dt>
<dd>
<p>
    global prefix for syslog
</p>
</dd>
<dt class="hdlist1">
<tt>(cons)</tt>
</dt>
<dd>
<p>
    log to system console if syslog is down
</p>
</dd>
<dt class="hdlist1">
<tt>(pid)</tt>
</dt>
<dd>
<p>
    include the process identifier in the log
</p>
</dd>
<dt class="hdlist1">
<tt>(perror)</tt>
</dt>
<dd>
<p>
    log to stderr as well (Not available on all systems)
</p>
</dd>
</dl></div>
</dd>
</dl></div>
<div class="listingblock">
<div class="title">How $NOBUG_LOG is used</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-style: italic"><span style="color: #9A1900"># set limit to the default target and default limit</span></span>
<span style="font-style: italic"><span style="color: #9A1900"># (see table above)</span></span>
<span style="color: #009900">NOBUG_LOG</span><span style="color: #990000">=</span><span style="color: #FF0000">'flag,other'</span>

<span style="font-style: italic"><span style="color: #9A1900"># set the limit of the default target to DEBUG</span></span>
<span style="color: #009900">NOBUG_LOG</span><span style="color: #990000">=</span><span style="color: #FF0000">'flag:DEBUG'</span>

<span style="font-style: italic"><span style="color: #9A1900"># set console and syslog limits for flag to DEBUG</span></span>
<span style="color: #009900">NOBUG_LOG</span><span style="color: #990000">=</span><span style="color: #FF0000">'flag:DEBUG@console@syslog'</span>

<span style="font-style: italic"><span style="color: #9A1900"># trace 'other' to a persistent ringbuffer</span></span>
<span style="color: #009900">NOBUG_LOG</span><span style="color: #990000">=\</span>
 <span style="color: #FF0000">'other:TRACE@ringbuffer(file=log.rb)(size=8192)(keep)'</span></tt></pre></div></div>
<h3 id="_predefined_flags">Predefined Flags</h3><div style="clear:left"></div>
<div class="paragraph"><p>There are some debugging flags which are predefined by NoBug.</p></div>
<div class="paragraph"><div class="title">NOBUG_ON</div><p><a id="NOBUGON"></a></p></div>
<div class="paragraph"><p>The flag <tt>NOBUG_ON</tt> is always enabled at LOG_DEBUG level. This is
static and can not be changed.</p></div>
<div class="paragraph"><div class="title">NOBUG_ANN</div><p><a id="NOBUGANN"></a></p></div>
<div class="paragraph"><p>The flag <tt>NOBUG_ANN</tt> is used for the source annotations. This is
static and can not be changed. It differs from <tt>NOBUG_ON</tt> as in
never logging to syslog and only define a LOG_WARNING limit for the
application callback.</p></div>
<div class="paragraph"><div class="title">nobug</div><p><a id="nobugflag"></a></p></div>
<div class="paragraph"><p>Actions on NoBug itself will be logged under the <tt>nobug</tt> flag itself.
To see whats going on you can enable it with <tt>NOBUG_LOG=nobug:TRACE</tt>.
This is particulary useful to check if <tt>NOBUG_INIT_FLAG()</tt> is called on all flags.</p></div>
<div class="listingblock">
<div class="title">Using log flags (example.c)</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#include</span></span> <span style="color: #FF0000">&lt;nobug.h&gt;</span>

<span style="font-weight: bold"><span style="color: #000000">NOBUG_DEFINE_FLAG</span></span> <span style="color: #990000">(</span>test<span style="color: #990000">);</span>

<span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
   NOBUG_INIT<span style="color: #990000">;</span>
   <span style="font-weight: bold"><span style="color: #000000">NOBUG_INIT_FLAG</span></span> <span style="color: #990000">(</span>test<span style="color: #990000">);</span>

   <span style="font-weight: bold"><span style="color: #000000">TRACE</span></span> <span style="color: #990000">(</span>test<span style="color: #990000">,</span> <span style="color: #FF0000">"Logging enabled"</span><span style="color: #990000">);</span>
   <span style="font-weight: bold"><span style="color: #000000">TRACE</span></span> <span style="color: #990000">(</span>NOBUG_ON<span style="color: #990000">,</span> <span style="color: #FF0000">"Always on"</span><span style="color: #990000">);</span>
   <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="listingblock">
<div class="title">test it:</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>$ cc -DEBUG_ALPHA -lnobug example<span style="color: #990000">.</span>c
$ <span style="color: #990000">.</span>/a<span style="color: #990000">.</span>out
<span style="color: #993399">0000000003</span><span style="color: #990000">:</span> TRACE<span style="color: #990000">:</span> example<span style="color: #990000">.</span>c<span style="color: #990000">:</span><span style="color: #993399">11</span><span style="color: #990000">:</span> -<span style="color: #990000">:</span> main<span style="color: #990000">:</span> Always on

$ <span style="color: #009900">NOBUG_LOG</span><span style="color: #990000">=</span><span style="font-weight: bold"><span style="color: #0000FF">test</span></span><span style="color: #990000">:</span>TRACE <span style="color: #990000">.</span>/a<span style="color: #990000">.</span>out
<span style="color: #993399">0000000003</span><span style="color: #990000">:</span> TRACE<span style="color: #990000">:</span> example<span style="color: #990000">.</span>c<span style="color: #990000">:</span><span style="color: #993399">10</span><span style="color: #990000">:</span> -<span style="color: #990000">:</span> main<span style="color: #990000">:</span> Logging enabled
<span style="color: #993399">0000000004</span><span style="color: #990000">:</span> TRACE<span style="color: #990000">:</span> example<span style="color: #990000">.</span>c<span style="color: #990000">:</span><span style="color: #993399">11</span><span style="color: #990000">:</span> -<span style="color: #990000">:</span> main<span style="color: #990000">:</span> Always on</tt></pre></div></div>
<h3 id="_log_line_format">Log Line Format</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="logformat"></a></p></div>
<div class="paragraph"><p>Logging follows a rather rigid format and is not configurable. This is
intentional to make it easier to compare and process logs afterwards. NoBug is
designed with the goal to effectively do very fine grained logging and then
analyze this logs later, either manually or with further tools.</p></div>
<div class="paragraph"><p>A typical log looks like:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>0000000003: TRACE: test.c:10: thread_1: main: message
0000000003! TRACE: test.c:10: thread_1: main: continued
0000000005: NOTICE: test.c:15: thread_1: main: next</tt></pre>
</div></div>
<div class="paragraph"><p>The components are delimited by ": " or in one case by "! " are as following:</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
<strong>Sequence Number</strong><br />
   Each logging event increments a counter, for preformance (and privacy)
   reasons we do not use timestamps here. The sequence number is represented by
   ten decimal digits, overflows are not specially handled. There is a special
   case that when the final message (see below) spans more log lines, then the
   delimiter after the sequence number is a "! " and not ": ". The sequence
   numbers in a log can be sparse because not every event is send to the log,
   the left out lines are still available in the ringbuffer.
</p>
</li>
<li>
<p>
<strong>NoBug Facility</strong><br />
   Describes what NoBug macro produced the output. This can be a simple
   annotation or logging as well as assertions or one of the more complex
   NoBug facilities.
</p>
</li>
<li>
<p>
<strong>File and Linenumber</strong><br />
   The filename is only printed without it&#8217;s path. This is important for some
   reasons. First it makes the log vastly more readable and second depending
   on source location and build system and configuration thereof paths are not
   easily reproducible, this makes it hard to use simple tools like grep or
   diff on logs generated on different systems. For some messages the filename
   and/or the linenumber is not available or meaningless, a "-" is used then.
</p>
</li>
<li>
<p>
<strong>Thread Identifier</strong><br />
   Shows which thread generated this message. The single threaded version of
   NoBug uses always "-".
</p>
</li>
<li>
<p>
<strong>Function Name</strong><br />
   Gives the function in which the logging occured. For a lot macros it is
   possible to pass a context (file, line and function name) around to make it
   possible to delegate validation and logging to some special functions while
   still being able to present the context where the call originated. NoBug
   only uses the function name as identifier here no pretty printed prototype
   or demangled C++ method. The reason for this is that neither is well
   specified an may yield to non unique results which may even interfere with
   the logging format syntax and thus make it very unreliable to write tools
   to process logs. Some contexts dont provide a function name, a "-" is used
   then.
</p>
</li>
<li>
<p>
<strong>Message</strong><br />
   The rest of the log line is the user-defined and optional message part.
   There are no constraints on the format and one should constrain himself to
   print only meaningful textual information. Embedded newlines will always be
   translated into a new logging line as shown in the example above.
</p>
</li>
</ol></div>
</div>
<h2 id="_macros_overview">Macros Overview</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="macros"></a></p></div>
<div class="paragraph"><p>The NoBug interface is almost completely implemented using
preprocessor macros. This is required because NoBug uses the
<tt>__FILE__</tt>, <tt>__LINE__</tt> and <tt>__func__</tt> macros to
log information on the current file, line number and function.
Moreover, all the flat namespace uppercase identifiers make it easy
to recognise the macros in source code.
<a id="DISABLESHORTNAMES"></a></p></div>
<div class="paragraph"><p>All macros are available without condition with a <tt>NOBUG_...</tt> prefix. Many
macros (the common cases) are also available without this prefix as a
convenience, however macros without this prefix must not have been previously
defined. When <tt>NOBUG_DISABLE_SHORTNAMES</tt> is defined before including
<em>nobug.h</em>, then only the <tt>NOBUG_</tt> prefixed macros are available and the short
forms will never be defined.</p></div>
<div class="paragraph"><p>A set of macros are provided by NoBug that are postfixed by <tt>..._IF</tt>. These
macros have the following form:</p></div>
<div class="ulist"><ul>
<li>
<p>
<tt>..._IF(when, ...)</tt>
</p>
</li>
</ul></div>
<div class="paragraph"><p>They perform the desired action only if <tt>when</tt> is true. For example:</p></div>
<div class="ulist"><ul>
<li>
<p>
<tt>REQUIRE_IF(foo != NULL, foo-&gt;something == constrained)</tt>
</p>
</li>
</ul></div>
<div class="paragraph"><p>The assertion will only be performed if <tt>foo</tt> is non <tt>NULL</tt>.</p></div>
<div class="paragraph"><p>NoBug also contains a facility to pass the <a href="#NOBUGCONTEXT">source context</a>
(file, line, function) around, this can be used to write functions which
handle things where one is more interested in the context of the caller rather
than the location where the macro appears.</p></div>
<div class="paragraph"><p>These macros are postfixed with <tt>..._CTX</tt> and take an extra context
parameter (usually at last but before the logging format specifier and
any variable argument list). The context parameter must be of type
<tt>const struct nobug_context</tt>.</p></div>
<div class="paragraph"><p>When the <tt>_CTX</tt> context form is used together with the conditional <tt>_IF</tt>
form then the suffix of the macros is always <tt>..._IF_CTX</tt>.</p></div>
<div class="paragraph"><p>Macros that can accept a context have no short form and must always be
prefixed with <tt>NOBUG_...</tt>.</p></div>
<h3 id="_parameters_types">Parameters types</h3><div style="clear:left"></div>
<div class="paragraph"><p>We use names for parameters which describe their type. These names are
orthogonal through all macro definitions.</p></div>
<div class="tableblock">
<table rules="all"
width="100%"
frame="hsides"
cellspacing="0" cellpadding="4">
<col width="16%" />
<col width="83%" />
<tbody>
<tr>
<td align="left" valign="top"><p class="table"><tt>when</tt></p></td>
<td align="left" valign="top"><p class="table">Assertion is only performed if expression <tt>when</tt> is true at runtime</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>expr</tt></p></td>
<td align="left" valign="top"><p class="table">Test without side effects</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>flag</tt></p></td>
<td align="left" valign="top"><p class="table">Destination flag for control logging at runtime</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>type</tt></p></td>
<td align="left" valign="top"><p class="table">Data type to be checked as a single identifier name</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>pointer</tt></p></td>
<td align="left" valign="top"><p class="table">Pointer to type</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>lvl</tt></p></td>
<td align="left" valign="top"><p class="table">Log level</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>depth</tt></p></td>
<td align="left" valign="top"><p class="table">Depth for invariants and dumps</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>context</tt></p></td>
<td align="left" valign="top"><p class="table">Source context of type <tt>struct nobug_context</tt></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table"><tt>...</tt></p></td>
<td align="left" valign="top"><p class="table">printf-like format string followed by its arguments</p></td>
</tr>
</tbody>
</table>
</div>
<h3 id="_source_contexts">Source Contexts</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="NOBUGCONTEXT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_CONTEXT
NOBUG_CONTEXT_NOFUNC</tt></pre>
</div></div>
<div class="paragraph"><p>NoBug passes information about the source location of a given statement in
<tt>const struct nobug_context</tt> structures. These can be generated with
<tt>NOBUG_CONTEXT</tt> or <tt>NOBUG_CONTEXT_NOFUNC</tt>. The later one doesn&#8217;t define a
function name and must be used when the function context is not available
like in static initialization etc..</p></div>
</div>
<h2 id="_macros_for_assertions">Macros for Assertions</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="assertions"></a></p></div>
<div class="paragraph"><p>The assertion set of macros provide a convenient status check on whether
to continue running, or abort execution as some condition was not fulfilled.
Assertion failures are fatal and must abort the application immediately by
calling the <a href="#ABORT">NOBUG_ABORT</a> macro which in turn may call a user defined
<a href="#abortcallback">abort hook</a>.</p></div>
<div class="paragraph"><div class="title">CHECK</div><p><a id="CHECK"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>CHECK(expr, ...)
CHECK_IF(when, expr, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>This assertion is never optimized out. Its main purpose is in implementing
test suites where one would like to assert tests independent of the build level.</p></div>
<div class="paragraph"><div class="title">REQUIRE</div><p><a id="REQUIRE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>REQUIRE(expr, ...)
REQUIRE_IF(when, expr, ...)
NOBUG_REQUIRE_CTX(expr, context,...)
NOBUG_REQUIRE_IF_CTX(when, expr, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Precondition (input) check. Use these macros to validate the input a
function receives. The checks are enabled in <strong>ALPHA</strong> and <strong>BETA</strong> builds,
but have not effect in <strong>RELEASE</strong> builds.</p></div>
<div class="paragraph"><div class="title">ENSURE</div><p><a id="ENSURE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ENSURE(expr, ...)
ENSURE_IF(when, expr, ...)
NOBUG_ENSURE_CTX(expr, context, ...)
NOBUG_ENSURE_IF_CTX(when, expr, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Postcondition (progress/output) check. Use these macros to validate the
data a function produces (example: return value). <tt>ENSURE</tt> is enabled
unconditionally in <strong>ALPHA</strong> builds and have no effect in <strong>BETA</strong> builds for
scopes which are tagged as <tt>CHECKED</tt>.</p></div>
<div class="paragraph"><p>The <tt>ENSURE_IF</tt> variants are enabled in <strong>ALPHA</strong> and <strong>BETA</strong> builds.</p></div>
<div class="paragraph"><p>In <strong>RELEASE</strong> builds these checks are optimized out.</p></div>
<div class="paragraph"><div class="title">ASSERT</div><p><a id="ASSERT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ASSERT(expr, ...)
ASSERT_IF(when, expr, ...)
NOBUG_ASSERT_CTX(expr, context, ...)
NOBUG_ASSERT_IF_CTX(when, expr, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Generic check. Use these macros when you want to validate something
which doesn&#8217;t fall into one of the above categories. Generally to be
avoided! The checks are enabled in <strong>ALPHA</strong> and <strong>BETA</strong> builds and
have no effect in <strong>RELEASE</strong> builds.</p></div>
<div class="paragraph"><div class="title">assert</div><p><a id="assert"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>assert(expr)</tt></pre>
</div></div>
<div class="paragraph"><p>NoBug overrides the standard <tt>assert</tt> macro, using <tt>NOBUG_ASSERT</tt>.
This is just a compatibility feature, its use is not suggested.</p></div>
<div class="paragraph"><div class="title">INVARIANT</div><p><a id="INVARIANT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>INVARIANT(type, pointer, depth)
INVARIANT_IF(when,type, pointer, depth)
INVARIANT_ASSERT(expr, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Checking invariants. You can provide more complex checking functions
which test the validity of datastructures. Invariants are only enabled
in <strong>ALPHA</strong> builds for scopes which are not tagged as <tt>CHECKED</tt> and
otherwise optimized out.</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>TODO: describe how to create invariant checks</tt></pre>
</div></div>
</div>
<h2 id="_macros_that_log_information">Macros That Log Information</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="logging"></a></p></div>
<div class="paragraph"><p>Logging targets a flag (except for <tt>ECHO</tt>) and is done at a log-level related to syslog levels.</p></div>
<div class="paragraph"><div class="title">ECHO</div><p><a id="ECHO"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ECHO(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Never optimized out, logs at LOG_NOTICE level. Its main purpose is for implementing
testsuites where one would like to print and log messages independent of the build level</p></div>
<div class="paragraph"><div class="title">ALERT</div><p><a id="ALERT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ALERT(flag, ...)
ALERT_IF(when, flag, ...)
NOBUG_ALERT_CTX(flag, context, ...)
NOBUG_ALERT_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>This is the most critical condition that might be registered by
an application. Situations might arise when the application
encounters such a serious error that can only be adequately treated
by, for example, safely shutting down the application.</p></div>
<div class="paragraph"><div class="title">CRITICAL</div><p><a id="CRITICAL"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>CRITICAL(flag, ...)
CRITICAL_IF(when, flag, ...)
NOBUG_CRITICAL_CTX(flag, context, ...)
NOBUG_CRITICAL_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>An error which can not be handled occured but the application does not need to be
shutdowen, perhaps waiting for an operator to fix the cause.</p></div>
<div class="paragraph"><div class="title">ERROR</div><p><a id="ERROR"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ERROR(flag, ...)
ERROR_IF(when, flag, ...)
NOBUG_ERROR_CTX(flag, context, ...)
NOBUG_ERROR_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>This is used when an application registers an error
and appropriate action will have to be taken.</p></div>
<div class="paragraph"><div class="title">WARN</div><p><a id="WARN"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>WARN(flag, ...)
WARN_IF(when, flag, ...)
NOBUG_WARN_CTX(flag, context, ...)
NOBUG_WARN_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>When an application encounters a rare and unexpected
situation, these macros can be used.</p></div>
<div class="paragraph"><div class="title">INFO</div><p><a id="INFO"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>INFO(flag, ...)
INFO_IF(when, flag, ...)
NOBUG_INFO_CTX(flag, context, ...)
NOBUG_INFO_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>It may be benificial to output information at various
locations throughout the code, e.g., messages on programm
progress.</p></div>
<div class="paragraph"><div class="title">NOTICE</div><p><a id="NOTICE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOTICE(flag, ...)
NOTICE_IF(when, flag, ...)
NOBUG_NOTICE_CTX(flag, context, ...)
NOBUG_NOTICE_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Same as the INFO() macros, except more verbose.</p></div>
<div class="paragraph"><div class="title">TRACE</div><p><a id="TRACE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>TRACE(flag, ...)
TRACE_IF(when, flag, ...)
NOBUG_TRACE_CTX(flag, context, ...)
NOBUG_TRACE_IF_CTX(when, flag, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>The same as the NOTICE() macros, except very fine-grained information.
a common use case is to put just <tt>TRACE(debugflag)</tt> just at the begin of every
non-trivial function. This allows to watch fine grained application progress in the log.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content"><tt>TRACE</tt> corresponds to <tt>LOG_DEBUG</tt>, because using <tt>DEBUG</tt> could be ambiguous.</td>
</tr></table>
</div>
<div class="paragraph"><div class="title">LOG</div><p><a id="LOG"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_LOG_CTX(flag, lvl, context, ...)
NOBUG_LOG_IF_CTX(when, flag, lvl, context, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Generic logging macro which takes the level explicitly.
Avoid this, unless you implement your own logging facilities.</p></div>
<div class="paragraph"><p><a id="LOGEMERG"></a></p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">there is no logging macro for <tt>LOG_EMERG</tt>, this is only used by the assertions as a fatal message</td>
</tr></table>
</div>
<div class="paragraph"><div class="title">LOG_BASELIMIT</div><p><a id="LOGBASELIMIT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_LOG_BASELIMIT_ALPHA
NOBUG_LOG_BASELIMIT_BETA
NOBUG_LOG_BASELIMIT_RELEASE
NOBUG_LOG_BASELIMIT</tt></pre>
</div></div>
<div class="paragraph"><p>Anything more detailed than this base limits will be optimized out.
This is used to reduce the logging overhead for <strong>RELEASE</strong> builds.
By default the limit is set to <tt>LOG_DEBUG</tt> for <strong>ALPHA</strong> and <strong>BETA</strong>
builds, so all logging is retained and <tt>LOG_NOTICE</tt> in <strong>RELEASE</strong>
builds to log the application progress only coarsely.</p></div>
<div class="paragraph"><p>These macros can be defined before including <em>nobug.h</em> to some other
log level (as defined in <em>syslog.h</em>).</p></div>
</div>
<h2 id="_dumping_data_structures">Dumping Data Structures</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="dumping"></a></p></div>
<div class="paragraph"><p>One can write functions to dump complex data structures using the NoBug
facilities. This is done by writing a custom function for each
data structure to be dumped, which may recursively call other dumping
functions. There are macros that can log within such a dumper function
and to initialise a dump of a given data structure.</p></div>
<div class="paragraph"><p>A dump function has the prototype:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">void</span>
<span style="font-weight: bold"><span style="color: #000000">nobug_NAME_dump</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">NAME</span><span style="color: #990000">*</span> POINTER<span style="color: #990000">,</span>
                 <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">int</span> DEPTH<span style="color: #990000">,</span>
                 <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_context</span> context<span style="color: #990000">,</span>
                 <span style="color: #009900">void</span><span style="color: #990000">*</span> EXTRA<span style="color: #990000">);</span></tt></pre></div></div>
<div class="paragraph"><p>where <em>NAME</em> is the identifier for what you want to dump, <em>POINTER</em> is a pointer
to the data to be dumped, <em>DEPTH</em> is an integer which will be decremented when
recursing into the data structure dumper (your dump function does that, see
below) to limit the recursion depth, <em>context</em> is a source context generated by
nobug when you call DUMP() and <em>EXTRA</em> is a pointer transparently passed around
that you can use to store some additional state. The <em>context</em> variable must
be named <tt>context</tt> because the <tt>DUMP_LOG()</tt> macro relies on this.</p></div>
<div class="paragraph"><div class="title">DUMP</div><p><a id="DUMP"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>DUMP(flag, type, pointer, depth, extra)
DUMP_IF(when, flag, type, pointer, depth, extra)</tt></pre>
</div></div>
<div class="paragraph"><p>These macros call a data structure dump of the object (<tt>pointer</tt>) in question.
<tt>DUMP</tt> has only effect in <strong>ALPHA</strong> and <strong>BETA</strong> builds, <tt>DUMP_IF</tt> is also
enabled for RELEASE builds.</p></div>
<div class="paragraph"><p><tt>extra</tt> is a void* which is transparently passed around and can be used to
pass a particular state around. NoBug does not alter this.</p></div>
<div class="paragraph"><div class="title">DUMP_LOG</div><p><a id="DUMPLOG"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>DUMP_LOG(...)
DUMP_LOG_IF(when, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Any output from <tt>DUMP</tt> handlers should be done by these macros.</p></div>
<div class="paragraph"><div class="title">DUMP_LEVEL</div><p><a id="DUMPLEVEL"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>#define NOBUG_DUMP_LEVEL ...</tt></pre>
</div></div>
<div class="paragraph"><p>Dumping is by default done at <tt>LOG_DEBUG</tt> level, this can be overridden by
defining <tt>NOBUG_DUMP_LEVEL</tt> to some other logging level.</p></div>
<div class="listingblock">
<div class="title">How to use the DUMP facilities</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">STRUCTNAME</span>
<span style="color: #FF0000">{</span>
  <span style="color: #009900">int</span> INTEGER_MEMBER<span style="color: #990000">;</span>
  <span style="color: #009900">char</span> <span style="color: #990000">*</span> STRING_MEMBER<span style="color: #990000">;</span>
  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">STRUCTNAME</span><span style="color: #990000">*</span> next<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Thereafter, define a funcion as follows:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">void</span>
<span style="font-weight: bold"><span style="color: #000000">nobug_STRUCTNAME_dump</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">STRUCTNAME</span><span style="color: #990000">*</span> self<span style="color: #990000">,</span>
                       <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="color: #009900">int</span> depth<span style="color: #990000">,</span>
                       <span style="font-weight: bold"><span style="color: #0000FF">const</span></span> <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_context</span> context<span style="color: #990000">,</span>
                       <span style="color: #009900">void</span><span style="color: #990000">*</span> extra<span style="color: #990000">)</span>
<span style="color: #FF0000">{</span>
  <span style="font-style: italic"><span style="color: #9A1900">/* check for self != NULL and that the depth limit</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     was not exceeded in recursive data structures */</span></span>
  <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>self <span style="color: #990000">&amp;&amp;</span> depth<span style="color: #990000">)</span>
  <span style="color: #FF0000">{</span>
    <span style="font-style: italic"><span style="color: #9A1900">/* you may or may not do something with the extra</span></span>
<span style="font-style: italic"><span style="color: #9A1900">       parameter here, extra is transparently</span></span>
<span style="font-style: italic"><span style="color: #9A1900">       passed around */</span></span>
    <span style="color: #990000">(</span><span style="color: #009900">void</span><span style="color: #990000">)</span> extra<span style="color: #990000">;</span>

    <span style="font-style: italic"><span style="color: #9A1900">/* use DUMP_LOG not LOG to print the data */</span></span>
    <span style="font-weight: bold"><span style="color: #000000">DUMP_LOG</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"STRUCTNAME %p: int is %d, string is %s"</span><span style="color: #990000">,</span> self<span style="color: #990000">,</span>
                             self<span style="color: #990000">-&gt;</span>INTEGER_MEMBER<span style="color: #990000">,</span>
                             self<span style="color: #990000">-&gt;</span>STRING_MEMBER<span style="color: #990000">);</span>

    <span style="font-style: italic"><span style="color: #9A1900">/* now recurse while decrementing depth */</span></span>
    <span style="font-weight: bold"><span style="color: #000000">nobug_STRUCTNAME_dump</span></span> <span style="color: #990000">(</span>self<span style="color: #990000">-&gt;</span>next<span style="color: #990000">,</span>
                           depth<span style="color: #990000">-</span><span style="color: #993399">1</span><span style="color: #990000">,</span>
                           context<span style="color: #990000">,</span>
                           extra<span style="color: #990000">);</span>
  <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><p>Now you can use the DUMP() macros within the code</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">example</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">STRUCTNAME</span> foo<span style="color: #990000">;</span>
  <span style="font-weight: bold"><span style="color: #000000">init</span></span><span style="color: #990000">(&amp;</span>foo<span style="color: #990000">);</span>

  <span style="font-style: italic"><span style="color: #9A1900">/* extra can be anything,</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     NULL is suggested when you don't use it */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">DUMP</span></span> <span style="color: #990000">(</span>my_flag<span style="color: #990000">,</span> STRUCTNAME<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>foo<span style="color: #990000">,</span> <span style="color: #993399">2</span><span style="color: #990000">,</span> NULL<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
</div>
<h2 id="_source_code_annotations">Source Code Annotations</h2>
<div class="sectionbody">
<div class="paragraph"><p>Obsolete, buggy or precarious code can be marked in the code itself in
comments at the location where the code occurs.  However these code
locations can be easily overlooked, especially in large projects. NoBug
provides macros to tag code with such annotations. This provides an additional
instrument to alert or remind the programmer that there is still dubious
code embedded in the application. This tagging scheme not only informs
the programmer at compile time that there is code in the application
that needs attending to, but long after compilitation a test team
might become aware of dubious code due to runtime messages.</p></div>
<div class="paragraph"><div class="title">DEPRECATED</div><p><a id="DEPRECATED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>DEPRECATED(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Use this macro to identify code that is depreciated
and should not be used in future or productive code.</p></div>
<div class="paragraph"><div class="title">UNIMPLEMENTED</div><p><a id="UNIMPLEMENTED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>UNIMPLEMENTED(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Use this macro to identify code that is functionally
not yet complete and should not be used. This is convenient
for code under development or being reviewed.</p></div>
<div class="paragraph"><div class="title">FIXME</div><p><a id="FIXME"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>FIXME(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Use this macro to mark a known and unfixed bug.</p></div>
<div class="paragraph"><div class="title">TODO</div><p><a id="TODO"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>TODO(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Enhancement or non-critical bug to be done soon.</p></div>
<div class="paragraph"><div class="title">PLANNED</div><p><a id="PLANNED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>PLANNED(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Future enhancement, optimization to similar which has no side effect on the current program.</p></div>
<div class="paragraph"><div class="title">NOTREACHED</div><p><a id="NOTREACHED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOTREACHED(...)</tt></pre>
</div></div>
<div class="paragraph"><p>Code which must never be reached.</p></div>
<div class="paragraph"><div class="title">ELSE_NOTREACHED</div><p><a id="ELSENOTREACHED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>ELSE_NOTREACHED(...)</tt></pre>
</div></div>
<div class="paragraph"><p>This macro is the same as <tt>else NOTREACHED()</tt>, but completely
optimized out in release builds.</p></div>
<h3 id="_annotation_semantics">Annotation Semantics</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="annotationsemantics"></a></p></div>
<div class="paragraph"><p>The action that should be taken when an annotated source line is reached
depends on the build level.</p></div>
<div class="tableblock">
<table rules="all"
width="100%"
frame="hsides"
cellspacing="0" cellpadding="4">
<col width="25%" />
<col width="25%" />
<col width="25%" />
<col width="25%" />
<thead>
<tr>
<th align="left" valign="top">              </th>
<th align="left" valign="top">ALPHA </th>
<th align="left" valign="top">BETA         </th>
<th align="left" valign="top">RELEASE</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" valign="top"><p class="table">DEPRECATED</p></td>
<td align="left" valign="top"><p class="table">log <span class="footnote"><br />[will only log once for each source line (not on each hit)]<br /></span></p></td>
<td align="left" valign="top"><p class="table">nothing <span class="footnote"><br />[optimized out, irrelevant]<br /></span></p></td>
<td align="left" valign="top"><p class="table">won&#8217;t compile <span class="footnote"><br />[aborts compilation with an error message]<br /></span></p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">UNIMPLEMENTED</p></td>
<td align="left" valign="top"><p class="table">abort <span class="footnote"><br />[spew a log message, then abort the program]<br /></span></p></td>
<td align="left" valign="top"><p class="table">abort</p></td>
<td align="left" valign="top"><p class="table">won&#8217;t compile</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">FIXME</p></td>
<td align="left" valign="top"><p class="table">log</p></td>
<td align="left" valign="top"><p class="table">won&#8217;t compile</p></td>
<td align="left" valign="top"><p class="table">won&#8217;t compile</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">TODO</p></td>
<td align="left" valign="top"><p class="table">log</p></td>
<td align="left" valign="top"><p class="table">log</p></td>
<td align="left" valign="top"><p class="table">won&#8217;t compile</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">PLANNED</p></td>
<td align="left" valign="top"><p class="table">log</p></td>
<td align="left" valign="top"><p class="table">nothing</p></td>
<td align="left" valign="top"><p class="table">nothing</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table">NOTREACHED</p></td>
<td align="left" valign="top"><p class="table">abort</p></td>
<td align="left" valign="top"><p class="table">abort</p></td>
<td align="left" valign="top"><p class="table">removed <span class="footnote"><br />[optmized out, size]<br /></span></p></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2 id="_scope_checks">Scope Checks</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="CHECKED"></a>
<a id="UNCHECKED"></a></p></div>
<div class="paragraph"><p>The programmer can tag any scope as <tt>UNCHECKED</tt> or <tt>CHECKED</tt>. In <strong>ALPHA</strong> and <strong>BETA</strong>
builds, a global <tt>UNCHECKED</tt> is implied. In <strong>RELEASE</strong> builds, <tt>UNCHECKED</tt> scopes are
not allowed.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="color: #009900">int</span>
<span style="font-weight: bold"><span style="color: #000000">myfunc</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
   <span style="font-style: italic"><span style="color: #9A1900">/* the outer scope of this function is not validated yet*/</span></span>
   UNCHECKED<span style="color: #990000">;</span>

   <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(...)</span>
   <span style="color: #FF0000">{</span>
      <span style="font-style: italic"><span style="color: #9A1900">/* everything in this scope is considered ok */</span></span>
      CHECKED<span style="color: #990000">;</span>
      <span style="color: #990000">...</span>
   <span style="color: #FF0000">}</span>
   <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #990000">...;</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="tableblock">
<table rules="all"
width="100%"
frame="hsides"
cellspacing="0" cellpadding="4">
<caption class="title">Table 1. Assertions active depending on Build level and Scope</caption>
<col width="18%" />
<col width="27%" />
<col width="27%" />
<col width="27%" />
<thead>
<tr>
<th align="left" valign="top">          </th>
<th align="left" valign="top">ALPHA                                     </th>
<th align="left" valign="top">BETA                          </th>
<th align="left" valign="top">RELEASE</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" valign="top"><p class="table header">UNCHECKED</p></td>
<td align="left" valign="top"><p class="table">Preconditions, Postconditions, Invariants</p></td>
<td align="left" valign="top"><p class="table">Preconditions, Postconditions</p></td>
<td align="left" valign="top"><p class="table">compiling will abort</p></td>
</tr>
<tr>
<td align="left" valign="top"><p class="table header">CHECKED</p></td>
<td align="left" valign="top"><p class="table">Preconditions, Postconditions</p></td>
<td align="left" valign="top"><p class="table">Preconditions</p></td>
<td align="left" valign="top"><p class="table"></p></td>
</tr>
</tbody>
</table>
</div>
</div>
<h2 id="_fault_injection">Fault injection</h2>
<div class="sectionbody">
<div class="paragraph"><p>NoBug has some macros which can be used to simulate erroneous behaviour,
in other words, we can inject errors, or faults, into the code
using NoBug.</p></div>
<div class="paragraph"><div class="title">INJECT_GOODBAD</div><p><a id="INJECTGOODBAD"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>INJECT_GOODBAD(expr, good, bad)</tt></pre>
</div></div>
<div class="paragraph"><p>Substitutes to an expression and returns <em>good</em> when expr is false and
<em>bad</em> when expr is true. In BETA and RELEASE builds <em>good</em> is always returned.</p></div>
<div class="paragraph"><div class="title">INJECT_FAULT</div><p><a id="INJECTFAULT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>INJECT_FAULT(expr, bad)</tt></pre>
</div></div>
<div class="paragraph"><p>Substitutes to a statement which executes <em>bad</em>
when expr is true. This is only available in ALPHA builds and
is optimitsed out in BETA and RELEASE builds.</p></div>
<div class="paragraph"><div class="title">Setting the logging level for fault injections</div><p><a id="INJECTLEVEL"></a>
In both cases, when a fault is injected, it will be logged at
<tt>NOBUG_INJECT_LEVEL</tt> (default: <tt>LOG_NOTICE</tt>). This can be defined
before including <em>nobug.h</em> to override it.</p></div>
</div>
<h2 id="_fault_coverage_checking">Fault coverage checking</h2>
<div class="sectionbody">
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Caution</div>
</td>
<td class="content">Fault coverage checking is an experimental feature!</td>
</tr></table>
</div>
<div class="paragraph"><p>NoBug can automatically inject faults at instrumented points and permute
through all potential error paths of an application by restarting it with the
state from a former run. It can be used to provide information on whether a
particular error is adequately treated in an application. Fault coverage
checking is only available in ALPHA builds; it is optimized out in all other
builds.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">This kind of testing is very expensive on performance.</td>
</tr></table>
</div>
<h3 id="_how_does_automatic_fault_injection_work">How Does Automatic Fault Injection Work?</h3><div style="clear:left"></div>
<div class="paragraph"><p>First, NoBug checks if the <tt>NOBUG_COVERAGE</tt> environment variable is set. If it
is set, it must contain a space, comma or a semicolon separated list of
filenames which are the logs from a previous run. These logs are then parsed
storing the old state in a lookup tree.</p></div>
<div class="paragraph"><p>The application will then proceed to run as usual. When an instrumented
coverage point is hit, its status is checked against all states that have been
recorded previously. Any failure point that is encountered for a first time
causes a fault to be injected; the last seen but previously failed point will
now be passed, all other fault injection points behave as in their previous
run. This ensures that each successive run of the application changes only one
injection point and, thus, permutes through all possible code paths.</p></div>
<div class="paragraph"><p>Fault injection points are identified by a 64bit hash over the backtrace
(return addresses on the stack) leading to it. This means each unique way to
reach an injection point is recorded. Parameters and threads are intentionally
not considered in this calculation.</p></div>
<h3 id="_how_to_invoke_fault_coverage_checking">How to Invoke Fault-Coverage Checking</h3><div style="clear:left"></div>
<div class="paragraph"><p>Each fault-injection point emits a logging message about its identity and
state, this logging uses the normal NoBug logging facilities. Thus, one can
control logging with the <tt>NOBUG_LOG</tt> environment variable. Furthermore, fault
coverage checking is only active when the <tt>NOBUG_COVERAGE</tt> environment
variable has been set to point to log files which are the results from a
previous run. NoBug comes with a <tt>tests/coverage.sh</tt> example script which
permutes through all possible error paths.</p></div>
<h3 id="_coverage_checking_macros">Coverage checking Macros</h3><div style="clear:left"></div>
<div class="paragraph"><div class="title">COVERAGE_FAULT</div><p><a id="COVERAGEFAULT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>COVERAGE_FAULT(flag, ...)</tt></pre>
</div></div>
<div class="paragraph"><p>Injects the statement at <tt>...</tt> when simulating a failure. Only active in
ALPHA builds.</p></div>
<div class="paragraph"><div class="title">COVERAGE_GOODBAD</div><p><a id="COVERAGEGOODBAD"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>COVERAGE_GOODBAD(flag, good, bad)</tt></pre>
</div></div>
<div class="paragraph"><p>Substitutes to an expression and injects <tt>bad</tt> when simulating a failure and <tt>good</tt>
otherwise. Only active in ALPHA builds.</p></div>
<div class="paragraph"><div class="title">COVERAGE_LEVEL</div><p><a id="COVERAGELEVEL"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>#define NOBUG_COVERAGE_LEVEL ...</tt></pre>
</div></div>
<div class="paragraph"><p>Define the logging level in which fault-coverage logging is emitted.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">Supressing log output with this level will not supress fault injection,
      actually the opposite is true since every newly seen failure path gets injected.
      This might be changed in future releases.</td>
</tr></table>
</div>
<div class="paragraph"><div class="title">Disabling and enabling fault-coverage checks</div><p><a id="COVERAGEDISABLE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_COVERAGE_DISABLE
NOBUG_COVERAGE_ENABLE</tt></pre>
</div></div>
<div class="paragraph"><p>Sometimes fault injection yields false positives, errors which may never happen in real life
(and are possibly enforced with an ENSURE afterwards). For this cases coverage fault injection can be
disabled temporarly and reenabled later. Disabling/enabling may nest and must properly match.</p></div>
</div>
<h2 id="_resource_tracking">Resource Tracking</h2>
<div class="sectionbody">
<div class="paragraph"><p>With little effort, NoBug can watch all kinds of resources a program uses. This
becomes useful for resources which are distributed over a multithreaded
program. Resource tracking includes logging actions on resource and checking
locking policies over acquired resources. Resource logging is active in ALPHA
and BETA builds when NOBUG_RESOURCE_LOGGING is defined to 1 (the default).
The resource tracker which supervises locking policies is only enabled in
ALPHA builds.</p></div>
<h3 id="_concepts">Concepts</h3><div style="clear:left"></div>
<div class="paragraph"><p>Resources are an abstract entity for NoBug, which has little knowledge about the
kinds of resources; it only keeps records of resources and the code using
these resources and ensures basic constraints. More detailed checks on resource
usage have to be done with other NoBug facilities.</p></div>
<div class="paragraph"><p>Resources are identified by an arbitrary identifier which is just a
pointer. Additionally a name, the type and the source locations which
registered the resource are stored.</p></div>
<div class="paragraph"><p>Code which requiring to use a resource, calls an <em>ENTER</em> macro, supplying
an identifier and state. The state can be altered. Thereafter a <em>LEAVE</em> macro is
used when the the code is finished with the resources.</p></div>
<div class="paragraph"><p>When a resource is used, one has to pass one of these states:</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>NOBUG_RESOURCE_WAITING</tt>
</dt>
<dd>
<p>
        For resources which might need to be blocked (locks),  enter with a
        WAITING state first, as soon at the resource is acquired, change the
        state to one of the following.
</p>
</dd>
<dt class="hdlist1">
<tt>NOBUG_RESOURCE_EXCLUSIVE</tt>
</dt>
<dd>
<p>
        Acquired the resource exclusively. The resource must not be acquired
        again, not even from the same thread.
</p>
</dd>
<dt class="hdlist1">
<tt>NOBUG_RESOURCE_RECURSIVE</tt>
</dt>
<dd>
<p>
        The resource might be entered multiple times from the same
        thread with this state.
</p>
</dd>
<dt class="hdlist1">
<tt>NOBUG_RESOURCE_SHARED</tt>
</dt>
<dd>
<p>
        The resource might be entered multiple times from any thread
        with this state.
</p>
</dd>
</dl></div>
<div class="imageblock">
<div class="content">
<img src="resource-transitions.eps" alt="resource-transitions.eps" />
</div>
</div>
<h3 id="_notes">Notes</h3><div style="clear:left"></div>
<div class="paragraph"><p>The Resource Tracker relies on proper announce/forget and enter/leave
are properly paired. The programmer should ensure that this is correctly
done, otherwise the results are unpredictable.</p></div>
<h3 id="_resource_tracking_macros">Resource tracking macros</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="RESOURCELOGGING"></a>
<a id="RESOURCELOGLEVEL"></a></p></div>
<div class="paragraph"><p>Unless the user defines <tt>NOBUG_RESOURCE_LOGGING</tt> to 0 each of the above macros
will emit a log message at <tt>NOBUG_RESOURCE_LOG_LEVEL</tt> which defaults to
<tt>LOG_DEBUG</tt>.</p></div>
<div class="paragraph"><div class="title">RESOURCE_HANDLE</div><p><a id="RESOURCEHANDLE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_HANDLE(name)
RESOURCE_HANDLE_INIT(name)
RESOURCE_USER(name)
RESOURCE_USER_INIT(name)</tt></pre>
</div></div>
<div class="paragraph"><p>Define and initialize handles for to track resources.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>name</tt>
</dt>
<dd>
<p>
     identifer to be used for the handle
</p>
</dd>
</dl></div>
<div class="paragraph"><p>There are two kinds of handles. Resource themself are abstracted with a
<tt>RESOURCE_HANDLE</tt> while uses of a resources are tracked by <tt>RESOURCE_USER</tt>
handle. These macros takes care that the declaration is optimized out
in the same manner as the rest of the resource tracker would be disabled.
You can still instantiate handles as <tt>struct nobug_resource_record*</tt> or
<tt>struct nobug_resource_user*</tt> in structures which must have a constant size
unconditional of the build level. The two <tt>*_INIT</tt> macros can be used to initialize
resource handles and are optimized out when the resource tracker gets disabled.</p></div>
<div class="paragraph"><div class="title">RESOURCE_ANNOUNCE</div><p><a id="RESOURCEANNOUNCE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_ANNOUNCE(flag, type, name, identifier, handle){}
NOBUG_RESOURCE_ANNOUNCE_RAW(flagptr, type, name, ptr, handle){}
NOBUG_RESOURCE_ANNOUNCE_RAW_CTX(flagptr, type, name,
                                ptr, handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>Publishes resources.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
     the NoBug flag name which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>type</tt>
</dt>
<dd>
<p>
     a string which should denote the domain of the resource,
     examples are "file", "mutex", "lock", "database" and so on
</p>
</dd>
<dt class="hdlist1">
<tt>name</tt>
</dt>
<dd>
<p>
     the actual name of a named resource this as string. <tt>type</tt> and
     <tt>name</tt> must be available through the entire lifetime of the resource, using
     literal strings is recommended
</p>
</dd>
<dt class="hdlist1">
<tt>identifier</tt>
</dt>
<dd>
<p>
     a pointer which must be unique for this resource, any
     kind of pointer will suffice, it is only used for identification. In
     multithreaded applications the thread identifier becomes an additional
     identifier
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
     a <tt>NOBUG_RESOURCE_HANDLE</tt> which will be initialized to point to
     the newly created resource.
</p>
</dd>
</dl></div>
<div class="paragraph"><p>Resources must be unique, it is a fatal error when a resource it tried to be
announced more than one time.</p></div>
<div class="paragraph"><p><tt>RESOURCE_ANNOUNCE()</tt> acts like the head of a C loop statement, it ties to the following
(block-) statement which will be handled atomic.
This statement must not be left by break, return or any other kind of jump.</p></div>
<div class="paragraph"><div class="title">RESOURCE_FORGET</div><p><a id="RESOURCEFORGET"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_FORGET(flag, handle){}
NOBUG_RESOURCE_FORGET_RAW(flagptr, handle){}
NOBUG_RESOURCE_FORGET_RAW_CTX(flagptr, handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>Removes resources that have become unavailable from the registry.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    the NoBug flag which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
    the <tt>NOBUG_RESOURCE_HANDLE</tt> used to track this resource
</p>
</dd>
</dl></div>
<div class="paragraph"><p>The resource must still exist and no users must be attached to it, else a fatal
error is raised.</p></div>
<div class="paragraph"><p><tt>RESOURCE_FORGET()</tt> acts like the head of a C loop statement, it ties to the following
(block-) statement which will be handled atomic.
This statement must not be left by break, return or any other kind of jump.</p></div>
<div class="paragraph"><div class="title">RESOURCE_RESETALL</div><p><a id="RESOURCERESETALL"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_RESETALL(flag)
NOBUG_RESOURCE_RESETALL_RAW(flagptr)
NOBUG_RESOURCE_RESETALL_RAW_CTX(flagptr, context)</tt></pre>
</div></div>
<div class="paragraph"><p>Sometimes the resource tracker can give false positives when it finds a locking order violation
while the programmer knows that this will never happen in the real program, because for example
this is only used at initialization or shutdown and never overlaps. This macro can then be used
to reset all whats learnt about all resources and start over.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    the NoBug flag which turns logging on for this macro
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">RESOURCE_RESET</div><p><a id="RESOURCERESET"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_RESET(flag, handle)
NOBUG_RESOURCE_RESET_RAW(flagptr, handle)
NOBUG_RESOURCE_RESET_RAW_CTX(flagptr, handle, context)</tt></pre>
</div></div>
<div class="paragraph"><p>Sometimes the resource tracker can give false positives when it finds a locking order violation
while the programmer knows that this will never happen in the real program, because for example
this is only used at initialization or shutdown and never overlaps. This macro can then be used
to reset all whats learnt about a single resources and start over.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    the NoBug flag which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
    the <tt>NOBUG_RESOURCE_HANDLE</tt> used to track this resource
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">RESOURCE_ENTER</div><p><a id="RESOURCEENTER"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_ENTER(flag, announced, user, state, handle){}
NOBUG_RESOURCE_ENTER_CTX(flag, resource, user, state,
                         handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>Acquire a resource.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    nobug flag which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>announced</tt>
</dt>
<dd>
<p>
    the handle set by <tt>RESOURCE_ANNOUNCE</tt>
</p>
</dd>
<dt class="hdlist1">
<tt>user</tt>
</dt>
<dd>
<p>
    a literal string defining the purpose
</p>
</dd>
<dt class="hdlist1">
<tt>state</tt>
</dt>
<dd>
<p>
    the state to enter
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
    a <tt>NOBUG_RESOURCE_HANDLE</tt> which will be initialized to the
    entering node
</p>
</dd>
</dl></div>
<div class="paragraph"><p><tt>RESOURCE_ENTER()</tt> acts like the head of a C loop statement, it ties to the following
(block-) statement which will be handled atomic.
This statement must not be left by break, return or any other kind of jump.</p></div>
<div class="paragraph"><div class="title">RESOURCE_WAIT</div><p><a id="RESOURCEWAIT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_WAIT(flag, resource, user, handle){}
NOBUG_RESOURCE_WAIT_CTX(flag, resource, user, handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>This is just an alias for</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_ENTER(flag, resource, user,
               NOBUG_RESOURCE_WAITING, handle)</tt></pre>
</div></div>
<div class="listingblock">
<div class="title">How to use it</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">RESOURCE_WAIT</span></span><span style="color: #990000">(</span>flag<span style="color: #990000">,</span> resource<span style="color: #990000">,</span> user<span style="color: #990000">,</span> handle<span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">lock_my_resource</span></span><span style="color: #990000">()</span> <span style="color: #990000">==</span> ERROR<span style="color: #990000">)</span>
  <span style="font-weight: bold"><span style="color: #000000">NOBUG_RESOURCE_LEAVE</span></span><span style="color: #990000">(</span>flag<span style="color: #990000">,</span> handle<span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">else</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_STATE</span></span><span style="color: #990000">(</span>flag<span style="color: #990000">,</span> NOBUG_RESOURCE_EXCLUSIVE<span style="color: #990000">,</span> handle<span style="color: #990000">);</span></tt></pre></div></div>
<div class="paragraph"><div class="title">RESOURCE_TRY</div><p><a id="RESOURCETRY"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_TRY(flag, resource, user, handle){}
NOBUG_RESOURCE_TRY_CTX(flag, resource, user, handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>This is just an alias for</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_ENTER(flag, resource, user,
               NOBUG_RESOURCE_TRYING, handle)</tt></pre>
</div></div>
<div class="paragraph"><p>Trying on a resource is similar to waiting but will not trigger a deadlock check. This can be used
when a deadlock is expected at runtime and one handles this otherwise (by a timed wait or something like that).</p></div>
<div class="paragraph"><div class="title">RESOURCE_STATE</div><p><a id="RESOURCESTATE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_STATE(flag, entered, state){}
NOBUG_RESOURCE_STATE_CTX(flag, state, entered, context){}
NOBUG_RESOURCE_STATE_RAW(flagptr, state, entered){}
NOBUG_RESOURCE_STATE_RAW_CTX(flagptr, state, entered, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>Changes resource&#8217;s state.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    is nobug flag which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>state</tt>
</dt>
<dd>
<p>
    the new state Note that only certain state transitions are
    allowed, see discussion/diagram above
</p>
</dd>
<dt class="hdlist1">
<tt>entered</tt>
</dt>
<dd>
<p>
    the handle set by <tt>RESOURCE_ENTER</tt>
</p>
</dd>
</dl></div>
<div class="paragraph"><p><tt>RESOURCE_STATE()</tt> acts like the head of a C loop statement, it ties to the following
(block-) statement which will be handled atomic.
This statement must not be left by break, return or any other kind of jump.</p></div>
<div class="paragraph"><div class="title">RESOURCE_LEAVE</div><p><a id="RESOURCELEAVE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_LEAVE(flag, handle){}
NOBUG_RESOURCE_LEAVE_RAW(flagptr, handle){}
NOBUG_RESOURCE_LEAVE_RAW_CTX(flagptr, handle, context){}</tt></pre>
</div></div>
<div class="paragraph"><p>Disconnect from a resource identified with its handle.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    nobug flag which turns logging on for this macro
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
    the handle you got while entering the resource
</p>
</dd>
</dl></div>
<div class="paragraph"><p><tt>RESOURCE_LEAVE()</tt> acts like the head of a C loop statement, it ties to the following
(block-) statement which will be handled atomic.
This statement must not be left by break, return or any other kind of jump.</p></div>
<div class="listingblock">
<div class="title">How to use it</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">NOBUG_RESOURCE_LEAVE</span></span><span style="color: #990000">(</span>flag<span style="color: #990000">,</span> handle<span style="color: #990000">)</span>
  <span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #000000">unlock_my_resource</span></span><span style="color: #990000">();</span>
  <span style="color: #FF0000">}</span></tt></pre></div></div>
<div class="paragraph"><div class="title">RESOURCE_ASSERT_STATE</div><p><a id="RESOURCEASSERTSTATE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>RESOURCE_ASSERT_STATE(resource, state)
RESOURCE_ASSERT_STATE_IF(when, resource, state)
NOBUG_RESOURCE_ASSERT_STATE_CTX(resource, state, context)
NOBUG_RESOURCE_ASSERT_STATE_IF_CTX(when, resource,
                                   state, context)</tt></pre>
</div></div>
<div class="paragraph"><p>Assert that we have a resource in a given state. For multithreaded programms the topmost
state of the calling thread is checked, for non threadeded programs the most recent state on
resource is used.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>when</tt>
</dt>
<dd>
<p>
    Condition which must be true for testing the assertion
</p>
</dd>
<dt class="hdlist1">
<tt>resource</tt>
</dt>
<dd>
<p>
    Resource handle
</p>
</dd>
<dt class="hdlist1">
<tt>state</tt>
</dt>
<dd>
<p>
    The expected state
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">RESOURCE_DUMP</div><p><a id="RESOURCEDUMP"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_RESOURCE_DUMP(flag, handle)
NOBUG_RESOURCE_DUMP_IF(when, flag, handle)</tt></pre>
</div></div>
<div class="paragraph"><p>Dump the state of a single resource.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>when</tt>
</dt>
<dd>
<p>
    Condition which must be true to dump the resource
</p>
</dd>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    Nobug flag for the log channel
</p>
</dd>
<dt class="hdlist1">
<tt>handle</tt>
</dt>
<dd>
<p>
    handle of the resource to be dumped
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">RESOURCE_DUMPALL</div><p><a id="RESOURCEDUMPALL"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_RESOURCE_DUMPALL(flag)
NOBUG_RESOURCE_DUMPALL_IF(when, flag)</tt></pre>
</div></div>
<div class="paragraph"><p>Dump the state of all resources.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>when</tt>
</dt>
<dd>
<p>
    Condition which must be true to dump the resources
</p>
</dd>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    Nobug flag for the log channel
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">RESOURCE_LIST</div><p><a id="RESOURCELIST"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_RESOURCE_LIST(flag)
NOBUG_RESOURCE_LIST_IF(when, flag)</tt></pre>
</div></div>
<div class="paragraph"><p>List all registered resources.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>when</tt>
</dt>
<dd>
<p>
    Condition which must be true to list the resources
</p>
</dd>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    Nobug flag for the log channel
</p>
</dd>
</dl></div>
<div class="listingblock">
<div class="title">How to use the Resourcetracker</div>
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">NOBUG_DEFINE_FLAG_LIMIT</span></span><span style="color: #990000">(</span>test<span style="color: #990000">,</span> LOG_DEBUG<span style="color: #990000">);</span>

<span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">example</span></span><span style="color: #990000">()</span>
<span style="color: #FF0000">{</span>
  <span style="font-style: italic"><span style="color: #9A1900">/* define a mutex and announce it */</span></span>
  <span style="color: #008080">pthread_mutex_t</span> my_mutex <span style="color: #990000">=</span> PTHREAD_MUTEX_INITIALIZER<span style="color: #990000">;</span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_HANDLE</span></span><span style="color: #990000">(</span>resource<span style="color: #990000">);</span>

  <span style="font-style: italic"><span style="color: #9A1900">/* 'example' is just a pointer to this function</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     which suffices as unique identifier */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_ANNOUNCE</span></span><span style="color: #990000">(</span>test<span style="color: #990000">,</span> <span style="color: #FF0000">"mutex"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"my_mutex"</span><span style="color: #990000">,</span>
                    example<span style="color: #990000">,</span> resource<span style="color: #990000">);</span>

  <span style="font-style: italic"><span style="color: #9A1900">/* the following would be done in a</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     different thread in a real program */</span></span>

  <span style="font-style: italic"><span style="color: #9A1900">/* define a handle */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_HANDLE</span></span><span style="color: #990000">(</span>enter<span style="color: #990000">);</span>

  <span style="font-style: italic"><span style="color: #9A1900">/* announce that we want to use the resource</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     &amp;enter also suffices as unique pointer,</span></span>
<span style="font-style: italic"><span style="color: #9A1900">     which is all we need as identifer here */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_WAIT</span></span><span style="color: #990000">(</span>flag<span style="color: #990000">,</span> resource<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>enter<span style="color: #990000">,</span> enter<span style="color: #990000">)</span>
    <span style="color: #FF0000">{</span>
      <span style="font-style: italic"><span style="color: #9A1900">/* lock() might block */</span></span>
      <span style="font-weight: bold"><span style="color: #000000">pthread_mutex_lock</span></span> <span style="color: #990000">(&amp;</span>my_mutex<span style="color: #990000">);</span>
      <span style="font-style: italic"><span style="color: #9A1900">/* assume no errors, got it, change the state */</span></span>
      <span style="font-weight: bold"><span style="color: #000000">RESOURCE_STATE</span></span><span style="color: #990000">(</span>test<span style="color: #990000">,</span> NOBUG_RESOURCE_EXCLUSIVE<span style="color: #990000">,</span> enter<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>

  <span style="font-style: italic"><span style="color: #9A1900">/***************************************</span></span>
<span style="font-style: italic"><span style="color: #9A1900">  ** program does something useful here **</span></span>
<span style="font-style: italic"><span style="color: #9A1900">  ***************************************/</span></span>

  <span style="font-style: italic"><span style="color: #9A1900">/* we don't need it anymore */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_LEAVE</span></span><span style="color: #990000">(</span>test<span style="color: #990000">,</span> enter<span style="color: #990000">)</span>  <span style="font-style: italic"><span style="color: #9A1900">/* &lt;&lt; no semicolon! */</span></span>
    <span style="font-weight: bold"><span style="color: #000000">pthread_mutex_unlock</span></span> <span style="color: #990000">(&amp;</span>my_mutex<span style="color: #990000">);</span>

  <span style="font-style: italic"><span style="color: #9A1900">/* back in the main thread */</span></span>

  <span style="font-style: italic"><span style="color: #9A1900">/* remove the resource from the public registry */</span></span>
  <span style="font-weight: bold"><span style="color: #000000">RESOURCE_FORGET</span></span><span style="color: #990000">(</span>test<span style="color: #990000">,</span> resource<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span></tt></pre></div></div>
<h3 id="_deadlock_detection">Deadlock Detection</h3><div style="clear:left"></div>
<div class="paragraph"><p>The Resource Tracker is able to detect potential deadlocks. This is done by
learning the relations between locks (precedence) and watching the order in
which resources are acquired. It has some heuristics to detect certain
patterns which are deadlock free. A possible deadlock results in a log message
and a fatal abort. Note that only waiting on resources can lead to a deadlock.
Deadlock detection is implemented in the Resource Tracker and active in ALPHA
builds and optimized out on any other build level.</p></div>
<div class="paragraph"><p>For details about the deadlock detection algorithm see
<a href="#deadlockdetection">Appendix: Resource Tracking Alorithm</a>.</p></div>
</div>
<h2 id="_callbacks">Callbacks</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="callbacks"></a></p></div>
<div class="paragraph"><p>NoBug provides callbacks, applications can use these
to present logging information in some custom way or hook some special processing in.
The callbacks are initialized to NULL and never modified by NoBug, it is the sole responsibility
of the user to manage them.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Caution</div>
</td>
<td class="content">There are certain constraints what and what not can be done in callbacks
         documented below which must be followed.</td>
</tr></table>
</div>
<div class="paragraph"><div class="title">logging callback prototype</div><p><a id="loggingcb"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>typedef void (*nobug_logging_cb)(const struct nobug_flag* flag,
                                 int priority,
                                 const char *log,
                                 void* data)</tt></pre>
</div></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>flag</tt>
</dt>
<dd>
<p>
    Flag structure which defines the logging configuration for this event
</p>
</dd>
<dt class="hdlist1">
<tt>priority</tt>
</dt>
<dd>
<p>
    Log level of the current event
</p>
</dd>
<dt class="hdlist1">
<tt>log</tt>
</dt>
<dd>
<p>
    Pointing to the current log line in the ringbuffer or <tt>NULL</tt>
</p>
</dd>
<dt class="hdlist1">
<tt>data</tt>
</dt>
<dd>
<p>
    Global pointer defined by the user, passed arround (see below)
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">abort callback prototype</div><p><a id="abortcb"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>typedef void (*nobug_abort_cb)(void* data)</tt></pre>
</div></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>data</tt>
</dt>
<dd>
<p>
    Global data defined by the user, passed arround (see below)
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">passing data to callbacks</div><p><a id="callbackdata"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>void* nobug_callback_data</tt></pre>
</div></div>
<div class="paragraph"><p>This global variable is initialized to <tt>NULL</tt> and will never be touched by NoBug. One can use it
to pass extra data to the callback functions.</p></div>
<div class="paragraph"><div class="title">callback when logging</div><p><a id="loggingcallback"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>nobug_logging_cb nobug_logging_callback</tt></pre>
</div></div>
<div class="paragraph"><p>This callback gets called when something gets logged.
NoBug will still hold its mutexes when calling this hook, calling NoBug logging or resource tracking
functions from here recursively will deadlock and must be avoided.
The <tt>log</tt> parameter points to the logging message in the ringbuffer.
Unlike other logging targets it is not automatically limited to the log level configured
in the flag but called unconditionally. The callback should implement its own limiting.</p></div>
<div class="paragraph"><p>When one wants to do complex calls which may include recursion into logging and resource tracking
functions, the intended way is to pass contextual information possibly including a <em>copy</em> of the
<tt>log</tt> parameter in <a href="#THREADDATA">NOBUG_THREAD_DATA</a> to the postlogging callback (see below).
Other internal NoBug facilties, like the ringbuffer etc, are protected by the mutexes and may be accessed
from this function.</p></div>
<div class="paragraph"><div class="title">callback after logging</div><p><a id="postloggingcallback"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>nobug_logging_cb nobug_postlogging_callback</tt></pre>
</div></div>
<div class="paragraph"><p>This callback gets called after something got logged. The <tt>log</tt> parameter is always NULL and all
NoBug mutexes are released. This means that this function may call any complex things, including
calling logging and resource tracking, but may not call internal NoBug facilities.
Contextual created in the <tt>nobug_logging_callback</tt> and stored in <a href="#THREADDATA">NOBUG_THREAD_DATA</a> can be
retrieved here and may need to be cleaned up here.</p></div>
<div class="paragraph"><div class="title">callback for aborting</div><p><a id="abortcallback"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>nobug_abort_cb nobug_abort_callback</tt></pre>
</div></div>
<div class="paragraph"><p>This callback gets called when the application shall be terminated due an error.
It can be used to hook exceptions or similar things in. When it returns, <tt>abort()</tt>
is called.</p></div>
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Important</div>
</td>
<td class="content">Errors detected by NoBug are always fatal. If one handles and possible
           throws an exception here, the application must shut down as soon as possible.
           Most causes for aborts are optimitzed out in <tt>RELEASE</tt> builds.</td>
</tr></table>
</div>
</div>
<h2 id="_tool_macros">Tool Macros</h2>
<div class="sectionbody">
<div class="paragraph"><div class="title">NOBUG_FLAG_RAW</div><p><a id="NOBUGFLAGRAW"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_FLAG_RAW(ptr)</tt></pre>
</div></div>
<div class="paragraph"><p>Using this macro one can pass a direct pointer to a flag where a name would
be expected. This is sometimes convinient when flag pointers are passed around
in management strutures and one wants to tie logging to dynamic targets.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">NOBUG_DEFINE_FLAG</span></span><span style="color: #990000">(</span>myflag<span style="color: #990000">);</span>
<span style="color: #990000">...</span>
<span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_flag</span><span style="color: #990000">*</span> ptr <span style="color: #990000">=</span> <span style="color: #990000">&amp;</span><span style="font-weight: bold"><span style="color: #000000">NOBUG_FLAG</span></span><span style="color: #990000">(</span>myflag<span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #000000">TRACE</span></span><span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">NOBUG_FLAG_RAW</span></span><span style="color: #990000">(</span>ptr<span style="color: #990000">),</span> <span style="color: #FF0000">"Passed flag by pointer"</span><span style="color: #990000">)</span></tt></pre></div></div>
<div class="paragraph"><div class="title">Backtraces</div><p><a id="BACKTRACE"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>BACKTRACE
NOBUG_BACKTRACE_CTX(context)</tt></pre>
</div></div>
<div class="paragraph"><p>The backtrace macro logs a stacktrace using the NoBug facilities.
This is automatically called when NoBug finds an error and is due
to abort. But one might call it manually too.</p></div>
<div class="paragraph"><div class="title">Aborting</div><p><a id="ABORT"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_ABORT_</tt></pre>
</div></div>
<div class="paragraph"><p>This is the default implementation for aborting the program, it first syncs all ringbuffers to disk, then
calls the abort callback if defined and then <tt>abort()</tt>.</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_ABORT</tt></pre>
</div></div>
<div class="paragraph"><p>If not overridden, evaluates to <tt>NOBUG_ABORT_</tt>. One can override this before including
<tt>nobug.h</tt> to customize abortion behaviour. This will be local to the translation unit then.</p></div>
<div class="paragraph"><div class="title">NOBUG_ALPHA_COMMA</div><p><a id="NOBUGALPHACOMMA"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_ALPHA_COMMA(something)
NOBUG_ALPHA_COMMA_NULL</tt></pre>
</div></div>
<div class="paragraph"><p>Sometimes it is useful to have initializer code only in <strong>ALPHA</strong> builds, for example when you
conditionally include resource handles only in <strong>ALPHA</strong> versions. An initializer can then
use this macros to append a comma and something else only in <strong>ALPHA</strong> builds as in:</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">foo</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">"foo"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"bar"</span> NOBUG_ALPHA_COMMA_NULL <span style="color: #FF0000">}</span><span style="color: #990000">;</span></tt></pre></div></div>
<div class="paragraph"><p>Becomes the following in <strong>ALPHA</strong> builds</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">foo</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">"foo"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"bar"</span><span style="color: #990000">,</span> NULL<span style="color: #FF0000">}</span><span style="color: #990000">;</span></tt></pre></div></div>
<div class="paragraph"><p>and</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">foo</span> <span style="color: #990000">=</span> <span style="color: #FF0000">{</span><span style="color: #FF0000">"foo"</span><span style="color: #990000">,</span> <span style="color: #FF0000">"bar"</span><span style="color: #FF0000">}</span><span style="color: #990000">;</span></tt></pre></div></div>
<div class="paragraph"><p>in <strong>BETA</strong> and <strong>RELEASE</strong> builds.</p></div>
<div class="paragraph"><div class="title">NOBUG_IF_*</div><p><a id="NOBUGIF"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_IF_ALPHA(...)
NOBUG_IF_NOT_ALPHA(...)
NOBUG_IF_BETA(...)
NOBUG_IF_NOT_BETA(...)
NOBUG_IF_RELEASE(...)
NOBUG_IF_NOT_RELEASE(...)</tt></pre>
</div></div>
<div class="paragraph"><p>This macros allow one to conditionally include the code in <em>(&#8230;)</em> only if the
criteria on the build level is met. If not, nothing gets substituted. Mostly used
internally, but can also be used for custom things.</p></div>
</div>
<h2 id="_multithreading">Multithreading</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="multithreading"></a></p></div>
<div class="paragraph"><p>It is important that NoBug protects certain operations with locks in
multithreaded programs. You have to ensure that <em>HAVE_PTHREAD_H</em> is defined by
the configuration system and use the <em>libnobugmt</em> library for linking. It is
particular important that libraries using NoBug are compiled with
<em>HAVE_PTHREAD_H</em> enabled when they are intended to be used in multithreaded
programs.</p></div>
<div class="paragraph"><p>When Multithreading is used, log messages contain a identifier of the
originating thread. This identifier should be set by</p></div>
<div class="paragraph"><div class="title">NOBUG_THREAD_ID_SET</div><p><a id="THREADIDSET"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_THREAD_ID_SET(name)</tt></pre>
</div></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>name</tt>
</dt>
<dd>
<p>
        New name for the thread
</p>
</dd>
</dl></div>
<div class="paragraph"><p>Nobug will assemble a unique identifier by appending a underscore and a
number to name, for example <tt>NOBUG_THREAD_ID_SET("gui")</tt> will result in a
identifier like <em>gui_5</em>. When you don&#8217;t set a thread identifier, then NoBug
assigns one automatically with the name <em>thread</em> preprended if needed. Thread
identifiers may be reset with a new call to this macro.</p></div>
<div class="paragraph"><div class="title">NOBUG_THREAD_ID_GET</div><p><a id="THREADIDGET"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_THREAD_ID_GET</tt></pre>
</div></div>
<div class="paragraph"><p>Will return a const char* of the thread id in multithreaded programs and
a pointer to a literal empty string in singlethreaded programs.</p></div>
<div class="paragraph"><div class="title">NOBUG_THREAD_DATA</div><p><a id="THREADDATA"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>NOBUG_THREAD_DATA</tt></pre>
</div></div>
<div class="paragraph"><p>Evaluates to a variable of type <tt>void*</tt> which can be used to store
thread local information. This is useable for <a href="#callbacks">callbacks</a> which may
prepare context information to be reused later.</p></div>
<div class="paragraph"><p>This macro is also available in singlethreaded programs, refering to a
single global variable.</p></div>
<div class="paragraph"><p>Nobug initializes this variable to <tt>NULL</tt> and then touches it never again.</p></div>
</div>
<h2 id="_dumping_persistent_ringbuffers">Dumping Persistent Ringbuffers</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="rbdump"></a></p></div>
<div class="paragraph"><p>NoBug installs the <tt>nobug_rbdump</tt> tool for dumping the content of a persistent
ringbuffer. It is invoked with the filename of the ringbuffer, the content is then
printed to stdout.</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>$ NOBUG_LOG='test:TRACE@ringbuffer(file=test.rb)(keep)' ./a.out
0000000004: TRACE: example.c:11: -: main: Always on
$ nobug_rbdump test.rb
0000000003: TRACE: example.c:10: -: main: Logging
0000000003! TRACE: example.c:10: -: main:  enabled</tt></pre>
</div></div>
</div>
<h2 id="_testing">Testing</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="testing"></a></p></div>
<div class="paragraph"><p>Tests are nothing more than bash scripts with some functions from the test.sh
framework defined. Test.sh looks in the current directory for all files which ending in .test
and runs them in alphabetical order. The selection of this tests can be constrained with the
<tt>TESTSUITES</tt> environment variable.</p></div>
<h3 id="_testsuites">Testsuites</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="testfiles"></a></p></div>
<div class="paragraph"><p>It is common to start the name of the <em>.test</em> files with a 2 digit number to give them a proper
order: <em>10foo.test</em>, <em>20bar.test</em> and so on. Each such test should only test a certain aspect of
the system. You have to select the testing binary with the <tt>TESTING</tt> function and then write
certain TEST&#8217;s defining how the test should react. Since tests are shell scripts it is possible
to add some supplemental commands there to set and clean up the given test environment.</p></div>
<div class="paragraph"><div class="title">Select Test Executable</div><p><a id="TESTING"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>TESTING "message" test_program</tt></pre>
</div></div>
<div class="paragraph"><p>Selects the test binary for the follwing tests, prints an informal message.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>message</tt>
</dt>
<dd>
<p>
   message to be printed
</p>
</dd>
<dt class="hdlist1">
<tt>test_program</tt>
</dt>
<dd>
<p>
   an existing program to drive the tests or a shell function
</p>
</dd>
</dl></div>
<div class="paragraph"><div class="title">Define a Test</div><p><a id="TEST"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>TEST "title" arguments.. &lt;&lt;END</tt></pre>
</div></div>
<div class="paragraph"><p>Defines a single test</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>title</tt>
</dt>
<dd>
<p>
   describes this test and is also used as identifier for this test,
   must be unique for all your tests
</p>
</dd>
<dt class="hdlist1">
<tt>arguments</tt>
</dt>
<dd>
<p>
   the following arguments are passed to the test program
</p>
</dd>
<dt class="hdlist1">
<tt>&lt;&lt;END .. END</tt>
</dt>
<dd>
<p>
   a list of control commands expected in and outputs is given as <em>heredoc</em>.
</p>
</dd>
</dl></div>
<div class="paragraph"><p>Each line of the test specification in the heredoc starts with an arbitary number of spaces
followed by a command, followed by a colon and a space, followed by additional arguments or
being an empty or comment line.</p></div>
<div class="paragraph"><div class="title">Planned Tests</div><p><a id="PLANNED"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>PLANNED "title" arguments.. &lt;&lt;END</tt></pre>
</div></div>
<div class="paragraph"><p>Skip a single test.</p></div>
<div class="dlist"><dl>
<dt class="hdlist1">
<tt>title</tt>
</dt>
<dd>
<p>
   describes this test and is also used as identifier for this test,
   must be unique for all your tests
</p>
</dd>
<dt class="hdlist1">
<tt>arguments</tt>
</dt>
<dd>
<p>
   the following arguments are passed to the test program
</p>
</dd>
<dt class="hdlist1">
<tt>&lt;&lt;END .. END</tt>
</dt>
<dd>
<p>
   a list of control commands expected in and outputs is given as <em>heredoc</em>.
</p>
</dd>
</dl></div>
<div class="paragraph"><p><tt>PLANNED</tt> acts as dropin replacement for <tt>TEST</tt>. Each such test is skipped (and counted as skipped)
This can be used to specify tests in advance and activate them as soon development goes on or
deactivate intentional broken tests to be fixed later.</p></div>
<h4 id="_test_commands">Test Commands</h4>
<div class="paragraph"><p><a id="commands"></a></p></div>
<div class="paragraph"><div class="title">in</div><p><a id="in"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>in: text</tt></pre>
</div></div>
<div class="paragraph"><p>Send <tt>text</tt> to stdin of the test binary. If no <tt>in:</tt> commands are given, nothing is send to the
tests input.</p></div>
<div class="paragraph"><div class="title">out</div><p><a id="out"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>out: regex</tt></pre>
</div></div>
<div class="paragraph"><p>Expect <tt>regex</tt> on stdout. This regexes have a <em>triggering</em> semantic. That means it is tried to match
a given regex on as much lines as possible (<tt>.*</tt> will match any remaining output), if the match fails,
the next expected output line is tried. When that fails too the test is aborted and counted as failure.</p></div>
<div class="paragraph"><p>When no <tt>out:</tt> or <tt>out-lit:</tt> commands are given, then stdout is not checked, any output is ignored.</p></div>
<div class="paragraph"><div class="title">err</div><p><a id="err"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>out: regex</tt></pre>
</div></div>
<div class="paragraph"><p>Same as <em>out:</em> but expects data on stderr. When no <tt>err:</tt> or <tt>err-lit:</tt> commands are given, then stdout is
not checked, any output there is ignored.</p></div>
<div class="paragraph"><div class="title">out-lit</div><p><a id="outlit"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>out-lit: text</tt></pre>
</div></div>
<div class="paragraph"><p>Expect <tt>text</tt> on stdout, must match exactly or will fail.</p></div>
<div class="paragraph"><div class="title">err-lit</div><p><a id="errlit"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>err-lit: text</tt></pre>
</div></div>
<div class="paragraph"><p>Same as <em>out-lit:</em> but expects data on stderr.</p></div>
<div class="paragraph"><div class="title">return</div><p><a id="return"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>return: value</tt></pre>
</div></div>
<div class="paragraph"><p>Expects <tt>value</tt> as exit code of the tested program. The check can be negated by prepending the value with
an exclamation mark, <tt>return: !0</tt> expects any exist code except zero.</p></div>
<div class="paragraph"><p>If no <tt>return:</tt> command is given then a zero (success) return from the test program is expected.</p></div>
<h4 id="_conditional_tests">Conditional Tests</h4>
<div class="paragraph"><p><a id="conditionaltests"></a></p></div>
<div class="paragraph"><p>Sometimes tests need to be adapted to the environment/platform they are running on. This can be archived
with common if-else-elseif-endif statements. This statements can be nested.</p></div>
<div class="paragraph"><div class="title">if</div><p><a id="if"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>if: check</tt></pre>
</div></div>
<div class="paragraph"><p>Executes <tt>check</tt> as shell command, if its return is zero (success) then the following test parts are used.</p></div>
<div class="paragraph"><div class="title">else</div><p><a id="else"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>else:</tt></pre>
</div></div>
<div class="paragraph"><p>If the previous <tt>if</tt> failed then the following test parts are included in the test, otherwise they
are excluded.</p></div>
<div class="paragraph"><div class="title">elseif</div><p><a id="elseif"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>elseif: check</tt></pre>
</div></div>
<div class="paragraph"><p>Composition of else and if, only includes the following test parts if the if&#8217;s and elseif&#8217;s before failed
and <tt>check</tt> succeeded.</p></div>
<div class="paragraph"><div class="title">endif</div><p><a id="endif"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>endif:</tt></pre>
</div></div>
<div class="paragraph"><p>Ends an <tt>if</tt> statement.</p></div>
<h4 id="_other_elements">Other Elements</h4>
<div class="paragraph"><div class="title">msg</div><p><a id="msg"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>msg: message..</tt></pre>
</div></div>
<div class="paragraph"><p>Prints <tt>message</tt> while processing the test suite.</p></div>
<div class="paragraph"><div class="title">comments</div><p><a id="comments"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt># anything</tt></pre>
</div></div>
<div class="paragraph"><p>Lines starting with the hash mark and empty lines count as comment and are not used.</p></div>
<h3 id="_test_configuration">Test Configuration</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="configurationtests"></a></p></div>
<div class="paragraph"><p>Runtime behaviour of the testsuite can be configured by setting certain
envirinment variables.</p></div>
<div class="paragraph"><div class="title">LOGSUPPRESS</div><p><a id="LOGSUPPRESS"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>LOGSUPPRESS='^[0-9]\{10,\}: \(TRACE\|INFO\|NOTICE\):'</tt></pre>
</div></div>
<div class="paragraph"><p>Programms sometimes emit additional diagnostics on stderr which is volatile and not necessary for
validating the output the <tt>LOGSUPRESS</tt> variable can be set to a regex to filter this things out.
The default as shown above filters some NoBug annotations and non fatal logging out.</p></div>
<h4 id="_resource_limits">Resource Limits</h4>
<div class="paragraph"><p><a id="ulimittests"></a></p></div>
<div class="paragraph"><p>It is possible to set some limits for tests to protect the system against broken cases.
Since running under valgrind takes consinderable more resources there are separate variants for
limits when running under valgrind.
<a id="LIMITCPU"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>LIMIT_CPU=5</tt></pre>
</div></div>
<div class="paragraph"><p>Maximal CPU time the test may take after it will be killed with SIGXCPU. This protects agaist Lifelocks.
<a id="LIMITTIME"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>LIMIT_TIME=10</tt></pre>
</div></div>
<div class="paragraph"><p>Maximal wall-time a test may take after this it will be killed with SIGKILL. Protects against Deadlocks.
<a id="LIMITVSZ"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>LIMIT_VSZ=524288</tt></pre>
</div></div>
<div class="paragraph"><p>Maximal virtual memory size the process may map, allocations/mappings will fail when this limit is reached.
Protects against memory leaks.
<a id="LIMITVG"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>LIMIT_VG_CPU=20
LIMIT_VG_TIME=30
LIMIT_VG_VSZ=524288</tt></pre>
</div></div>
<div class="paragraph"><p>Same variables again with limits when running under valgrind.</p></div>
<h3 id="_configuration_files">Configuration Files</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="configurationfiles"></a></p></div>
<div class="paragraph"><p><tt>test.sh</tt> reads config files from the following location if they are exist</p></div>
<div class="olist arabic"><ol class="arabic">
<li>
<p>
<em>test.conf</em> from the current directory
</p>
</li>
<li>
<p>
<em>$srcdir/test.conf</em> <tt>$srcdir</tt> is set by autotools
</p>
</li>
<li>
<p>
<em>$srcdir/tests/test.conf</em> <tt>tests/</tt> is suspected as default directory for tests
</p>
</li>
<li>
<p>
<em>$TEST_CONF</em> a user defineable variable to point to a config file
</p>
</li>
</ol></div>
<h3 id="_valgrind">Valgrind</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="valgrind"></a></p></div>
<div class="paragraph"><p>Test are run under valgrind supervision by default, if not disabled.</p></div>
<div class="paragraph"><div class="title">VALGRINDFLAGS</div><p><a id="VALGRINDFLAGS"></a></p></div>
<div class="literalblock">
<div class="content">
<pre><tt>VALGRINDFLAGS="--leak-check=yes --show-reachable=yes"</tt></pre>
</div></div>
<div class="paragraph"><p><tt>VALGRINDFLAGS</tt> define the options which are passed to valgrind. This can be used to override
the defaults or switching the valgrind tool. The special case <tt>VALGRINDFLAGS=DISABLE</tt> will disable
valgrind for the tests.</p></div>
<h4 id="_generating_valgrind_suppression_files">Generating Valgrind Suppression Files</h4>
<div class="paragraph"><p><a id="vgsuppression"></a></p></div>
<div class="paragraph"><p>When there is a <em>vgsuppression</em> executable in the current dir (build by something external) then
test.sh uses this to generate a local <em>vgsuppression.supp</em> file and uses that to suppress
all errors generated by <em>vgsuppression</em>. The Idea here is that one adds code which triggers known
false positives in <em>vgsuppression</em>. Care must be taken that this file is simple and does
not generate true positives.</p></div>
<h3 id="_libtool">Libtool</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="libtool"></a></p></div>
<div class="paragraph"><p>When test.sh detects the presence of <em>./libtool</em> it runs all tests with
<tt>./libtool --mode=execute</tt>.</p></div>
</div>
<h2 id="_best_practices">Best Practices</h2>
<div class="sectionbody">
<div class="admonitionblock">
<table><tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">this section is very work in progress</td>
</tr></table>
</div>
<div class="olist arabic"><div class="title">Workflow</div><ol class="arabic">
<li>
<p>
Development
</p>
<div class="ulist"><ul>
<li>
<p>
Write a testsuite, build your program with -O0 -g -DEBUG_ALPHA and run
        the testsuite under valgrind control. Hack until the program meets the
        specifications defined by the testsuite.
</p>
</li>
</ul></div>
</li>
<li>
<p>
Beta Test
</p>
<div class="ulist"><ul>
<li>
<p>
Build with desired optimization level and -g -DEBUG_BETA and give the
        program to your beta testers.
</p>
</li>
</ul></div>
</li>
<li>
<p>
Release
</p>
<div class="ulist"><ul>
<li>
<p>
Build it with optimization and without -g -DEBUG_*
</p>
</li>
</ul></div>
</li>
</ol></div>
<div class="ulist"><div class="title">What and when to check</div><ul>
<li>
<p>
Add REQUIRE checks on your interfaces (incoming parameters). Especially if
    an argument might not cover the whole range of the underlying type.
</p>
</li>
<li>
<p>
Don&#8217;t waste your and your CPU&#8217;s time with unnecessary checks. The testsuite
    should validate your program. NoBug aids in debugging. You can add
    Postconditions (ENSURE) and Invariants when you have a bug somewhere and
    want to nail it down.
</p>
</li>
<li>
<p>
Added checks don&#8217;t need to be removed.
</p>
</li>
<li>
<p>
When you use the CHECKED/UNCHECKED features then don&#8217;t forget C scoping
    rules, tag things as CHECKED from the leaves to the root.
</p>
</li>
</ul></div>
<div class="ulist"><div class="title">Tips &amp; Tricks</div><ul>
<li>
<p>
TRACE(flagname) at the begin of every nontrivial function will easily log
    the progress of your application.
</p>
</li>
<li>
<p>
Trying a RELEASE build will abort on certain conditions (known BUG, TODO&#8217;s,
    UNCHECKED code), you can use this to find these spots.
</p>
</li>
</ul></div>
</div>
<h2 id="_appendix">Appendix</h2>
<div class="sectionbody">
</div>
<h2 id="_the_resource_tracking_algorithm">The Resource Tracking Algorithm</h2>
<div class="sectionbody">
<div class="paragraph"><p><a id="deadlockdetection"></a></p></div>
<div class="paragraph"><p>Each resource registers a global <em>resource_record</em>.</p></div>
<div class="paragraph"><p>Every new locking path discovered is stored as <em>resource_node</em> structures which refer to the associated
<em>resource_record</em>.</p></div>
<div class="paragraph"><p>Threads keep a trail of <em>resource_user</em> structures for each resource entered. This <em>resource_user</em> struct
refer to the <em>resource_nodes</em> and thus indirectly to the associated <em>resource_record</em>.</p></div>
<div class="paragraph"><p>The deadlock checker uses this information to test if the acqusition of a new resource would yield a
potential deadlock.</p></div>
<h3 id="_entering_resources">Entering Resources</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="nobugresourceenter"></a></p></div>
<div class="paragraph"><p>In multithreaded programs, whenever a thread wants to wait for a <em>resource_record</em>
the deadlock checker jumps in.</p></div>
<div class="paragraph"><p>The deadlock checking algorithm is anticipatory as it will find and abort on conditions which may lead
to a potential deadlock by violating the locking order learned earlier.</p></div>
<div class="paragraph"><p>Each thread holds a stack (list) of each <em>resource_user</em> it created. Leaving
a resource will remove it from this stacklist.</p></div>
<div class="paragraph"><p>Each <em>resource_record</em> stores the trail which other <em>resource_records</em> are already entered. This relations
are implemented with the <em>resource_node</em> helper structure.</p></div>
<div class="paragraph"><p>First we find out if there is already a node from the to be acquired resource back to
the topmost node of the current threads user stack.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> user <span style="color: #990000">=</span> NULL<span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*</span> node <span style="color: #990000">=</span> NULL<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(!</span><span style="font-weight: bold"><span style="color: #000000">llist_is_empty</span></span> <span style="color: #990000">(&amp;</span>tls<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">))</span>
 <span style="color: #FF0000">{</span>
  user <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">llist_tail</span></span> <span style="color: #990000">(&amp;</span>tls<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">),</span>
                           <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                           res_stack<span style="color: #990000">);</span>

  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span> templ <span style="color: #990000">=</span>
   <span style="color: #FF0000">{</span>
    <span style="color: #990000">...</span>
    user<span style="color: #990000">-&gt;</span>current<span style="color: #990000">-&gt;</span>resource<span style="color: #990000">,</span>
    <span style="color: #990000">...</span>
   <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

  node <span style="color: #990000">=</span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*)</span>
   <span style="font-weight: bold"><span style="color: #000000">llist_ufind</span></span> <span style="color: #990000">(&amp;</span>resource<span style="color: #990000">-&gt;</span>nodes<span style="color: #990000">,</span>
                <span style="color: #990000">&amp;</span>templ<span style="color: #990000">.</span>node<span style="color: #990000">,</span>
                nobug_resource_node_resource_cmpfn<span style="color: #990000">,</span>
                NULL<span style="color: #990000">);</span>
 <span style="color: #FF0000">}</span>
<span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>Deadlock checking is only done when the node is entered in <tt>WAITING</tt> state and only
available in multithreaded programs.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>state <span style="color: #990000">==</span> NOBUG_RESOURCE_WAITING<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
<span style="font-weight: bold"><span style="color: #000080">#if</span></span> NOBUG_USE_PTHREAD
  <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>If node was found above, then this locking path is already validated and no deadlock can happen,
else, if this stack already holds a resource (user is set) we have to go on with checking.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(!</span>node <span style="color: #990000">&amp;&amp;</span> user<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
  <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>If not then its checked that the resource to be entered is not on any parent trail of the current topmost resource,
if it is then this could be a deadlock which needs to be further investigated.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">LLIST_FOREACH</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>current<span style="color: #990000">-&gt;</span>resource<span style="color: #990000">-&gt;</span>nodes<span style="color: #990000">,</span> n<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*</span> itr <span style="color: #990000">=</span>
         <span style="color: #990000">((</span><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*)</span>n<span style="color: #990000">)-&gt;</span>parent<span style="color: #990000">;</span>
       itr<span style="color: #990000">;</span>
       itr <span style="color: #990000">=</span> itr<span style="color: #990000">-&gt;</span>parent<span style="color: #990000">)</span>
   <span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>itr<span style="color: #990000">-&gt;</span>resource <span style="color: #990000">==</span> resource<span style="color: #990000">)</span>
     <span style="color: #FF0000">{</span>
       <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>if the resource was on the trail, we search if there is a common ancestor before the resource
on the trail and the threads current chain,
if yes then this ancestor protects against deadlocks and we can continue.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*</span> itr2 <span style="color: #990000">=</span> itr<span style="color: #990000">-&gt;</span>parent<span style="color: #990000">;</span>
     itr2<span style="color: #990000">;</span>
     itr2 <span style="color: #990000">=</span> itr2<span style="color: #990000">-&gt;</span>parent<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #000000">LLIST_FOREACH_REV</span></span> <span style="color: #990000">(&amp;</span>tls<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">,</span> p<span style="color: #990000">)</span>
   <span style="color: #FF0000">{</span>
    <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> user <span style="color: #990000">=</span>
     <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span>p<span style="color: #990000">,</span>
                       <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                       res_stack<span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>user<span style="color: #990000">-&gt;</span>current<span style="color: #990000">-&gt;</span>resource <span style="color: #990000">==</span> itr2<span style="color: #990000">-&gt;</span>resource<span style="color: #990000">)</span>
     <span style="font-weight: bold"><span style="color: #0000FF">goto</span></span> done<span style="color: #990000">;</span>
   <span style="color: #FF0000">}</span>
  <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>If no ancestor found, we finally abort with a potential deadlock condition.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt>nobug_resource_error <span style="color: #990000">=</span> <span style="color: #FF0000">"possible deadlock detected"</span><span style="color: #990000">;</span>
<span style="font-weight: bold"><span style="color: #0000FF">return</span></span> NULL<span style="color: #990000">;</span></tt></pre></div></div>
<h3 id="_leaving_resources">Leaving Resources</h3><div style="clear:left"></div>
<div class="paragraph"><p><a id="nobugresourceleave"></a></p></div>
<div class="paragraph"><p>store the tail and next aside, we need it later</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000080">#if</span></span> NOBUG_USE_PTHREAD
<span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> tail <span style="color: #990000">=</span>
 <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">llist_tail</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>thread<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">),</span>
                   <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                   res_stack<span style="color: #990000">);</span>
<span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> next <span style="color: #990000">=</span>
 <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">llist_next</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">),</span>
                   <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                   res_stack<span style="color: #990000">);</span>
<span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>remove user struct from thread stack
The res_stack is now like it is supposed to look like with the <em>user</em> removed.
We now need to fix the node tree up to match this list.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">llist_unlink_fast_</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">);</span>
<span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>When the the user node was not the tail or only node of the thread stack, we have to check
(and possibly construct) a new node chain for it. No valdation of this chain needs to be done,
since it was already validated when entering the resources first.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>user <span style="color: #990000">!=</span> tail <span style="color: #990000">&amp;&amp;</span> <span style="color: #990000">!</span><span style="font-weight: bold"><span style="color: #000000">llist_is_empty</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>thread<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">))</span>
 <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> parent <span style="color: #990000">=</span> NULL<span style="color: #990000">;</span>
  <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">llist_head</span></span> <span style="color: #990000">(&amp;</span>user<span style="color: #990000">-&gt;</span>thread<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">)!=</span> <span style="color: #990000">&amp;</span>next<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">)</span>
   <span style="color: #FF0000">{</span>
    parent <span style="color: #990000">=</span>
     <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #000000">llist_prev</span></span> <span style="color: #990000">(&amp;</span>next<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">),</span>
                       <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                       res_stack<span style="color: #990000">);</span>
   <span style="color: #FF0000">}</span>
  <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>iterate over all users following the removed node, finding nodes pointing to this users or
create new nodes.</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #000000">LLIST_FORRANGE</span></span> <span style="color: #990000">(&amp;</span>next<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">,</span> <span style="color: #990000">&amp;</span>user<span style="color: #990000">-&gt;</span>thread<span style="color: #990000">-&gt;</span>res_stack<span style="color: #990000">,</span> n<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">*</span> cur <span style="color: #990000">=</span>
   <span style="font-weight: bold"><span style="color: #000000">LLIST_TO_STRUCTP</span></span> <span style="color: #990000">(</span>n<span style="color: #990000">,</span>
                     <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_user</span><span style="color: #990000">,</span>
                     res_stack<span style="color: #990000">);</span>

  <span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_record</span><span style="color: #990000">*</span> resource <span style="color: #990000">=</span>
   cur<span style="color: #990000">-&gt;</span>current<span style="color: #990000">-&gt;</span>resource<span style="color: #990000">;</span>
  <span style="color: #990000">...</span></tt></pre></div></div>
<div class="paragraph"><p>find the node pointing back to parent, create a new one if not found, rinse repeat</p></div>
<div class="listingblock">
<div class="content"><!-- Generator: GNU source-highlight 3.1.4
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite -->
<pre><tt><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span> templ <span style="color: #990000">=</span>
 <span style="color: #FF0000">{</span>
  <span style="color: #990000">...</span>
  parent<span style="color: #990000">?</span>parent<span style="color: #990000">-&gt;</span>current<span style="color: #990000">:</span>NULL<span style="color: #990000">,</span>
  <span style="color: #990000">...</span>
 <span style="color: #FF0000">}</span><span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*</span> node <span style="color: #990000">=</span>
 <span style="color: #990000">(</span><span style="font-weight: bold"><span style="color: #0000FF">struct</span></span> <span style="color: #008080">nobug_resource_node</span><span style="color: #990000">*)</span>
 <span style="font-weight: bold"><span style="color: #000000">llist_ufind</span></span> <span style="color: #990000">(&amp;</span>resource<span style="color: #990000">-&gt;</span>nodes<span style="color: #990000">,</span>
              <span style="color: #990000">&amp;</span>templ<span style="color: #990000">.</span>node<span style="color: #990000">,</span>
              nobug_resource_node_parent_cmpfn<span style="color: #990000">,</span>
              NULL<span style="color: #990000">);</span>

<span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(!</span>node<span style="color: #990000">)</span>
 <span style="color: #FF0000">{</span>
  node <span style="color: #990000">=</span> <span style="font-weight: bold"><span style="color: #000000">nobug_resource_node_new</span></span> <span style="color: #990000">(</span>resource<span style="color: #990000">,</span>
                                  parent<span style="color: #990000">?</span>parent<span style="color: #990000">-&gt;</span>current<span style="color: #990000">:</span>NULL<span style="color: #990000">);</span>
  <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(!</span>node<span style="color: #990000">)</span>
   <span style="color: #FF0000">{</span>
    nobug_resource_error <span style="color: #990000">=</span> <span style="color: #FF0000">"internal allocation error"</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> <span style="color: #993399">0</span><span style="color: #990000">;</span>
   <span style="color: #FF0000">}</span>
 <span style="color: #FF0000">}</span>

parent <span style="color: #990000">=</span> cur<span style="color: #990000">;</span></tt></pre></div></div>
</div>
<h2 id="_reference_index">Reference Index</h2>
<div class="sectionbody">
<div class="dlist"><dl>
<dt class="hdlist1">
<a href="#ABORT">Aborting</a>
</dt>
<dd>
<p>
abort the program
</p>
</dd>
<dt class="hdlist1">
<a href="#abortcallback">callback for aborting</a>
</dt>
<dd>
<p>
hook to handle a termination
</p>
</dd>
<dt class="hdlist1">
<a href="#abortcb">abort callback prototype</a>
</dt>
<dd>
<p>
type of a abort callback function
</p>
</dd>
<dt class="hdlist1">
<a href="#ALERT">ALERT</a>
</dt>
<dd>
<p>
about to die
</p>
</dd>
<dt class="hdlist1">
<a href="#annotationsemantics">Annotation Semantics</a>
</dt>
<dd>
<p>
actions taken on annotations
</p>
</dd>
<dt class="hdlist1">
<a href="#ASSERT">ASSERT</a>
</dt>
<dd>
<p>
generic assertion
</p>
</dd>
<dt class="hdlist1">
<a href="#assert">assert</a>
</dt>
<dd>
<p>
C standard assertion
</p>
</dd>
<dt class="hdlist1">
<a href="#assertions">Macros for Assertions</a>
</dt>
<dd>
<p>
assert the state of the application
</p>
</dd>
<dt class="hdlist1">
<a href="#BACKTRACE">Backtraces</a>
</dt>
<dd>
<p>
generate a backtrace
</p>
</dd>
<dt class="hdlist1">
<a href="#buildlevel">Build Levels</a>
</dt>
<dd>
<p>
selecting the build level
</p>
</dd>
<dt class="hdlist1">
<a href="#callbackdata">passing data to callbacks</a>
</dt>
<dd>
<p>
data to be passed to callbacks
</p>
</dd>
<dt class="hdlist1">
<a href="#callbacks">Callbacks</a>
</dt>
<dd>
<p>
function hooks to catch nobug actions
</p>
</dd>
<dt class="hdlist1">
<a href="#CHECK">CHECK</a>
</dt>
<dd>
<p>
unnconditional assertion for test suites
</p>
</dd>
<dt class="hdlist1">
<a href="#CHECKED">CHECKED, Scope</a>
</dt>
<dd>
<p>
tag scope as reviewed
</p>
</dd>
<dt class="hdlist1">
<a href="#COVERAGEDISABLE">Disabling and enabling fault-coverage checks</a>
</dt>
<dd>
<p>
handle false positives
</p>
</dd>
<dt class="hdlist1">
<a href="#COVERAGEFAULT">COVERAGE_FAULT</a>
</dt>
<dd>
<p>
coverage fault injection, statement
</p>
</dd>
<dt class="hdlist1">
<a href="#COVERAGEGOODBAD">COVERAGE_GOODBAD</a>
</dt>
<dd>
<p>
coverage fault injection, expression
</p>
</dd>
<dt class="hdlist1">
<a href="#COVERAGELEVEL">COVERAGE_LEVEL</a>
</dt>
<dd>
<p>
coverage fault injection log level
</p>
</dd>
<dt class="hdlist1">
<a href="#Cpluspluslogflags">C++ support, C++ logflags</a>
</dt>
<dd>
<p>
C\++ support for log flags
</p>
</dd>
<dt class="hdlist1">
<a href="#CRITICAL">CRITICAL</a>
</dt>
<dd>
<p>
can not continue
</p>
</dd>
<dt class="hdlist1">
<a href="#deadlockdetection">The Resource Tracking Algorithm</a>
</dt>
<dd>
<p>
how resources are tracked
</p>
</dd>
<dt class="hdlist1">
<a href="#DECLAREFLAG">DECLARE_FLAG</a>
</dt>
<dd>
<p>
declaring a flag
</p>
</dd>
<dt class="hdlist1">
<a href="#DEFINEFLAG">DEFINE_FLAG</a>
</dt>
<dd>
<p>
defining a flag
</p>
</dd>
<dt class="hdlist1">
<a href="#DEFINEFLAGLIMIT">DEFINE_FLAG_LIMIT</a>
</dt>
<dd>
<p>
defining a flag w/ log limit
</p>
</dd>
<dt class="hdlist1">
<a href="#DEFINEFLAGPARENT">DEFINE_FLAG_PARENT</a>
</dt>
<dd>
<p>
defining a flag hierarchy
</p>
</dd>
<dt class="hdlist1">
<a href="#DEFINEFLAGPARENTLIMIT">DEFINE_FLAG_PARENT_LIMIT</a>
</dt>
<dd>
<p>
defining a flag hierarchy, w/ log limit
</p>
</dd>
<dt class="hdlist1">
<a href="#DEPRECATED">DEPRECATED</a>
</dt>
<dd>
<p>
to be discarded in future
</p>
</dd>
<dt class="hdlist1">
<a href="#DISABLESHORTNAMES">DISABLE_SHORTNAMES</a>
</dt>
<dd>
<p>
require NOBUG_ prefix everywhere
</p>
</dd>
<dt class="hdlist1">
<a href="#DUMP">DUMP</a>
</dt>
<dd>
<p>
dumping datastructures
</p>
</dd>
<dt class="hdlist1">
<a href="#DUMPLEVEL">DUMP_LEVEL</a>
</dt>
<dd>
<p>
logging level at which DUMPs are done
</p>
</dd>
<dt class="hdlist1">
<a href="#DUMPLOG">DUMP_LOG</a>
</dt>
<dd>
<p>
logging helper for dumping
</p>
</dd>
<dt class="hdlist1">
<a href="#dumping">Dumping Data Structures</a>
</dt>
<dd>
<p>
dump complete datastructures
</p>
</dd>
<dt class="hdlist1">
<a href="#ECHO">ECHO</a>
</dt>
<dd>
<p>
unconditional logging for tests
</p>
</dd>
<dt class="hdlist1">
<a href="#ELSENOTREACHED">ELSE_NOTREACHED</a>
</dt>
<dd>
<p>
alternative never taken
</p>
</dd>
<dt class="hdlist1">
<a href="#ENSURE">ENSURE</a>
</dt>
<dd>
<p>
postconditions (computation outcomes)
</p>
</dd>
<dt class="hdlist1">
<a href="#ERROR">ERROR</a>
</dt>
<dd>
<p>
something gone wrong
</p>
</dd>
<dt class="hdlist1">
<a href="#FIXME">FIXME</a>
</dt>
<dd>
<p>
known bug
</p>
</dd>
<dt class="hdlist1">
<a href="#INFO">INFO</a>
</dt>
<dd>
<p>
progress message
</p>
</dd>
<dt class="hdlist1">
<a href="#INITFLAG">Logging Flag Initialization</a>
</dt>
<dd>
<p>
initialize log flags from environment
</p>
</dd>
<dt class="hdlist1">
<a href="#initexample">Initialization example</a>
</dt>
<dd>
<p>
initialize NoBug, example
</p>
</dd>
<dt class="hdlist1">
<a href="#INJECTFAULT">INJECT_FAULT</a>
</dt>
<dd>
<p>
fault injection statement
</p>
</dd>
<dt class="hdlist1">
<a href="#INJECTGOODBAD">INJECT_GOODBAD</a>
</dt>
<dd>
<p>
fault injection expression
</p>
</dd>
<dt class="hdlist1">
<a href="#INJECTLEVEL">Setting the logging level for fault injections</a>
</dt>
<dd>
<p>
log level for fault injection
</p>
</dd>
<dt class="hdlist1">
<a href="#INVARIANT">INVARIANT</a>
</dt>
<dd>
<p>
validate invariant state
</p>
</dd>
<dt class="hdlist1">
<a href="#limitslogging">The following default limits are</a>
</dt>
<dd>
<p>
default logging limits
</p>
</dd>
<dt class="hdlist1">
<a href="#LOG">LOG</a>
</dt>
<dd>
<p>
generic logging
</p>
</dd>
<dt class="hdlist1">
<a href="#LOGBASELIMIT">LOG_BASELIMIT</a>
</dt>
<dd>
<p>
minimum compliled-in logging limit
</p>
</dd>
<dt class="hdlist1">
<a href="#LOGEMERG">LOG_EMERG</a>
</dt>
<dd>
<p>
no logging macro for emergency logging
</p>
</dd>
<dt class="hdlist1">
<a href="#logflags">Log Flags</a>
</dt>
<dd>
<p>
define hierarchies for logging output
</p>
</dd>
<dt class="hdlist1">
<a href="#logformat">Log Line Format</a>
</dt>
<dd>
<p>
format of a log line
</p>
</dd>
<dt class="hdlist1">
<a href="#logging">Macros That Log Information</a>
</dt>
<dd>
<p>
generate logging messages
</p>
</dd>
<dt class="hdlist1">
<a href="#loggingcallback">callback when logging</a>
</dt>
<dd>
<p>
hook when something get logged
</p>
</dd>
<dt class="hdlist1">
<a href="#loggingcb">logging callback prototype</a>
</dt>
<dd>
<p>
type of a logging callback function
</p>
</dd>
<dt class="hdlist1">
<a href="#loggingconcepts">Logging Concepts</a>
</dt>
<dd>
<p>
destinations for logging output
</p>
</dd>
<dt class="hdlist1">
<a href="#loggingoptions">Targets and Options</a>
</dt>
<dd>
<p>
configure what gets logged
</p>
</dd>
<dt class="hdlist1">
<a href="#macros">Macros Overview</a>
</dt>
<dd>
<p>
concepts and parameters for macros
</p>
</dd>
<dt class="hdlist1">
<a href="#mailinglist">Support</a>
</dt>
<dd>
<p>
how to reach the NoBug developers
</p>
</dd>
<dt class="hdlist1">
<a href="#multithreading">Multithreading</a>
</dt>
<dd>
<p>
using NoBug in multithreaded programs
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGALPHACOMMA">NOBUG_ALPHA_COMMA</a>
</dt>
<dd>
<p>
append something after a comma in <strong>ALPHA</strong> builds
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGANN">NOBUG_ANN</a>
</dt>
<dd>
<p>
log flag for annotations
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGCONTEXT">Source Contexts</a>
</dt>
<dd>
<p>
pass information about the source location
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGDECLAREONLY">Force declarations only</a>
</dt>
<dd>
<p>
force flag declarations
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGENV">Controlling what gets logged</a>
</dt>
<dd>
<p>
environment variable for loging control
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGFLAGRAW">NOBUG_FLAG_RAW</a>
</dt>
<dd>
<p>
pass direct flag pointer
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGIF">NOBUG_IF_*</a>
</dt>
<dd>
<p>
include code conditionally on build level
</p>
</dd>
<dt class="hdlist1">
<a href="#NOBUGON">NOBUG_ON</a>
</dt>
<dd>
<p>
log flag which is always enabled
</p>
</dd>
<dt class="hdlist1">
<a href="#nobugresourceenter">Entering Resources</a>
</dt>
<dd>
<p>
deadlock check on enter
</p>
</dd>
<dt class="hdlist1">
<a href="#nobugresourceleave">Leaving Resources</a>
</dt>
<dd>
<p>
fix resource lists
</p>
</dd>
<dt class="hdlist1">
<a href="#nobugflag">nobug</a>
</dt>
<dd>
<p>
log flag used to show nobug actions
</p>
</dd>
<dt class="hdlist1">
<a href="#NOTICE">NOTICE</a>
</dt>
<dd>
<p>
detailed progress message
</p>
</dd>
<dt class="hdlist1">
<a href="#NOTREACHED">NOTREACHED</a>
</dt>
<dd>
<p>
code path never taken
</p>
</dd>
<dt class="hdlist1">
<a href="#PLANNED">PLANNED</a>
</dt>
<dd>
<p>
ideas for future
</p>
</dd>
<dt class="hdlist1">
<a href="#postloggingcallback">callback after logging</a>
</dt>
<dd>
<p>
hook after something get logged
</p>
</dd>
<dt class="hdlist1">
<a href="#rbdump">Dumping Persistent Ringbuffers</a>
</dt>
<dd>
<p>
dumping persistent ringbuffers
</p>
</dd>
<dt class="hdlist1">
<a href="#REQUIRE">REQUIRE</a>
</dt>
<dd>
<p>
preconditions (input parameters)
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEANNOUNCE">RESOURCE_ANNOUNCE</a>
</dt>
<dd>
<p>
publish new resources
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEASSERTSTATE">RESOURCE_ASSERT_STATE</a>
</dt>
<dd>
<p>
assert the state of a resource
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEDUMP">RESOURCE_DUMP</a>
</dt>
<dd>
<p>
dump the state of a single resource
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEDUMPALL">RESOURCE_DUMPALL</a>
</dt>
<dd>
<p>
dump the state of all resources
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEENTER">RESOURCE_ENTER</a>
</dt>
<dd>
<p>
claim a resource
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEFORGET">RESOURCE_FORGET</a>
</dt>
<dd>
<p>
remove resources
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEHANDLE">RESOURCE_HANDLE</a>
</dt>
<dd>
<p>
define resource handles
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCELEAVE">RESOURCE_LEAVE</a>
</dt>
<dd>
<p>
relinquish a claimed resource
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCELIST">RESOURCE_LIST</a>
</dt>
<dd>
<p>
enumerate all registered resources
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCELOGLEVEL">RESOURCE_LOG_LEVEL</a>
</dt>
<dd>
<p>
select the log level for resource logging
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCELOGGING">RESOURCE_LOGGING</a>
</dt>
<dd>
<p>
switch resource logging on and off
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCERESET">RESOURCE_RESET</a>
</dt>
<dd>
<p>
reset a single resource to a pristine state
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCERESETALL">RESOURCE_RESETALL</a>
</dt>
<dd>
<p>
reset the resource tracker to a pristine state
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCESTATE">RESOURCE_STATE</a>
</dt>
<dd>
<p>
change the state of a resource
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCETRY">RESOURCE_TRY</a>
</dt>
<dd>
<p>
wait for a resource to become available
</p>
</dd>
<dt class="hdlist1">
<a href="#RESOURCEWAIT">RESOURCE_WAIT</a>
</dt>
<dd>
<p>
wait for a resource to become available
</p>
</dd>
<dt class="hdlist1">
<a href="#targetslogging">The default targets are</a>
</dt>
<dd>
<p>
default logging targets
</p>
</dd>
<dt class="hdlist1">
<a href="#THREADDATA">NOBUG_THREAD_DATA</a>
</dt>
<dd>
<p>
thread local data for application use
</p>
</dd>
<dt class="hdlist1">
<a href="#THREADIDGET">NOBUG_THREAD_ID_GET</a>
</dt>
<dd>
<p>
query thread id
</p>
</dd>
<dt class="hdlist1">
<a href="#THREADIDSET">NOBUG_THREAD_ID_SET</a>
</dt>
<dd>
<p>
set or reset thread id
</p>
</dd>
<dt class="hdlist1">
<a href="#TODO">TODO</a>
</dt>
<dd>
<p>
things to be done
</p>
</dd>
<dt class="hdlist1">
<a href="#TRACE">TRACE</a>
</dt>
<dd>
<p>
debugging level message
</p>
</dd>
<dt class="hdlist1">
<a href="#UNCHECKED">UNCHECKED, Scope</a>
</dt>
<dd>
<p>
tag scope as unreviewed
</p>
</dd>
<dt class="hdlist1">
<a href="#UNIMPLEMENTED">UNIMPLEMENTED</a>
</dt>
<dd>
<p>
not yet implemented
</p>
</dd>
<dt class="hdlist1">
<a href="#WARN">WARN</a>
</dt>
<dd>
<p>
unexpected fixable error
</p>
</dd>
</dl></div>
</div>
<h2 id="_license">License</h2>
<div class="sectionbody">
<div class="literalblock">
<div class="content">
<pre><tt>NoBug
Copyright (C)
2006, 2007, 2008, 2009, 2010   Christian Thäter &lt;ct@pipapo.org&gt;</tt></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><tt>This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.</tt></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><tt>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.</tt></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><tt>You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301 USA.</tt></pre>
</div></div>
<div class="paragraph"><div class="title">License Rationale</div><p>NoBug is released under the "GNU General Public License version 2 or
any later" to protect its freedom. If one wants to use NoBug in a
propietary program, please contact the main author for
acknowledging relicensing terms.</p></div>
<div class="paragraph"><p>For BSD license style Free Software, this means you can not distribute
binaries linking NoBug without making its source available. To make
this compatible, it is suggested that you dual-license your software
with your prefered BSD like license and the GPL. As long as it uses
NoBug, the GPL will take over and you have to make the source
available, while one can ship a BSD or LGPL Licensed headerfile which
defines all NoBug macros as empty macros and remove libnobug from the
linking, then NoBug isn&#8217;t used anymore and you may apply BSD license
terms for resulting binaries.</p></div>
<div class="paragraph"><div class="title">Contributor Agreement</div><p>Improvements and patches must be licensed as "GPL v2 or any later" to
be acceptable. Further a contributor must either assign his copyright
to the main NoBug author or agree with the possibility that NoBug can
be relicensed for propietary use:</p></div>
<div class="literalblock">
<div class="content">
<pre><tt>Independent of the GPL license as stated above, The main author
of NoBug explicitly reserve the right to relicense NoBug under
different, even propietary terms. Any contributor agrees to
such a possiblility by sending his contribution to be included
into the official releases.</tt></pre>
</div></div>
<div class="literalblock">
<div class="content">
<pre><tt>This agreement is bilateral, every contributor who worked on a
substantial part of NoBug has the right to relicense it after
negotiation with the NoBug main author. Exact terms of such
relicensing are worked out on a per case base.</tt></pre>
</div></div>
<div class="paragraph"><p>The intention is that anyone who worked on NoBug should be able to
benefit from his work. This means one should be able to use it at his
workplace, to gain a job or as well as relicense it for a customer.
Unlike other projects which simply ask for transfering the copyright
to the main author, NoBug tries to make it possible to retain the
copyright by anyone who helped the project.</p></div>
<div class="paragraph"><p>This additional agreement has no impact on the GPL, it&#8217;s sole purpose
is to define relicensing policies between the NoBug main author and
contributors. When you recieve NoBug it will be licensed under
GPL unless you personally acknowledged other terms with the NoBug main
author (or any other main contributor).</p></div>
<div class="paragraph"><p>If anyone feels he is not credited in the <em>AUTHORS</em> file or in any
copyright notice, please contact the main author for inclusion.</p></div>
</div>
<h2 id="_credits">Credits</h2>
<div class="sectionbody">
<div class="dlist"><dl>
<dt class="hdlist1">
Design, implementation
</dt>
<dd>
<p>
 Christian Thaeter &lt;ct@pipapo.org&gt;<br />
</p>
</dd>
<dt class="hdlist1">
Testsuite
</dt>
<dd>
<p>
 Christian Thaeter &lt;ct@pipapo.org&gt;<br />
</p>
</dd>
<dt class="hdlist1">
Documentation
</dt>
<dd>
<p>
 Christian Thaeter &lt;ct@pipapo.org&gt;<br />
 Benny Lyons &lt;benny.lyons@uniserv.com&gt;<br />
 François KUBLER &lt;ih8tehuman@free.fr&gt;<br />
 Andreas Hermann Braml &lt;andreas@braml.org&gt;<br />
</p>
</dd>
<dt class="hdlist1">
Autoconf build system improvements
</dt>
<dd>
<p>
 Peter Simons &lt;simons@cryp.to&gt;<br />
 Luca Barbato &lt;lu_zero@gentoo.org&gt;<br />
 Michael Ploujnikov &lt;ploujj@gmail.com&gt;<br />
</p>
</dd>
<dt class="hdlist1">
Ringbuffer dump tool
</dt>
<dd>
<p>
 Simeon Voelkel &lt;simeon_voelkel@arcor.de&gt;<br />
</p>
</dd>
<dt class="hdlist1">
Logo
</dt>
<dd>
<p>
 Pablo Lizardo &lt;pablo_lizardo@yahoo.com.ar&gt;<br />
</p>
</dd>
</dl></div>
</div>
</div>
<div id="footnotes"><hr /></div>
<div id="footer">
<div id="footer-text">
Last updated 2010-08-19 19:29:34 CEST
</div>
</div>
</body>
</html>

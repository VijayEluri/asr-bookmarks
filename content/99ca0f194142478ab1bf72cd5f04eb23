<HTML>
<HEAD>
<TITLE> Programming in Haskell </TITLE>
<META name="keywords" content="Programming in Haskell, Programming in Haskell, Haskell, Haskell, functional programming book, functional programming book, Haskell book, Haskell book, Haskell course, Haskell course, Graham Hutton, Graham Hutton">
</HEAD>

<BODY>

<CENTER>
<P>
<FONT SIZE=-1><EM>Last updated on 5th June 2010</EM></FONT>
<P>
<A HREF="#ordering">Ordering</A>;
<A HREF="#description">Description</A>;
<A HREF="#reviews">Reviews</A>;
<A HREF="#slides">Slides</A>;
<A HREF="#videos">Videos</A>;
<A HREF="#code">Code</A>;
<A HREF="#solutions">Solutions</A>;
<A HREF="#errata">Errata</A>.
</CENTER>

<P>
<HR>

<IMG ALIGN=RIGHT SRC="cover-med.jpg" HSPACE=20 VSPACE=20 BORDER="1" ALT="Book Cover">

<BR>
<P>
<H1><A NAME="ordering">Programming in Haskell</H1>

<P>
<EM><a href="http://www.cs.nott.ac.uk/~gmh">Graham Hutton</a>, University
of Nottingham</EM><BR>Cambridge University Press, 2007

<P>
Paperback: &#163;23.99 / $45.00 (ISBN-13: 9780521692694 | ISBN-10: 0521692695)<BR>
Hardback:  &#163;60.00 / $115.00 (ISBN-13: 9780521871723 | ISBN-10: 0521871727)
<BR>
eBook: $36.00 (ISBN-13: 9780511292187 | ISBN-10: 051129218X) <BR>
Kindle: $36.00 (ASIN: B001FSKE6Q)

<P>
Copies can be ordered from any book retailer, such as
<a href="http://www.cambridge.org/catalogue/catalogue.asp?isbn=9780521692694">Cambridge<a>, <a href="http://www.amazon.com/gp/product/0521692695?ie=UTF8&tag=progrinhaske-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0521692695">Amazon</a><img src="http://www.assoc-amazon.com/e/ir?t=progrinhaske-20&l=as2&o=1&a=0521692695"/>, <a href="http://www.powells.com/cgi-bin/biblio?inkey=62-0521692695-1">Powells</a>,  <a href="http://search.barnesandnoble.com/booksearch/isbnInquiry.asp?z=y&EAN=9780521692694&itm=1">Barnes and Noble</a>, or <a href="http://www.ebooks.com/ebooks/book_display.asp?IID=307017">eBooks</a>. 
In the UK, it is available from
<a href="http://www.cambridge.org/uk/9780521692694">Cambridge</a>, <a href="http://www.amazon.co.uk/gp/product/0521692695?ie=UTF8&tag=progrinhaske-21&linkCode=as2&camp=1634&creative=6738&creativeASIN=0521692695">Amazon</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=progrinhaske-21&l=as2&o=2&a=0521692695"/>, <a href="http://bookshop.blackwell.co.uk/jsp/display_product_info.jsp?isbn=9780521692694">Blackwells</a>, <a href="http://www.waterstones.com/waterstonesweb/displayProductDetails.do?sku=5546666">Waterstones</a>, <a href="http://www.play.com/Search.aspx?searchtype=bookall&searchstring=hutton+haskell&page=search&pa=search">Play</a>, and even <a href="http://www.tesco.com/books/product.aspx?R=0521692695&bci=4293443850|Graham%20Hutton">Tesco</a>!  Ordering the book via either of the
preceeding referral links to Amazon gives a higher return to the author,
for the same price to the purchaser.

<P>
Translations:
<P>
<UL>
<LI> A <a href="http://pl.pusan.ac.kr/~haskell/">Korean version</a>
was published in July 2009;
<LI> A <a href="http://www.amazon.co.jp/プログラミングHaskell-Graham-Hutton/dp/4274067815">Japanese version</a> was published in November 2009.
</UL>

<P>
<H2><A NAME="description">Description</H2>

<P>
Haskell is one of the leading languages for teaching functional
programming, enabling students to write simpler and cleaner code,
and to learn how to structure and reason about programs. This
introduction is ideal for beginners: it requires no previous
programming experience and all concepts are explained from first
principles via carefully chosen examples. Each chapter includes
exercises that range from the straightforward to extended projects,
plus suggestions for further reading on more advanced topics.
The author is a leading Haskell researcher and instructor, well-known
for his teaching skills.  The presentation is clear and simple, and
benefits from having been refined and class-tested over several years.
The result is a text that can be used with courses, or for self-learning.
Additional features include: freely available powerpoint
<a href="#slides">slides</a>, lecture <a href="#videos">videos</a>, Haskell
<a href="#code">code</a> and exercise <a href="#solutions">solutions</a>.

<H2><A NAME="reviews">Reviews</H2>

<P>
In depth technical reviews:

<UL>
<LI><P>
&ldquo;The best introduction to Haskell available.  There are many
paths towards becoming comfortable and competent with the language
but I think studying this book is the quickest path.  I urge readers
of this magazine to recommend <EM>Programming in Haskell</EM> to
anyone who has been thinking about learning the
language.&rdquo;&#8213;
<a href="http://www.cs.nott.ac.uk/~gmh/book-review.pdf">Duncan Coutts</a>

<LI><P>
&ldquo;Where this book excels is in the order and style of its exposition. With
its ripe selection of examples and its careful clarity of exposition,
the book is a welcome addition.&rdquo;&#8213;
<a href="http://www.cs.nott.ac.uk/~gmh/book-review2.pdf">Saketh Bhamidipati</a>
</UL>

<P>
Additional reviews:

<UL>

<LI><P>
&ldquo;
Programmers are hungry to learn more about the foundations of functional
programming.  The purely functional language Haskell is the best medium
to teach those fundamentals, and Dr Hutton's textbook is the best way
to learn about Haskell.&rdquo; &#8213; <a href="http://communications.nottingham.ac.uk/News/Article/Online-lecture-downloads-hit-a-quarter-of-a-million.html">Erik Meijer</a>

<LI><P>
&ldquo;A wonderful introduction to functional programming in Haskell.
I'm using it as part of an undergraduate course and I'm amazed at
how fast my students have understood issues with which previous
classes of mine have struggled.  In my opinion, this is
<EM>the</EM> best introductory text available on functional programming
in any language.&rdquo; &#8213;
<a href="http://www.amazon.com/review/R1E0EZW1DQQSP8/ref=cm_cr_rdp_perm">Bill Harrison</a>

<LI><P>
&ldquo;An excellent introduction to functional programming in Haskell,
written by a first-rate teacher and researcher.  The material is presented
in an engaging, light and no-frills style, at a pace that is appropriate
for undergraduates even in their first year.  I thoroughly recommend
it.&rdquo; &#8213; Richard Bird

<LI><P>
&ldquo;By far the best introduction to Haskell I've seen.  It's great to
read a really clear, concise text book, I could almost feel my brain
re-organising itself while I read it. The experience reminded me of
reading Kernighan & Ritchie after some months of confused C hacking,
feeling everything clicking into place.&rdquo; &#8213;
<a href="http://doc.gold.ac.uk/~ma503am/alex/programminginhaskell">Alex McLean</a>

<LI><P>
&ldquo;Among the most elegant computer language books I've read, and
it will go on my shelf next to The Little Schemer and Godel, Escher, Bach.
The text presented an enlightening and well explained new concept in
typed functional programming on nearly every
page.&rdquo; &#8213;
<a href="http://www.amazon.com/review/RPY71XC4K8ODE/ref=cm_cr_rdp_perm">Braddock Gaskill</a>

<LI><P>
&ldquo;
Once in a while you come across a book which makes reading a pleasure. You don't feel like doing anything else apart from reading the book. Programming in Haskell is one such book. Reading the book gives you a wow feeling.
Haskell to me never felt easy before&rdquo; &#8213; <a href="http://www.csprabala.com/2010/01/programming-in-haskell-by-graham-hutton.html">Chandrasekhar Prabala</a>

<LI><P>
&ldquo;The material is very well written, concise and easy to understand. I'd recommend this text to anyone starting out with Haskell.&rdquo; &#8213; 
<a href="http://www.amazon.co.uk/review/RE14WB89SLI9D/ref=cm_cr_rdp_perm">Joey Capper</a>

<LI><P>
&ldquo;I wish I had such a book for every new language I want to learn.  I cannot recommend this book highly enough.&rdquo; &#8213;
<a href="http://www.amazon.de/review/R1AKQSJIPKYD3T/ref=cm_cr_rdp_perm">
T. Herchenr&ouml;ders</a>

<LI>
<P>
&ldquo;An incredibly clear and concise introduction to the basic features
and modus operandi of Haskell.&rdquo; &#8213; 
<a href="http://www.amazon.com/review/R151VCHXPPDJC/ref=cm_cr_rdp_perm">K. Snavely</a>

<LI><P>
&ldquo;Contains absolutely everything that the beginner needs to know.&rdquo; &#8213; <a href="http://vanirsystems.com/danielsblog/?p=123">Daniel Lewis</a>

<LI><P>
&ldquo;Well written, clear, concise, and easy to follow&rdquo; &#8213;
<a href="http://www.amazon.com/review/RB64FZAD4GNB4/ref=cm_cr_rdp_perm">Davis</a>

<LI><P>
&ldquo;The writing style is clear and to the point&rdquo; &#8213;
<a href="http://www.amazon.com/review/RC4NWYCWHXD4C/ref=cm_cr_rdp_perm">Mark Twain</a>

<LI><P>
&ldquo;This looks like <EM>the</EM> introductory Haskell text!&rdquo; &#8213;
<a href="http://praisecurseandrecurse.blogspot.com/2007/02/richard-or-edna-and-graham-huttons.html">Paul Potts</a>

<LI><P>
&ldquo;Absolutely Excellent&rdquo; &#8213;
<a href="http://www.amazon.com/review/R29ELJAS51UIKO/ref=cm_cr_rdp_perm">Benjamin Manes</a>
</UL>

<H2><A NAME="slides">Slides</H2>

<P>
Powerpoint slides that cover the main points from each chapter:

<OL>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter1.ppt">Introduction</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter2.ppt">First steps</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter3.ppt">Types and classes</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter4.ppt">Defining functions</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter5.ppt">List comprehensions</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter6.ppt">Recursive functions</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter7.ppt">Higher-order functions</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter8.ppt">Functional parsers</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter9.ppt">Interactive programs</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter10.ppt">Declaring types and classes</a>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/chapter11.ppt">The countdown problem</a>
<LI> Lazy evaluation
<LI> Reasoning about programs
</OL>

<P>
These slides may be used or modified for any educational purpose on
a non-profit-making basis, provided that I am acknowledged as the original
author.

<H2><A NAME="videos">Videos</H2>

Video lectures using the above powerpoint slides for each chapter 
were given by Erik Meijer on Microsoft's <a href="http://channel9.msdn.com/tags/C9+Lectures/">Channel 9</a>:

<OL>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/7/9/3/4/9/4/C9LecturesMeijerFunctionalChapter1_2MB_ch9.wmv">Introduction</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/8/9/3/4/9/4/C9LecturesMeijerFPC2_2MB_ch9.wmv">First steps</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/6/1/7/5/9/4/C9LecturesMeijerFPC3_2MB_ch9.wmv">Types and classes</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/7/1/9/8/9/4/C9LecturesMeijerFPC4_2MB_ch9.wmv">Defining functions</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/8/1/9/8/9/4/C9LecturesMeijerFPC5_2MB_ch9.wmv">List comprehensions</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/6/6/0/9/9/4/C9LecturesErikMeijerFPC6_2MB_ch9.wmv">Recursive functions</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/9/0/2/4/0/5/C9LecturesMeijerFPC7_2MB_ch9.wmv">Higher-order functions</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/1/1/2/4/0/5/C9LecturesMeijerC8_2MB_ch9.wmv">Functional parsers</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/2/1/2/4/0/5/C9LecturesMeijerFPC9_2MB_ch9.wmv">Interactive programs</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/3/1/2/4/0/5/C9LecturesMeijerFPC10_2MB_ch9.wmv">Declaring types and classes</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/4/1/2/4/0/5/C9LecturesFPGrahamHuttonC11_2MB_ch9.wmv">The countdown problem</a> (guest lecture by myself)
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/5/1/2/4/0/5/C9LecturesErikMeijerFPC12_2MB_ch9.wmv">Lazy evaluation</a>
<LI> <a href="http://ecn.channel9.msdn.com/o9/ch9/6/5/6/3/1/5/C9LecturesMeijerFPC13_2MB_ch9.wmv">Reasoning about programs</a>
</OL>

<P>
These videos have been very popular
(<a href="http://communications.nottingham.ac.uk/News/Article/Online-lecture-downloads-hit-a-quarter-of-a-million.html">press release</a>), and the total number of downloads now exceeds 600,000.

<H2><A NAME="code">Code</H2>

<P>
Haskell code for each of the extended examples:

<UL>
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/cipher.lhs">Caeser cipher</a> - section 5.5
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/transmit.lhs">String transmitter</a> - section 7.6
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/Parsing.lhs">Functional parsing library</a> - chapter 8
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/parser.lhs">Expression parser</a> - section 8.8
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/calculator.lhs">Calculator</a> - section 9.6
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/life.lhs">Game of life</a> - section 9.7
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/tautology.lhs">Tautology checker</a> - section 10.4
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/machine.lhs">Abstract machine</a> - section 10.5
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/countdown.lhs">Countdown</a> - chapter 11
<LI> <a href="http://www.cs.nott.ac.uk/~gmh/compiler.lhs">Compiler</a> - section 13.7
</UL>

<H2><A NAME="solutions">Solutions</H2>

Solutions to the exercises for each chapter are available
<a href="http://www.cs.nott.ac.uk/~gmh/solutions.pdf">here</a>.

<H2><A NAME="errata">Errata</H2>

<P>
All known errata are listed
<a href="http://www.cs.nott.ac.uk/~gmh/errata.html">here</a>.
Please contact the author if you spot any further issues.

<BR>
<P>
<HR>


</BODY>
</HTML>
